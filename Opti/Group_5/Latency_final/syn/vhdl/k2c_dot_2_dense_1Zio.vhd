-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity k2c_dot_2_dense_1Zio_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of k2c_dot_2_dense_1Zio_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101000001110110000000111", 
    1 => "00111110010001100101111110111101", 
    2 => "00111110011001011100011101001111", 
    3 => "00111110100000101000000110101100", 
    4 => "00111110101111110101010111011010", 
    5 => "00111110100000101011011100011100", 
    6 => "00111110000110010111011101100010", 
    7 => "00111101100100010011101101101101", 
    8 => "00111110100001010000000111000100", 
    9 => "00111101001011110101110111011011", 
    10 => "10111110100111001111101000000001", 
    11 => "00111110010010111111010110011111", 
    12 => "10111101101000110001011010000010", 
    13 => "00111110101011000100100010011111", 
    14 => "10111100010011110001111011001100", 
    15 => "00111110100111000011001110100111", 
    16 => "10111110100010101011001011010000", 
    17 => "00111110001100011110001110000010", 
    18 => "00111101110011110100100111000101", 
    19 => "10111101101000110001011111100111", 
    20 => "10111110001010010111101111001110", 
    21 => "10111110001000111110100001000001", 
    22 => "00111110001011110001101010001110", 
    23 => "10111101011100111111011011000111", 
    24 => "10111110000000100110100111011100", 
    25 => "00111110011111100010100010010110", 
    26 => "00111110101111101110110000110000", 
    27 => "10111010111010100100101000000111", 
    28 => "00111100111101011011111101001010", 
    29 => "00111101011011100110101000100000", 
    30 => "10111110010010010101100000011110", 
    31 => "00111101110001010001001101000010", 
    32 => "00111100001101010101001010011010", 
    33 => "00111110000100101010100000010001", 
    34 => "10111101011010110000111100010110", 
    35 => "00111110011101111001000110001000", 
    36 => "10111101100000100100011110111001", 
    37 => "00111110101010010100110010100011", 
    38 => "00111011100110001011001010011110", 
    39 => "10111110011011111011101010001111", 
    40 => "00111110011010101010010111000110", 
    41 => "00111110100101101000010000011100", 
    42 => "10111110000111110010101010011100", 
    43 => "00111110011000010001111011100110", 
    44 => "10111100100100111100000101101011", 
    45 => "10111100100101111010101001110001", 
    46 => "00111110110001011101110101011010", 
    47 => "10111101100111011001000000001101", 
    48 => "10111110011000100011110010100100", 
    49 => "00111110101111100000011000100010", 
    50 => "00111110101010100010111110011000", 
    51 => "10111110010101101100000110000010", 
    52 => "00111110010010011001011101101101", 
    53 => "10111110100011111101010110000010", 
    54 => "10111101101000100010011000001100", 
    55 => "10111110001101101100011011011000", 
    56 => "10111110011000010110001101010101", 
    57 => "00111110001000111110010111111101", 
    58 => "00111110101000000100100011000110", 
    59 => "00111110100010100111101101111001", 
    60 => "10111110100111011100110011001111", 
    61 => "10111110001100101110000110001100", 
    62 => "10111110010101111001011010111111", 
    63 => "10111101111001111101110111100011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity k2c_dot_2_dense_1Zio is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of k2c_dot_2_dense_1Zio is
    component k2c_dot_2_dense_1Zio_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    k2c_dot_2_dense_1Zio_rom_U :  component k2c_dot_2_dense_1Zio_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


