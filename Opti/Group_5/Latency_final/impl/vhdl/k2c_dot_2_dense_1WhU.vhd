-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity k2c_dot_2_dense_1WhU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of k2c_dot_2_dense_1WhU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000000000001011000001011", 
    1 => "10111110100111100001010011010010", 
    2 => "00111110001011010000100110110001", 
    3 => "10111110000011011100100100011111", 
    4 => "10111110100011111001100101110011", 
    5 => "10111110100110110000100000000101", 
    6 => "10111110101110101010000001001011", 
    7 => "00111110001010010000000100011010", 
    8 => "00111100100010011101011101010110", 
    9 => "10111110100101011100000101000101", 
    10 => "10111101111110011111101101111101", 
    11 => "00111100100010001100010001101000", 
    12 => "10111110001111010101000111101000", 
    13 => "10111100011100111000111111001100", 
    14 => "00111110000000001100100010000010", 
    15 => "10111101011110010010001110111000", 
    16 => "10111110011011001100110100110111", 
    17 => "10111100001010011110111000000101", 
    18 => "10111110001001011100110001111110", 
    19 => "10111110101110101010001111110001", 
    20 => "00111110001110000001101010011011", 
    21 => "10111110011110100010010010010110", 
    22 => "10111101101100011100110110000100", 
    23 => "10111101101001000100010011110111", 
    24 => "10111110100010011010010100000111", 
    25 => "10111110001100100100011000010111", 
    26 => "00111110001110001100100101101101", 
    27 => "00111101101010001100000111001100", 
    28 => "00111110100000010000111000010010", 
    29 => "10111101110000001101011000111000", 
    30 => "10111101001111010011110101001000", 
    31 => "10111110101101011111100000001101", 
    32 => "00111110100000001111100010110110", 
    33 => "00111101011010001111101110100101", 
    34 => "00111101110000000010100101011001", 
    35 => "10111101100111000111011011000010", 
    36 => "00111100011110110010010100011111", 
    37 => "00111110011001110111001100110100", 
    38 => "10111110011101101101100000100101", 
    39 => "00111101110110101100101100110101", 
    40 => "00111101001001111101111011111101", 
    41 => "10111101110100001010011010111110", 
    42 => "00111110101011011100011010111111", 
    43 => "10111110100111100001101110000011", 
    44 => "10111110001010111000110101001110", 
    45 => "10111100101110101010110101111110", 
    46 => "10111011001001111001011010001100", 
    47 => "10111110000010101000001000010110", 
    48 => "00111110010101010110110111100101", 
    49 => "10111110010010000110001001110001", 
    50 => "00111101001100110011101111010010", 
    51 => "00111110011111100100111101011010", 
    52 => "00111101111110000100011011101111", 
    53 => "10111110101000111111000100001100", 
    54 => "10111110001100011011100010110111", 
    55 => "00111110000011010111011001011101", 
    56 => "10111101101110111001101111100111", 
    57 => "00111101110001000000001001110010", 
    58 => "00111100000101101011001001000110", 
    59 => "00111101110101001110010101101110", 
    60 => "00111101000010010000011001000101", 
    61 => "00111101001000100111000010001011", 
    62 => "00111110100100100110000000001001", 
    63 => "00111110100000011110010100010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity k2c_dot_2_dense_1WhU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of k2c_dot_2_dense_1WhU is
    component k2c_dot_2_dense_1WhU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    k2c_dot_2_dense_1WhU_rom_U :  component k2c_dot_2_dense_1WhU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


