-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity k2c_dot_2_dense_19j0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of k2c_dot_2_dense_19j0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011101101010001110011111", 
    1 => "10111110000100100010011000110010", 
    2 => "00111110011101000111010001001000", 
    3 => "10111100001000110000101110100111", 
    4 => "00111110110011011010111101101000", 
    5 => "00111110011000101001111101010001", 
    6 => "00111110101101011101000111000001", 
    7 => "10111110100001111100111001101101", 
    8 => "00111110100101110010110011011010", 
    9 => "00111110100011111100011111000100", 
    10 => "10111110100001100100101111010101", 
    11 => "00111110100101111110111001010101", 
    12 => "00111110101011001111101100010100", 
    13 => "00111101101111001010000101010111", 
    14 => "10111110100010100010111101110101", 
    15 => "10111101100110010111000001000100", 
    16 => "00111110110000100000100110000100", 
    17 => "00111101100110111010110100011000", 
    18 => "00111110010110101010011000100100", 
    19 => "00111110010111001111011110110000", 
    20 => "10111101100001000100111100100011", 
    21 => "10111110001110111010101111110000", 
    22 => "10111101101101110011100110110001", 
    23 => "10111101001111111011011000101111", 
    24 => "10111110101010010010011000111010", 
    25 => "00111101011111101110110010101101", 
    26 => "00111110011010010001110111011001", 
    27 => "10111101101001101010001101100000", 
    28 => "00111110101110010001000011111100", 
    29 => "10111110000110110110111001101110", 
    30 => "10111110001001100001000011100011", 
    31 => "10111110101001111001100110010010", 
    32 => "00111101110011100111110100100011", 
    33 => "00111110101100001110010101000111", 
    34 => "00111110100111100000100010111010", 
    35 => "00111101100111110001100100101111", 
    36 => "10111101000000000010000110010001", 
    37 => "10111011011100000000011111000100", 
    38 => "10111101110100010101000010100100", 
    39 => "10111100111001010010001011110000", 
    40 => "10111110001111100001100101001010", 
    41 => "00111110100100011010010000011110", 
    42 => "10111101111001000000001101110110", 
    43 => "10111110100010001000001111110111", 
    44 => "10111110100110101010101011111000", 
    45 => "00111110001001110000010011111100", 
    46 => "00111110100101110001100111110111", 
    47 => "10111110100000010000000111110011", 
    48 => "10111100111110000010110000011001", 
    49 => "00111100111110111100110000000001", 
    50 => "00111101001100000111000010000110", 
    51 => "10111110100100010101101000110110", 
    52 => "00111110010000011011101000010110", 
    53 => "10111101011011001111101111000010", 
    54 => "10111110011010001001011100111001", 
    55 => "10111110001010100100011110110101", 
    56 => "00111110010010111001100101000001", 
    57 => "00111110100110011101010101010001", 
    58 => "00111101001001000010001010001010", 
    59 => "00111101110010000000001000010101", 
    60 => "10111110100110101101111011001100", 
    61 => "00111110101001111000111011011111", 
    62 => "00111110001101101011100000001100", 
    63 => "00111110000110001010001011101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity k2c_dot_2_dense_19j0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of k2c_dot_2_dense_19j0 is
    component k2c_dot_2_dense_19j0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    k2c_dot_2_dense_19j0_rom_U :  component k2c_dot_2_dense_19j0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


