-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_bias_add_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_array_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array_ce0 : OUT STD_LOGIC;
    A_array_we0 : OUT STD_LOGIC;
    A_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array1_ce0 : OUT STD_LOGIC;
    A_array1_we0 : OUT STD_LOGIC;
    A_array1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_array1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array2_ce0 : OUT STD_LOGIC;
    A_array2_we0 : OUT STD_LOGIC;
    A_array2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_array2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array3_ce0 : OUT STD_LOGIC;
    A_array3_we0 : OUT STD_LOGIC;
    A_array3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_array3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array4_ce0 : OUT STD_LOGIC;
    A_array4_we0 : OUT STD_LOGIC;
    A_array4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_array4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array5_ce0 : OUT STD_LOGIC;
    A_array5_we0 : OUT STD_LOGIC;
    A_array5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_array5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array6_ce0 : OUT STD_LOGIC;
    A_array6_we0 : OUT STD_LOGIC;
    A_array6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_array6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array7_ce0 : OUT STD_LOGIC;
    A_array7_we0 : OUT STD_LOGIC;
    A_array7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_array7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    b_numel_read : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of k2c_bias_add_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_15_bias_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_15_bias_array_ce0 : STD_LOGIC;
    signal dense_15_bias_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_212_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_86_reg_316 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_225_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_324 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayNo_trunc_fu_245_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal arrayNo_trunc_reg_334 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_array_addr_reg_339 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_array1_addr_reg_344 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_array2_addr_reg_349 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_array3_addr_reg_354 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_array4_addr_reg_359 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_array5_addr_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_array6_addr_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_array7_addr_reg_374 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_34_fu_272_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dense_15_bias_array_1_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_51_fu_280_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_reg_179 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_191 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal newIndex_cast_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_89_fu_235_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_87_fu_216_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_88_fu_231_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_fu_239_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal newIndex_fu_250_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_51_fu_280_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component sample_fadd_32ns_ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_mux_864_32rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2c_bias_add_2_debml IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_15_bias_array_U : component k2c_bias_add_2_debml
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_15_bias_array_address0,
        ce0 => dense_15_bias_array_ce0,
        q0 => dense_15_bias_array_q0);

    sample_fadd_32ns_ocq_U284 : component sample_fadd_32ns_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_51_reg_389,
        din1 => dense_15_bias_array_1_reg_384,
        ce => ap_const_logic_1,
        dout => grp_fu_203_p2);

    sample_mux_864_32rcU_U285 : component sample_mux_864_32rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => A_array_q0,
        din1 => A_array1_q0,
        din2 => A_array2_q0,
        din3 => A_array3_q0,
        din4 => A_array4_q0,
        din5 => A_array5_q0,
        din6 => A_array6_q0,
        din7 => A_array7_q0,
        din8 => tmp_51_fu_280_p9,
        dout => tmp_51_fu_280_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_220_p2 = ap_const_lv1_1))) then 
                i_reg_179 <= i_34_fu_272_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_179 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_207_p2 = ap_const_lv1_1))) then 
                j_reg_191 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_reg_191 <= j_1_reg_324;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_220_p2 = ap_const_lv1_0))) then
                A_array1_addr_reg_344 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
                A_array2_addr_reg_349 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
                A_array3_addr_reg_354 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
                A_array4_addr_reg_359 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
                A_array5_addr_reg_364 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
                A_array6_addr_reg_369 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
                A_array7_addr_reg_374 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
                A_array_addr_reg_339 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
                arrayNo_trunc_reg_334 <= arrayNo_trunc_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                dense_15_bias_array_1_reg_384 <= dense_15_bias_array_q0;
                tmp_51_reg_389 <= tmp_51_fu_280_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_324 <= j_1_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_207_p2 = ap_const_lv1_1))) then
                tmp_86_reg_316 <= tmp_86_fu_212_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_s_reg_394 <= grp_fu_203_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_207_p2, ap_CS_fsm_state3, exitcond_fu_220_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_207_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_220_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    A_array1_address0_assign_proc : process(ap_CS_fsm_state3, A_array1_addr_reg_344, ap_CS_fsm_state14, newIndex_cast_fu_260_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            A_array1_address0 <= A_array1_addr_reg_344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_array1_address0 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
        else 
            A_array1_address0 <= "X";
        end if; 
    end process;


    A_array1_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_array1_ce0 <= ap_const_logic_1;
        else 
            A_array1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array1_d0 <= tmp_s_reg_394;

    A_array1_we0_assign_proc : process(arrayNo_trunc_reg_334, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (arrayNo_trunc_reg_334 = ap_const_lv3_1))) then 
            A_array1_we0 <= ap_const_logic_1;
        else 
            A_array1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_array2_address0_assign_proc : process(ap_CS_fsm_state3, A_array2_addr_reg_349, ap_CS_fsm_state14, newIndex_cast_fu_260_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            A_array2_address0 <= A_array2_addr_reg_349;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_array2_address0 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
        else 
            A_array2_address0 <= "X";
        end if; 
    end process;


    A_array2_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_array2_ce0 <= ap_const_logic_1;
        else 
            A_array2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array2_d0 <= tmp_s_reg_394;

    A_array2_we0_assign_proc : process(arrayNo_trunc_reg_334, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (arrayNo_trunc_reg_334 = ap_const_lv3_2))) then 
            A_array2_we0 <= ap_const_logic_1;
        else 
            A_array2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_array3_address0_assign_proc : process(ap_CS_fsm_state3, A_array3_addr_reg_354, ap_CS_fsm_state14, newIndex_cast_fu_260_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            A_array3_address0 <= A_array3_addr_reg_354;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_array3_address0 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
        else 
            A_array3_address0 <= "X";
        end if; 
    end process;


    A_array3_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_array3_ce0 <= ap_const_logic_1;
        else 
            A_array3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array3_d0 <= tmp_s_reg_394;

    A_array3_we0_assign_proc : process(arrayNo_trunc_reg_334, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (arrayNo_trunc_reg_334 = ap_const_lv3_3))) then 
            A_array3_we0 <= ap_const_logic_1;
        else 
            A_array3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_array4_address0_assign_proc : process(ap_CS_fsm_state3, A_array4_addr_reg_359, ap_CS_fsm_state14, newIndex_cast_fu_260_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            A_array4_address0 <= A_array4_addr_reg_359;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_array4_address0 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
        else 
            A_array4_address0 <= "X";
        end if; 
    end process;


    A_array4_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_array4_ce0 <= ap_const_logic_1;
        else 
            A_array4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array4_d0 <= tmp_s_reg_394;

    A_array4_we0_assign_proc : process(arrayNo_trunc_reg_334, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (arrayNo_trunc_reg_334 = ap_const_lv3_4))) then 
            A_array4_we0 <= ap_const_logic_1;
        else 
            A_array4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_array5_address0_assign_proc : process(ap_CS_fsm_state3, A_array5_addr_reg_364, ap_CS_fsm_state14, newIndex_cast_fu_260_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            A_array5_address0 <= A_array5_addr_reg_364;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_array5_address0 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
        else 
            A_array5_address0 <= "X";
        end if; 
    end process;


    A_array5_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_array5_ce0 <= ap_const_logic_1;
        else 
            A_array5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array5_d0 <= tmp_s_reg_394;

    A_array5_we0_assign_proc : process(arrayNo_trunc_reg_334, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (arrayNo_trunc_reg_334 = ap_const_lv3_5))) then 
            A_array5_we0 <= ap_const_logic_1;
        else 
            A_array5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_array6_address0_assign_proc : process(ap_CS_fsm_state3, A_array6_addr_reg_369, ap_CS_fsm_state14, newIndex_cast_fu_260_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            A_array6_address0 <= A_array6_addr_reg_369;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_array6_address0 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
        else 
            A_array6_address0 <= "X";
        end if; 
    end process;


    A_array6_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_array6_ce0 <= ap_const_logic_1;
        else 
            A_array6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array6_d0 <= tmp_s_reg_394;

    A_array6_we0_assign_proc : process(arrayNo_trunc_reg_334, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (arrayNo_trunc_reg_334 = ap_const_lv3_6))) then 
            A_array6_we0 <= ap_const_logic_1;
        else 
            A_array6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_array7_address0_assign_proc : process(ap_CS_fsm_state3, A_array7_addr_reg_374, ap_CS_fsm_state14, newIndex_cast_fu_260_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            A_array7_address0 <= A_array7_addr_reg_374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_array7_address0 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
        else 
            A_array7_address0 <= "X";
        end if; 
    end process;


    A_array7_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_array7_ce0 <= ap_const_logic_1;
        else 
            A_array7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array7_d0 <= tmp_s_reg_394;

    A_array7_we0_assign_proc : process(arrayNo_trunc_reg_334, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (arrayNo_trunc_reg_334 = ap_const_lv3_7))) then 
            A_array7_we0 <= ap_const_logic_1;
        else 
            A_array7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_array_address0_assign_proc : process(ap_CS_fsm_state3, A_array_addr_reg_339, ap_CS_fsm_state14, newIndex_cast_fu_260_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            A_array_address0 <= A_array_addr_reg_339;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_array_address0 <= newIndex_cast_fu_260_p1(1 - 1 downto 0);
        else 
            A_array_address0 <= "X";
        end if; 
    end process;


    A_array_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_array_ce0 <= ap_const_logic_1;
        else 
            A_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array_d0 <= tmp_s_reg_394;

    A_array_we0_assign_proc : process(arrayNo_trunc_reg_334, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (arrayNo_trunc_reg_334 = ap_const_lv3_0))) then 
            A_array_we0 <= ap_const_logic_1;
        else 
            A_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_207_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_207_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_207_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_207_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_trunc_fu_245_p2 <= std_logic_vector(unsigned(tmp_88_fu_231_p1) + unsigned(tmp_86_reg_316));
    dense_15_bias_array_address0 <= j_reg_191(4 - 1 downto 0);

    dense_15_bias_array_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_15_bias_array_ce0 <= ap_const_logic_1;
        else 
            dense_15_bias_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_220_p2 <= "1" when (j_reg_191 = b_numel_read) else "0";
    i_34_fu_272_p2 <= std_logic_vector(unsigned(i_reg_179) + unsigned(b_numel_read));
    j_1_fu_225_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j_reg_191));
    newIndex_cast_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_fu_250_p4),64));
    newIndex_fu_250_p4 <= sum_fu_239_p2(5 downto 3);
    sum_fu_239_p2 <= std_logic_vector(unsigned(tmp_89_fu_235_p1) + unsigned(tmp_87_fu_216_p1));
    tmp_51_fu_280_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo_trunc_reg_334),64));
    tmp_86_fu_212_p1 <= i_reg_179(3 - 1 downto 0);
    tmp_87_fu_216_p1 <= j_reg_191(6 - 1 downto 0);
    tmp_88_fu_231_p1 <= j_reg_191(3 - 1 downto 0);
    tmp_89_fu_235_p1 <= i_reg_179(6 - 1 downto 0);
    tmp_fu_207_p2 <= "1" when (unsigned(i_reg_179) < unsigned(A_numel_read)) else "0";
end behav;
