-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_dot_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_array_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    C_array_ce0 : OUT STD_LOGIC;
    C_array_we0 : OUT STD_LOGIC;
    C_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array_ce0 : OUT STD_LOGIC;
    A_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array1_ce0 : OUT STD_LOGIC;
    A_array1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array2_ce0 : OUT STD_LOGIC;
    A_array2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array3_ce0 : OUT STD_LOGIC;
    A_array3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array4_ce0 : OUT STD_LOGIC;
    A_array4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array5_ce0 : OUT STD_LOGIC;
    A_array5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array6_ce0 : OUT STD_LOGIC;
    A_array6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_array7_ce0 : OUT STD_LOGIC;
    A_array7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_dim : IN STD_LOGIC_VECTOR (63 downto 0);
    A_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    B_dim : IN STD_LOGIC_VECTOR (63 downto 0);
    B_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
    fwork_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fwork_ce0 : OUT STD_LOGIC;
    fwork_we0 : OUT STD_LOGIC;
    fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fwork_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fwork_ce1 : OUT STD_LOGIC;
    fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of k2c_dot_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (145 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (145 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (145 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (145 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (145 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (145 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (145 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (145 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (145 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (145 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (145 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (145 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_3C9F6B1E : STD_LOGIC_VECTOR (31 downto 0) := "00111100100111110110101100011110";
    constant ap_const_lv32_3F14DED2 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000101001101111011010010";
    constant ap_const_lv32_3F11B963 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000100011011100101100011";
    constant ap_const_lv32_3F04C347 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000001001100001101000111";
    constant ap_const_lv32_3F030BC6 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000110000101111000110";
    constant ap_const_lv32_3D9B8713 : STD_LOGIC_VECTOR (31 downto 0) := "00111101100110111000011100010011";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_BE9F6F6B : STD_LOGIC_VECTOR (31 downto 0) := "10111110100111110110111101101011";
    constant ap_const_lv32_BF22AE22 : STD_LOGIC_VECTOR (31 downto 0) := "10111111001000101010111000100010";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_BE97C77F : STD_LOGIC_VECTOR (31 downto 0) := "10111110100101111100011101111111";
    constant ap_const_lv32_3E6FDC74 : STD_LOGIC_VECTOR (31 downto 0) := "00111110011011111101110001110100";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_3E907CAE : STD_LOGIC_VECTOR (31 downto 0) := "00111110100100000111110010101110";
    constant ap_const_lv32_BEEC8A04 : STD_LOGIC_VECTOR (31 downto 0) := "10111110111011001000101000000100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv32_3D16A363 : STD_LOGIC_VECTOR (31 downto 0) := "00111101000101101010001101100011";
    constant ap_const_lv32_3E381D23 : STD_LOGIC_VECTOR (31 downto 0) := "00111110001110000001110100100011";
    constant ap_const_lv32_BD687D6C : STD_LOGIC_VECTOR (31 downto 0) := "10111101011010000111110101101100";
    constant ap_const_lv32_3EE2C315 : STD_LOGIC_VECTOR (31 downto 0) := "00111110111000101100001100010101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (145 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_15_output_shap_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_15_output_shap_ce0 : STD_LOGIC;
    signal dense_15_output_shap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dense_16_kernel_shap_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_16_kernel_shap_ce0 : STD_LOGIC;
    signal dense_16_kernel_shap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1005 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal permA_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1010 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal permB_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1016 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal i_12_s_fu_1039_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_s_reg_1939 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_1050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1948 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal count_4_1_fu_1054_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_12_1_fu_1060_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_1_reg_1957 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_3_cast_fu_1089_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_3_cast_reg_1968 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond2_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_s_fu_1093_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_15_s_reg_1973 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_15_1_fu_1104_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_15_1_reg_1981 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_1_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_5_1_fu_1110_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_4_fu_1116_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_1996 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_1120_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_reg_2001 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1124_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal free_axesA_reg_2006 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal free_axesB_fu_1129_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal free_axesB_reg_2012 : STD_LOGIC_VECTOR (59 downto 0);
    signal free_axesB_1_fu_1138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal free_axesB_1_reg_2017 : STD_LOGIC_VECTOR (63 downto 0);
    signal free_axesB_cast6_reg_2022 : STD_LOGIC_VECTOR (6 downto 0);
    signal free_axesB_cast5_reg_2027 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_fu_1163_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_2032 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_fu_1168_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_cast_reg_2038 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_cast_fu_1174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_2043 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal exitcond8_fu_1179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_reg_2048 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_18_cast_fu_1190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_18_cast_reg_2057 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal exitcond8_1_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_18_1_fu_1200_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_18_1_reg_2070 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_19_1_fu_1232_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal tmp_2_fu_1211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_1_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_cast_fu_1238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_cast_reg_2086 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal tmp_3_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_2091 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_16_cast_fu_1253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_16_cast_reg_2100 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal tmp_3_1_fu_1272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_21_1_fu_1277_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_21_1_reg_2113 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_9_1_fu_1283_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_9_1_reg_2118 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_8_cast_fu_1289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_8_cast_reg_2123 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal exitcond6_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_reg_2128 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal i_22_cast_fu_1305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_22_cast_reg_2142 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal exitcond13_1_fu_1310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_22_1_fu_1315_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_22_1_reg_2155 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_15_output_shap_5_gep_fu_398_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal dense_15_output_shap_6_reg_2165 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal i_9_cast_fu_1321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_9_cast_reg_2170 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal exitcond7_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_reg_2175 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal dense_16_kernel_shap_2_reg_2189 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal i_23_cast_fu_1337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_23_cast_reg_2194 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal exitcond12_1_fu_1342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_23_1_fu_1347_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_23_1_reg_2207 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_16_kernel_shap_3_gep_fu_452_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal dense_16_kernel_shap_4_reg_2217 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal i_12_fu_1358_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_reg_2225 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal tmp_21_fu_1364_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_reg_2230 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_cast_fu_1367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_4_cast_reg_2236 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal exitcond9_fu_1372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond9_reg_2241 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal j_10_cast_fu_1383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_10_cast_reg_2255 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal exitcond11_1_fu_1388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_10_1_fu_1393_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_10_1_reg_2268 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_fu_1399_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_reg_2273 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal tmp_5_fu_1428_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_2323 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal i_13_fu_1455_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_13_reg_2331 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal j_5_cast_fu_1465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_5_cast_reg_2336 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal exitcond10_fu_1470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond10_reg_2341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal j_11_cast_fu_1481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_11_cast_reg_2355 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal exitcond10_1_fu_1486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_11_1_fu_1491_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_11_1_reg_2368 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_26_fu_1497_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_26_reg_2373 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_reg_2378 : STD_LOGIC_VECTOR (0 downto 0);
    signal Bsub_addr_3_gep_fu_669_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal tmp_9_fu_1509_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_reg_2388 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal tmp_i_fu_1515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_2402 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_252_i_fu_1521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_252_i_reg_2407 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_254_i_fu_1527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_254_i_reg_2412 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_256_i_fu_1533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_256_i_reg_2418 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_258_i_fu_1539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_258_i_reg_2423 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_271_i_fu_1682_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_271_i_reg_2429 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal grp_k2c_sub2idx_fu_989_ap_idle : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_989_ap_ready : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_989_ap_done : STD_LOGIC;
    signal tmp_272_i_fu_1690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_272_i_reg_2434 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_274_i_fu_1695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_274_i_reg_2439 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_276_i_fu_1700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_276_i_reg_2445 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_278_i_fu_1705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_278_i_reg_2450 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_1710_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_reg_2456 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1461_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_2461 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal i_11_fu_1767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal exitcond5_fu_1762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_14_fu_1786_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_14_reg_2477 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal outrowidx_fu_1792_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal outrowidx_reg_2482 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_1781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inneridx_fu_1797_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal inneridx_reg_2487 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_fu_1815_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_reg_2495 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal fwork_addr_2_reg_2500 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_1810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1831_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_reg_2505 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_fu_1849_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal j_reg_2513 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal sum3_fu_1860_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum3_reg_2518 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond11_fu_1844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_array_addr_1_reg_2523 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal fwork_load_reg_2533 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal fwork_load_1_reg_2538 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1001_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_2543 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal C_array_load_reg_2548 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_997_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_2553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal permA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal permA_ce0 : STD_LOGIC;
    signal permA_we0 : STD_LOGIC;
    signal permA_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal permA_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal permA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal permA_ce1 : STD_LOGIC;
    signal permA_we1 : STD_LOGIC;
    signal permB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal permB_ce0 : STD_LOGIC;
    signal permB_we0 : STD_LOGIC;
    signal permB_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal freeA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal freeA_ce0 : STD_LOGIC;
    signal freeA_we0 : STD_LOGIC;
    signal freeA_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal freeA_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal freeB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal freeB_ce0 : STD_LOGIC;
    signal freeB_we0 : STD_LOGIC;
    signal freeB_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal freeB_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal newshpA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal newshpA_ce0 : STD_LOGIC;
    signal newshpA_we0 : STD_LOGIC;
    signal newshpA_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal newshpA_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal newshpB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal newshpB_ce0 : STD_LOGIC;
    signal newshpB_we0 : STD_LOGIC;
    signal newshpB_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal newshpB_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Asub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Asub_ce0 : STD_LOGIC;
    signal Asub_we0 : STD_LOGIC;
    signal Asub_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Asub_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Bsub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Bsub_ce0 : STD_LOGIC;
    signal Bsub_we0 : STD_LOGIC;
    signal Bsub_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Bsub_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_977_ap_start : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_977_ap_done : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_977_ap_idle : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_977_ap_ready : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_977_idx : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_977_sub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_idx2sub_fu_977_sub_ce0 : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_977_sub_we0 : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_977_sub_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_977_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_idx2sub_fu_977_shape_ce0 : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_977_shape_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_977_ndim : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_989_ap_start : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_989_sub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_sub2idx_fu_989_sub_ce0 : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_989_sub_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_989_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_sub2idx_fu_989_shape_ce0 : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_989_shape_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_989_ndim : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_989_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal count_reg_732 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_reg_744 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_4_fu_1032_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_1_reg_757 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_1_1_reg_769 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_2_reg_781 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_1_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_792 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_5_fu_1082_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_count_3_phi_fu_807_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal count_3_reg_804 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_reg_815 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal i_5_reg_827 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_836 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal j_3_reg_848 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_8_reg_861 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal i_9_reg_873 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal i_s_reg_885 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal j_4_reg_897 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal i_3_reg_909 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal j_5_reg_921 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal i_6_reg_933 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_reg_944 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_reg_955 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_s_reg_966 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal grp_k2c_idx2sub_fu_977_ap_start_reg : STD_LOGIC := '0';
    signal exitcond4_fu_1450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_sub2idx_fu_989_ap_start_reg : STD_LOGIC := '0';
    signal count_2_cast_fu_1077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_fu_1206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_15_cast_fu_1222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_9_cast_fu_1267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex_cast_fu_1413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_1753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_6_cast_fu_1757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_1826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_1870_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_1875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal merge_i_fu_1744_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal grp_fu_1124_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_19_fu_1160_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_18_s_fu_1184_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_15_fu_1216_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_16_fu_1247_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_20_fu_1257_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_9_s_fu_1261_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_22_s_fu_1299_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_23_s_fu_1331_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_10_s_fu_1377_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal newIndex_fu_1403_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_1428_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1461_p0 : STD_LOGIC_VECTOR (59 downto 0);
    signal j_11_s_fu_1475_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_25_fu_1563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_253_i_fu_1556_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_24_fu_1549_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_257_i_fu_1575_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_255_i_fu_1567_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_262_i_fu_1599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_260_i_fu_1594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_1612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_261_i_fu_1604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_259_i_fu_1586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_266_i_fu_1631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_264_i_fu_1626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_1644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_265_i_fu_1636_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_263_i_fu_1618_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_270_i_fu_1663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_268_i_fu_1658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_1676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_269_i_fu_1668_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_267_i_fu_1650_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1545_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_1722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_273_i_fu_1715_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_1740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_277_i_fu_1733_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_275_i_fu_1726_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_1777_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_23_fu_1773_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_cast_fu_1806_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_cast3_fu_1802_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum1_fu_1821_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_1831_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_fu_1836_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_1855_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_fu_1840_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum2_fu_1865_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1124_ap_start : STD_LOGIC;
    signal grp_fu_1124_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (145 downto 0);

    component k2c_idx2sub IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        idx : IN STD_LOGIC_VECTOR (63 downto 0);
        sub_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sub_ce0 : OUT STD_LOGIC;
        sub_we0 : OUT STD_LOGIC;
        sub_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        shape_ce0 : OUT STD_LOGIC;
        shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ndim : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_sub2idx IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sub_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sub_ce0 : OUT STD_LOGIC;
        sub_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        shape_ce0 : OUT STD_LOGIC;
        shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ndim : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sample_fadd_32ns_ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_fmul_32ns_pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_udiv_64ns_byn IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sample_mux_864_32rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_mul_60ns_6sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (59 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_dot_3_dense_1bwn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_dot_permA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_dot_permB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dense_15_output_shap_U : component k2c_dot_3_dense_1bwn
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_15_output_shap_address0,
        ce0 => dense_15_output_shap_ce0,
        q0 => dense_15_output_shap_q0);

    dense_16_kernel_shap_U : component k2c_dot_3_dense_1bwn
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_16_kernel_shap_address0,
        ce0 => dense_16_kernel_shap_ce0,
        q0 => dense_16_kernel_shap_q0);

    permA_U : component k2c_dot_permA
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => permA_address0,
        ce0 => permA_ce0,
        we0 => permA_we0,
        d0 => permA_d0,
        q0 => permA_q0,
        address1 => permA_address1,
        ce1 => permA_ce1,
        we1 => permA_we1,
        d1 => p_read2,
        q1 => permA_q1);

    permB_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => permB_address0,
        ce0 => permB_ce0,
        we0 => permB_we0,
        d0 => permB_d0,
        q0 => permB_q0);

    freeA_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => freeA_address0,
        ce0 => freeA_ce0,
        we0 => freeA_we0,
        d0 => freeA_d0,
        q0 => freeA_q0);

    freeB_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => freeB_address0,
        ce0 => freeB_ce0,
        we0 => freeB_we0,
        d0 => freeB_d0,
        q0 => freeB_q0);

    newshpA_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => newshpA_address0,
        ce0 => newshpA_ce0,
        we0 => newshpA_we0,
        d0 => newshpA_d0,
        q0 => newshpA_q0);

    newshpB_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => newshpB_address0,
        ce0 => newshpB_ce0,
        we0 => newshpB_we0,
        d0 => newshpB_d0,
        q0 => newshpB_q0);

    Asub_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Asub_address0,
        ce0 => Asub_ce0,
        we0 => Asub_we0,
        d0 => Asub_d0,
        q0 => Asub_q0);

    Bsub_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Bsub_address0,
        ce0 => Bsub_ce0,
        we0 => Bsub_we0,
        d0 => Bsub_d0,
        q0 => Bsub_q0);

    grp_k2c_idx2sub_fu_977 : component k2c_idx2sub
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_idx2sub_fu_977_ap_start,
        ap_done => grp_k2c_idx2sub_fu_977_ap_done,
        ap_idle => grp_k2c_idx2sub_fu_977_ap_idle,
        ap_ready => grp_k2c_idx2sub_fu_977_ap_ready,
        idx => grp_k2c_idx2sub_fu_977_idx,
        sub_address0 => grp_k2c_idx2sub_fu_977_sub_address0,
        sub_ce0 => grp_k2c_idx2sub_fu_977_sub_ce0,
        sub_we0 => grp_k2c_idx2sub_fu_977_sub_we0,
        sub_d0 => grp_k2c_idx2sub_fu_977_sub_d0,
        shape_address0 => grp_k2c_idx2sub_fu_977_shape_address0,
        shape_ce0 => grp_k2c_idx2sub_fu_977_shape_ce0,
        shape_q0 => grp_k2c_idx2sub_fu_977_shape_q0,
        ndim => grp_k2c_idx2sub_fu_977_ndim);

    grp_k2c_sub2idx_fu_989 : component k2c_sub2idx
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_sub2idx_fu_989_ap_start,
        ap_done => grp_k2c_sub2idx_fu_989_ap_done,
        ap_idle => grp_k2c_sub2idx_fu_989_ap_idle,
        ap_ready => grp_k2c_sub2idx_fu_989_ap_ready,
        sub_address0 => grp_k2c_sub2idx_fu_989_sub_address0,
        sub_ce0 => grp_k2c_sub2idx_fu_989_sub_ce0,
        sub_q0 => grp_k2c_sub2idx_fu_989_sub_q0,
        shape_address0 => grp_k2c_sub2idx_fu_989_shape_address0,
        shape_ce0 => grp_k2c_sub2idx_fu_989_shape_ce0,
        shape_q0 => grp_k2c_sub2idx_fu_989_shape_q0,
        ndim => grp_k2c_sub2idx_fu_989_ndim,
        ap_return => grp_k2c_sub2idx_fu_989_ap_return);

    sample_fadd_32ns_ocq_U345 : component sample_fadd_32ns_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_array_load_reg_2548,
        din1 => tmp_10_reg_2543,
        ce => ap_const_logic_1,
        dout => grp_fu_997_p2);

    sample_fmul_32ns_pcA_U346 : component sample_fmul_32ns_pcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fwork_load_reg_2533,
        din1 => fwork_load_1_reg_2538,
        ce => ap_const_logic_1,
        dout => grp_fu_1001_p2);

    sample_udiv_64ns_byn_U347 : component sample_udiv_64ns_byn
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 7,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1124_ap_start,
        done => grp_fu_1124_ap_done,
        din0 => A_numel_read,
        din1 => grp_fu_1124_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1124_p2);

    sample_mux_864_32rcU_U348 : component sample_mux_864_32rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => A_array_q0,
        din1 => A_array1_q0,
        din2 => A_array2_q0,
        din3 => A_array3_q0,
        din4 => A_array4_q0,
        din5 => A_array5_q0,
        din6 => A_array6_q0,
        din7 => A_array7_q0,
        din8 => tmp_5_fu_1428_p9,
        dout => tmp_5_fu_1428_p10);

    sample_mul_60ns_6sc4_U349 : component sample_mul_60ns_6sc4
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 60,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1461_p0,
        din1 => free_axesA_reg_2006,
        ce => ap_const_logic_1,
        dout => grp_fu_1461_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_k2c_idx2sub_fu_977_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_idx2sub_fu_977_ap_start_reg <= ap_const_logic_0;
            else
                if ((((exitcond4_fu_1450_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111)) or ((exitcond3_fu_1353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state102)))) then 
                    grp_k2c_idx2sub_fu_977_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_idx2sub_fu_977_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_idx2sub_fu_977_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_sub2idx_fu_989_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_sub2idx_fu_989_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state109))) then 
                    grp_k2c_sub2idx_fu_989_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_sub2idx_fu_989_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_sub2idx_fu_989_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count_1_1_reg_769_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_1050_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                count_1_1_reg_769 <= count_1_reg_757;
            elsif (((tmp_1_reg_1948 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                count_1_1_reg_769 <= count_4_1_fu_1054_p2;
            end if; 
        end if;
    end process;

    count_1_reg_757_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1022_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                if ((tmp_8_fu_1027_p2 = ap_const_lv1_1)) then 
                    count_1_reg_757 <= count_reg_732;
                elsif ((tmp_8_fu_1027_p2 = ap_const_lv1_0)) then 
                    count_1_reg_757 <= count_4_fu_1032_p2;
                end if;
            end if; 
        end if;
    end process;

    count_2_reg_781_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((exitcond1_1_fu_1045_p2 = ap_const_lv1_1) or (exitcond1_fu_1022_p2 = ap_const_lv1_1)))) then 
                count_2_reg_781 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                count_2_reg_781 <= count_5_1_fu_1110_p2;
            end if; 
        end if;
    end process;

    count_3_reg_804_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_1066_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                if ((tmp_fu_1071_p2 = ap_const_lv1_1)) then 
                    count_3_reg_804 <= count_2_reg_781;
                elsif ((tmp_fu_1071_p2 = ap_const_lv1_0)) then 
                    count_3_reg_804 <= count_5_fu_1082_p2;
                end if;
            end if; 
        end if;
    end process;

    count_reg_732_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                count_reg_732 <= count_1_1_reg_769;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                count_reg_732 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_10_reg_944_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_1762_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state126))) then 
                i_10_reg_944 <= ap_const_lv64_0;
            elsif (((exitcond_fu_1810_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state128))) then 
                i_10_reg_944 <= i_14_reg_2477;
            end if; 
        end if;
    end process;

    i_1_reg_792_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((exitcond1_1_fu_1045_p2 = ap_const_lv1_1) or (exitcond1_fu_1022_p2 = ap_const_lv1_1)))) then 
                i_1_reg_792 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_reg_792 <= i_15_1_reg_1981;
            end if; 
        end if;
    end process;

    i_3_reg_909_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then 
                i_3_reg_909 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
                i_3_reg_909 <= i_13_reg_2331;
            end if; 
        end if;
    end process;

    i_4_reg_815_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                i_4_reg_815 <= i_18_1_reg_2070;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                i_4_reg_815 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_5_reg_827_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and ((exitcond8_1_fu_1195_p2 = ap_const_lv1_1) or (exitcond8_reg_2048 = ap_const_lv1_1)))) then 
                i_5_reg_827 <= i_2_cast_reg_2038;
            elsif (((tmp_2_1_fu_1227_p2 = ap_const_lv1_1) and (tmp_2_fu_1211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                i_5_reg_827 <= i_19_1_fu_1232_p2;
            end if; 
        end if;
    end process;

    i_6_reg_933_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_1762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state126))) then 
                i_6_reg_933 <= i_11_fu_1767_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
                i_6_reg_933 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_7_reg_836_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state80) and ((tmp_2_1_fu_1227_p2 = ap_const_lv1_0) or (tmp_2_fu_1211_p2 = ap_const_lv1_0)))) then 
                i_7_reg_836 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                i_7_reg_836 <= i_21_1_reg_2113;
            end if; 
        end if;
    end process;

    i_8_reg_861_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) and ((tmp_3_1_fu_1272_p2 = ap_const_lv1_0) or (tmp_3_reg_2091 = ap_const_lv1_0)))) then 
                i_8_reg_861 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                i_8_reg_861 <= i_22_1_reg_2155;
            end if; 
        end if;
    end process;

    i_9_reg_873_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state88) and ((exitcond13_1_fu_1310_p2 = ap_const_lv1_1) or (exitcond6_reg_2128 = ap_const_lv1_1)))) then 
                i_9_reg_873 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                i_9_reg_873 <= i_23_1_reg_2207;
            end if; 
        end if;
    end process;

    i_reg_744_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_744 <= i_12_1_reg_1957;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_744 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_s_reg_885_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state97) and ((exitcond12_1_fu_1342_p2 = ap_const_lv1_1) or (exitcond7_reg_2175 = ap_const_lv1_1)))) then 
                i_s_reg_885 <= ap_const_lv64_0;
            elsif (((grp_k2c_sub2idx_fu_989_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
                i_s_reg_885 <= i_12_reg_2225;
            end if; 
        end if;
    end process;

    j_3_reg_848_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state80) and ((tmp_2_1_fu_1227_p2 = ap_const_lv1_0) or (tmp_2_fu_1211_p2 = ap_const_lv1_0)))) then 
                j_3_reg_848 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                j_3_reg_848 <= j_9_1_reg_2118;
            end if; 
        end if;
    end process;

    j_4_reg_897_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                j_4_reg_897 <= j_10_1_reg_2268;
            elsif (((grp_k2c_idx2sub_fu_977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
                j_4_reg_897 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_5_reg_921_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
                j_5_reg_921 <= j_11_1_reg_2368;
            elsif (((grp_k2c_idx2sub_fu_977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
                j_5_reg_921 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_s_reg_966_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1810_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state128))) then 
                j_s_reg_966 <= ap_const_lv60_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
                j_s_reg_966 <= j_reg_2513;
            end if; 
        end if;
    end process;

    k_reg_955_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_fu_1844_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state129))) then 
                k_reg_955 <= k_1_reg_2495;
            elsif (((tmp_7_fu_1781_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state127))) then 
                k_reg_955 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_fu_1844_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state129))) then
                C_array_addr_1_reg_2523 <= sum2_cast_fu_1870_p1(1 - 1 downto 0);
                sum3_reg_2518 <= sum3_fu_1860_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state136)) then
                C_array_load_reg_2548 <= C_array_q0;
                tmp_10_reg_2543 <= grp_fu_1001_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_1066_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    count_3_cast_reg_1968(2 downto 0) <= count_3_cast_fu_1089_p1(2 downto 0);
                    i_15_s_reg_1973(63 downto 1) <= i_15_s_fu_1093_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                dense_15_output_shap_6_reg_2165 <= dense_15_output_shap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                dense_16_kernel_shap_2_reg_2189 <= dense_16_kernel_shap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                dense_16_kernel_shap_4_reg_2217 <= dense_16_kernel_shap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state113)) then
                exitcond10_reg_2341 <= exitcond10_fu_1470_p2;
                    j_5_cast_reg_2336(2 downto 0) <= j_5_cast_fu_1465_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                exitcond6_reg_2128 <= exitcond6_fu_1294_p2;
                    i_8_cast_reg_2123(2 downto 0) <= i_8_cast_fu_1289_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                exitcond7_reg_2175 <= exitcond7_fu_1326_p2;
                    i_9_cast_reg_2170(2 downto 0) <= i_9_cast_fu_1321_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                exitcond8_reg_2048 <= exitcond8_fu_1179_p2;
                    i_4_cast_reg_2043(2 downto 0) <= i_4_cast_fu_1174_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then
                exitcond9_reg_2241 <= exitcond9_fu_1372_p2;
                    j_4_cast_reg_2236(2 downto 0) <= j_4_cast_fu_1367_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                free_axesA_reg_2006 <= grp_fu_1124_p2;
                    free_axesB_1_reg_2017(59 downto 0) <= free_axesB_1_fu_1138_p1(59 downto 0);
                free_axesB_cast5_reg_2027 <= B_numel_read(5 downto 4);
                free_axesB_cast6_reg_2022 <= B_numel_read(10 downto 4);
                free_axesB_reg_2012 <= B_numel_read(63 downto 4);
                i_2_cast_reg_2038 <= i_2_cast_fu_1168_p2;
                i_2_reg_2032 <= i_2_fu_1163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1810_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state128))) then
                fwork_addr_2_reg_2500 <= sum1_cast_fu_1826_p1(5 - 1 downto 0);
                tmp_s_reg_2505 <= tmp_s_fu_1831_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state131)) then
                fwork_load_1_reg_2538 <= fwork_q1;
                fwork_load_reg_2533 <= fwork_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_12_1_reg_1957 <= i_12_1_fu_1060_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then
                i_12_reg_2225 <= i_12_fu_1358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1022_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    i_12_s_reg_1939(63 downto 1) <= i_12_s_fu_1039_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                i_13_reg_2331 <= i_13_fu_1455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state127)) then
                i_14_reg_2477 <= i_14_fu_1786_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_1_fu_1099_p2 = ap_const_lv1_0) and (exitcond2_fu_1066_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                i_15_1_reg_1981 <= i_15_1_fu_1104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_2091 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    i_16_cast_reg_2100(2 downto 0) <= i_16_cast_fu_1253_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_1_fu_1195_p2 = ap_const_lv1_0) and (exitcond8_reg_2048 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                i_18_1_reg_2070 <= i_18_1_fu_1200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_reg_2048 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    i_18_cast_reg_2057(2 downto 1) <= i_18_cast_fu_1190_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_1_fu_1272_p2 = ap_const_lv1_1) and (tmp_3_reg_2091 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                i_21_1_reg_2113 <= i_21_1_fu_1277_p2;
                j_9_1_reg_2118 <= j_9_1_fu_1283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond13_1_fu_1310_p2 = ap_const_lv1_0) and (exitcond6_reg_2128 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                i_22_1_reg_2155 <= i_22_1_fu_1315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_reg_2128 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    i_22_cast_reg_2142(2 downto 1) <= i_22_cast_fu_1305_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond12_1_fu_1342_p2 = ap_const_lv1_0) and (exitcond7_reg_2175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                i_23_1_reg_2207 <= i_23_1_fu_1347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_reg_2175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    i_23_cast_reg_2194(2 downto 1) <= i_23_cast_fu_1337_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                    i_7_cast_reg_2086(2 downto 0) <= i_7_cast_fu_1238_p1(2 downto 0);
                tmp_3_reg_2091 <= tmp_3_fu_1242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_1781_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state127))) then
                inneridx_reg_2487 <= inneridx_fu_1797_p2;
                outrowidx_reg_2482 <= outrowidx_fu_1792_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_1_fu_1388_p2 = ap_const_lv1_0) and (exitcond9_reg_2241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state106))) then
                j_10_1_reg_2268 <= j_10_1_fu_1393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_reg_2241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state106))) then
                    j_10_cast_reg_2255(2 downto 1) <= j_10_cast_fu_1383_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10_1_fu_1486_p2 = ap_const_lv1_0) and (exitcond10_reg_2341 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115))) then
                j_11_1_reg_2368 <= j_11_1_fu_1491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10_reg_2341 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115))) then
                    j_11_cast_reg_2355(2 downto 1) <= j_11_cast_fu_1481_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state129)) then
                j_reg_2513 <= j_fu_1849_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state128)) then
                k_1_reg_2495 <= k_1_fu_1815_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_1005 <= dense_15_output_shap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state85))) then
                reg_1010 <= permA_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state94))) then
                reg_1016 <= permB_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_k2c_sub2idx_fu_989_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then
                sum_reg_2456 <= sum_fu_1710_p2;
                    tmp_271_i_reg_2429(25 downto 0) <= tmp_271_i_fu_1682_p3(25 downto 0);    tmp_271_i_reg_2429(31) <= tmp_271_i_fu_1682_p3(31);
                tmp_272_i_reg_2434 <= tmp_272_i_fu_1690_p2;
                tmp_274_i_reg_2439 <= tmp_274_i_fu_1695_p2;
                tmp_276_i_reg_2445 <= tmp_276_i_fu_1700_p2;
                tmp_278_i_reg_2450 <= tmp_278_i_fu_1705_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state145)) then
                tmp_11_reg_2553 <= grp_fu_997_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_18_reg_2001 <= tmp_18_fu_1120_p1;
                tmp_4_reg_1996 <= tmp_4_fu_1116_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_1_reg_1948 <= tmp_1_fu_1050_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                tmp_21_reg_2230 <= tmp_21_fu_1364_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state106) and ((exitcond11_1_fu_1388_p2 = ap_const_lv1_1) or (exitcond9_reg_2241 = ap_const_lv1_1)))) then
                tmp_22_reg_2273 <= tmp_22_fu_1399_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                tmp_252_i_reg_2407 <= tmp_252_i_fu_1521_p2;
                tmp_254_i_reg_2412 <= tmp_254_i_fu_1527_p2;
                tmp_256_i_reg_2418 <= tmp_256_i_fu_1533_p2;
                tmp_258_i_reg_2423 <= tmp_258_i_fu_1539_p2;
                tmp_9_reg_2388 <= tmp_9_fu_1509_p3;
                tmp_i_reg_2402 <= tmp_i_fu_1515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state115) and ((exitcond10_1_fu_1486_p2 = ap_const_lv1_1) or (exitcond10_reg_2341 = ap_const_lv1_1)))) then
                tmp_26_reg_2373 <= tmp_26_fu_1497_p1;
                tmp_27_reg_2378 <= i_3_reg_909(3 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then
                tmp_5_reg_2323 <= tmp_5_fu_1428_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state125)) then
                tmp_6_reg_2461 <= grp_fu_1461_p2;
            end if;
        end if;
    end process;
    i_12_s_reg_1939(0) <= '1';
    count_3_cast_reg_1968(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_15_s_reg_1973(0) <= '1';
    free_axesB_1_reg_2017(63 downto 60) <= "0000";
    i_4_cast_reg_2043(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_18_cast_reg_2057(0) <= '1';
    i_18_cast_reg_2057(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_7_cast_reg_2086(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_16_cast_reg_2100(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_8_cast_reg_2123(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_22_cast_reg_2142(0) <= '1';
    i_22_cast_reg_2142(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_9_cast_reg_2170(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_23_cast_reg_2194(0) <= '1';
    i_23_cast_reg_2194(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_4_cast_reg_2236(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_10_cast_reg_2255(0) <= '1';
    j_10_cast_reg_2255(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_5_cast_reg_2336(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_11_cast_reg_2355(0) <= '1';
    j_11_cast_reg_2355(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_271_i_reg_2429(30 downto 26) <= "01111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_1022_p2, ap_CS_fsm_state6, exitcond2_fu_1066_p2, exitcond2_1_fu_1099_p2, exitcond8_reg_2048, ap_CS_fsm_state78, exitcond8_1_fu_1195_p2, ap_CS_fsm_state80, tmp_2_fu_1211_p2, tmp_2_1_fu_1227_p2, tmp_3_reg_2091, ap_CS_fsm_state82, tmp_3_1_fu_1272_p2, ap_CS_fsm_state84, exitcond6_fu_1294_p2, exitcond6_reg_2128, ap_CS_fsm_state88, exitcond13_1_fu_1310_p2, ap_CS_fsm_state93, exitcond7_fu_1326_p2, exitcond7_reg_2175, ap_CS_fsm_state97, exitcond12_1_fu_1342_p2, ap_CS_fsm_state102, exitcond3_fu_1353_p2, ap_CS_fsm_state104, exitcond9_fu_1372_p2, exitcond9_reg_2241, ap_CS_fsm_state106, exitcond11_1_fu_1388_p2, ap_CS_fsm_state111, ap_CS_fsm_state113, exitcond10_fu_1470_p2, exitcond10_reg_2341, ap_CS_fsm_state115, exitcond10_1_fu_1486_p2, ap_CS_fsm_state119, grp_k2c_sub2idx_fu_989_ap_done, ap_CS_fsm_state126, exitcond5_fu_1762_p2, ap_CS_fsm_state127, tmp_7_fu_1781_p2, ap_CS_fsm_state128, exitcond_fu_1810_p2, ap_CS_fsm_state129, exitcond11_fu_1844_p2, grp_k2c_idx2sub_fu_977_ap_done, exitcond1_1_fu_1045_p2, ap_CS_fsm_state110, ap_CS_fsm_state103, ap_CS_fsm_state112, exitcond4_fu_1450_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((exitcond1_1_fu_1045_p2 = ap_const_lv1_1) or (exitcond1_fu_1022_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                if (((exitcond2_1_fu_1099_p2 = ap_const_lv1_0) and (exitcond2_fu_1066_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and ((exitcond8_1_fu_1195_p2 = ap_const_lv1_1) or (exitcond8_reg_2048 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state80 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state80) and ((tmp_2_1_fu_1227_p2 = ap_const_lv1_0) or (tmp_2_fu_1211_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and ((tmp_3_1_fu_1272_p2 = ap_const_lv1_0) or (tmp_3_reg_2091 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state84 => 
                if (((exitcond6_fu_1294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state88) and ((exitcond13_1_fu_1310_p2 = ap_const_lv1_1) or (exitcond6_reg_2128 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state93 => 
                if (((exitcond7_fu_1326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state97) and ((exitcond12_1_fu_1342_p2 = ap_const_lv1_1) or (exitcond7_reg_2175 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state102 => 
                if (((exitcond3_fu_1353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state103 => 
                if (((grp_k2c_idx2sub_fu_977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                if (((exitcond9_fu_1372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state104))) then
                    ap_NS_fsm <= ap_ST_fsm_state106;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state106) and ((exitcond11_1_fu_1388_p2 = ap_const_lv1_1) or (exitcond9_reg_2241 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state109;
                else
                    ap_NS_fsm <= ap_ST_fsm_state107;
                end if;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                if (((grp_k2c_sub2idx_fu_989_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state110;
                end if;
            when ap_ST_fsm_state111 => 
                if (((exitcond4_fu_1450_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                    ap_NS_fsm <= ap_ST_fsm_state121;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_state112 => 
                if (((grp_k2c_idx2sub_fu_977_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_state113 => 
                if (((exitcond10_fu_1470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state113))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state114;
                end if;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state115) and ((exitcond10_1_fu_1486_p2 = ap_const_lv1_1) or (exitcond10_reg_2341 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state118;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                if (((grp_k2c_sub2idx_fu_989_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then
                    ap_NS_fsm <= ap_ST_fsm_state120;
                else
                    ap_NS_fsm <= ap_ST_fsm_state119;
                end if;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                if (((exitcond5_fu_1762_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state126))) then
                    ap_NS_fsm <= ap_ST_fsm_state127;
                else
                    ap_NS_fsm <= ap_ST_fsm_state126;
                end if;
            when ap_ST_fsm_state127 => 
                if (((tmp_7_fu_1781_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state127))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state128;
                end if;
            when ap_ST_fsm_state128 => 
                if (((exitcond_fu_1810_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state128))) then
                    ap_NS_fsm <= ap_ST_fsm_state127;
                else
                    ap_NS_fsm <= ap_ST_fsm_state129;
                end if;
            when ap_ST_fsm_state129 => 
                if (((exitcond11_fu_1844_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state129))) then
                    ap_NS_fsm <= ap_ST_fsm_state128;
                else
                    ap_NS_fsm <= ap_ST_fsm_state130;
                end if;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_array1_address0 <= newIndex_cast_fu_1413_p1(1 - 1 downto 0);

    A_array1_ce0_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            A_array1_ce0 <= ap_const_logic_1;
        else 
            A_array1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array2_address0 <= newIndex_cast_fu_1413_p1(1 - 1 downto 0);

    A_array2_ce0_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            A_array2_ce0 <= ap_const_logic_1;
        else 
            A_array2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array3_address0 <= newIndex_cast_fu_1413_p1(1 - 1 downto 0);

    A_array3_ce0_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            A_array3_ce0 <= ap_const_logic_1;
        else 
            A_array3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array4_address0 <= newIndex_cast_fu_1413_p1(1 - 1 downto 0);

    A_array4_ce0_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            A_array4_ce0 <= ap_const_logic_1;
        else 
            A_array4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array5_address0 <= newIndex_cast_fu_1413_p1(1 - 1 downto 0);

    A_array5_ce0_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            A_array5_ce0 <= ap_const_logic_1;
        else 
            A_array5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array6_address0 <= newIndex_cast_fu_1413_p1(1 - 1 downto 0);

    A_array6_ce0_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            A_array6_ce0 <= ap_const_logic_1;
        else 
            A_array6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array7_address0 <= newIndex_cast_fu_1413_p1(1 - 1 downto 0);

    A_array7_ce0_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            A_array7_ce0 <= ap_const_logic_1;
        else 
            A_array7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_array_address0 <= newIndex_cast_fu_1413_p1(1 - 1 downto 0);

    A_array_ce0_assign_proc : process(ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            A_array_ce0 <= ap_const_logic_1;
        else 
            A_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Asub_address0_assign_proc : process(permA_q1, ap_CS_fsm_state105, ap_CS_fsm_state107, j_5_cast_reg_2336, j_11_cast_reg_2355, ap_CS_fsm_state115, ap_CS_fsm_state119, permA_q0, grp_k2c_idx2sub_fu_977_sub_address0, grp_k2c_sub2idx_fu_989_sub_address0, ap_CS_fsm_state103, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            Asub_address0 <= j_11_cast_reg_2355(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            Asub_address0 <= j_5_cast_reg_2336(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            Asub_address0 <= permA_q1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            Asub_address0 <= permA_q0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            Asub_address0 <= grp_k2c_sub2idx_fu_989_sub_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            Asub_address0 <= grp_k2c_idx2sub_fu_977_sub_address0;
        else 
            Asub_address0 <= "XXX";
        end if; 
    end process;


    Asub_ce0_assign_proc : process(ap_CS_fsm_state105, ap_CS_fsm_state107, ap_CS_fsm_state115, ap_CS_fsm_state119, grp_k2c_idx2sub_fu_977_sub_ce0, grp_k2c_sub2idx_fu_989_sub_ce0, ap_CS_fsm_state103, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state117))) then 
            Asub_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            Asub_ce0 <= grp_k2c_sub2idx_fu_989_sub_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            Asub_ce0 <= grp_k2c_idx2sub_fu_977_sub_ce0;
        else 
            Asub_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Asub_d0_assign_proc : process(ap_CS_fsm_state115, Bsub_q0, grp_k2c_idx2sub_fu_977_sub_d0, ap_CS_fsm_state103, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state117))) then 
            Asub_d0 <= Bsub_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            Asub_d0 <= grp_k2c_idx2sub_fu_977_sub_d0;
        else 
            Asub_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Asub_we0_assign_proc : process(exitcond10_reg_2341, ap_CS_fsm_state115, grp_k2c_idx2sub_fu_977_sub_we0, ap_CS_fsm_state103, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state117) or ((exitcond10_reg_2341 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115)))) then 
            Asub_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            Asub_we0 <= grp_k2c_idx2sub_fu_977_sub_we0;
        else 
            Asub_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bsub_addr_3_gep_fu_669_p3 <= permB_q0(3 - 1 downto 0);

    Bsub_address0_assign_proc : process(permB_q0, j_4_cast_reg_2236, j_10_cast_reg_2255, ap_CS_fsm_state106, ap_CS_fsm_state114, Bsub_addr_3_gep_fu_669_p3, ap_CS_fsm_state116, grp_k2c_idx2sub_fu_977_sub_address0, grp_k2c_sub2idx_fu_989_sub_address0, ap_CS_fsm_state110, ap_CS_fsm_state108, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            Bsub_address0 <= Bsub_addr_3_gep_fu_669_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            Bsub_address0 <= permB_q0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            Bsub_address0 <= j_10_cast_reg_2255(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            Bsub_address0 <= j_4_cast_reg_2236(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            Bsub_address0 <= grp_k2c_sub2idx_fu_989_sub_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            Bsub_address0 <= grp_k2c_idx2sub_fu_977_sub_address0;
        else 
            Bsub_address0 <= "XXX";
        end if; 
    end process;


    Bsub_ce0_assign_proc : process(ap_CS_fsm_state106, ap_CS_fsm_state114, ap_CS_fsm_state116, grp_k2c_idx2sub_fu_977_sub_ce0, grp_k2c_sub2idx_fu_989_sub_ce0, ap_CS_fsm_state110, ap_CS_fsm_state108, ap_CS_fsm_state112)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            Bsub_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            Bsub_ce0 <= grp_k2c_sub2idx_fu_989_sub_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            Bsub_ce0 <= grp_k2c_idx2sub_fu_977_sub_ce0;
        else 
            Bsub_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bsub_d0_assign_proc : process(ap_CS_fsm_state106, Asub_q0, grp_k2c_idx2sub_fu_977_sub_d0, ap_CS_fsm_state108, ap_CS_fsm_state112)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            Bsub_d0 <= Asub_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            Bsub_d0 <= grp_k2c_idx2sub_fu_977_sub_d0;
        else 
            Bsub_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Bsub_we0_assign_proc : process(exitcond9_reg_2241, ap_CS_fsm_state106, grp_k2c_idx2sub_fu_977_sub_we0, ap_CS_fsm_state108, ap_CS_fsm_state112)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) or ((exitcond9_reg_2241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state106)))) then 
            Bsub_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            Bsub_we0 <= grp_k2c_idx2sub_fu_977_sub_we0;
        else 
            Bsub_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_array_address0_assign_proc : process(ap_CS_fsm_state126, C_array_addr_1_reg_2523, ap_CS_fsm_state146, i_6_cast_fu_1757_p1, ap_CS_fsm_state135)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state146))) then 
            C_array_address0 <= C_array_addr_1_reg_2523;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            C_array_address0 <= i_6_cast_fu_1757_p1(1 - 1 downto 0);
        else 
            C_array_address0 <= "X";
        end if; 
    end process;


    C_array_ce0_assign_proc : process(ap_CS_fsm_state126, ap_CS_fsm_state146, ap_CS_fsm_state135)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state146))) then 
            C_array_ce0 <= ap_const_logic_1;
        else 
            C_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_array_d0_assign_proc : process(ap_CS_fsm_state126, tmp_11_reg_2553, ap_CS_fsm_state146)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
            C_array_d0 <= tmp_11_reg_2553;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            C_array_d0 <= ap_const_lv32_0;
        else 
            C_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_array_we0_assign_proc : process(ap_CS_fsm_state126, exitcond5_fu_1762_p2, ap_CS_fsm_state146)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state146) or ((exitcond5_fu_1762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state126)))) then 
            C_array_we0 <= ap_const_logic_1;
        else 
            C_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state145 <= ap_CS_fsm(144);
    ap_CS_fsm_state146 <= ap_CS_fsm(145);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state127, tmp_7_fu_1781_p2)
    begin
        if ((((tmp_7_fu_1781_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state127)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_count_3_phi_fu_807_p4_assign_proc : process(ap_CS_fsm_state6, exitcond2_fu_1066_p2, count_2_reg_781, count_5_fu_1082_p2, tmp_fu_1071_p2)
    begin
        if (((exitcond2_fu_1066_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
            if ((tmp_fu_1071_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_count_3_phi_fu_807_p4 <= count_2_reg_781;
            elsif ((tmp_fu_1071_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_count_3_phi_fu_807_p4 <= count_5_fu_1082_p2;
            else 
                ap_phi_mux_count_3_phi_fu_807_p4 <= "XXX";
            end if;
        else 
            ap_phi_mux_count_3_phi_fu_807_p4 <= "XXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state127, tmp_7_fu_1781_p2)
    begin
        if (((tmp_7_fu_1781_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    count_2_cast_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_2_reg_781),64));
    count_3_cast_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_count_3_phi_fu_807_p4),64));
    count_4_1_fu_1054_p2 <= std_logic_vector(unsigned(count_1_reg_757) + unsigned(ap_const_lv64_1));
    count_4_fu_1032_p2 <= std_logic_vector(unsigned(count_reg_732) + unsigned(ap_const_lv64_1));
    count_5_1_fu_1110_p2 <= std_logic_vector(unsigned(count_3_reg_804) + unsigned(ap_const_lv3_1));
    count_5_fu_1082_p2 <= std_logic_vector(unsigned(count_2_reg_781) + unsigned(ap_const_lv3_1));
    dense_15_output_shap_5_gep_fu_398_p3 <= reg_1010(3 - 1 downto 0);

    dense_15_output_shap_address0_assign_proc : process(p_read2, reg_1010, ap_CS_fsm_state6, ap_CS_fsm_state86, dense_15_output_shap_5_gep_fu_398_p3, ap_CS_fsm_state90, grp_k2c_idx2sub_fu_977_shape_address0, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            dense_15_output_shap_address0 <= dense_15_output_shap_5_gep_fu_398_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            dense_15_output_shap_address0 <= reg_1010(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dense_15_output_shap_address0 <= p_read2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            dense_15_output_shap_address0 <= grp_k2c_idx2sub_fu_977_shape_address0;
        else 
            dense_15_output_shap_address0 <= "XXX";
        end if; 
    end process;


    dense_15_output_shap_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state86, ap_CS_fsm_state90, grp_k2c_idx2sub_fu_977_shape_ce0, ap_CS_fsm_state103)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            dense_15_output_shap_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            dense_15_output_shap_ce0 <= grp_k2c_idx2sub_fu_977_shape_ce0;
        else 
            dense_15_output_shap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_16_kernel_shap_3_gep_fu_452_p3 <= reg_1016(3 - 1 downto 0);

    dense_16_kernel_shap_address0_assign_proc : process(reg_1016, ap_CS_fsm_state95, dense_16_kernel_shap_3_gep_fu_452_p3, ap_CS_fsm_state99, grp_k2c_idx2sub_fu_977_shape_address0, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            dense_16_kernel_shap_address0 <= dense_16_kernel_shap_3_gep_fu_452_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            dense_16_kernel_shap_address0 <= reg_1016(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            dense_16_kernel_shap_address0 <= grp_k2c_idx2sub_fu_977_shape_address0;
        else 
            dense_16_kernel_shap_address0 <= "XXX";
        end if; 
    end process;


    dense_16_kernel_shap_ce0_assign_proc : process(ap_CS_fsm_state95, ap_CS_fsm_state99, grp_k2c_idx2sub_fu_977_shape_ce0, ap_CS_fsm_state112)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            dense_16_kernel_shap_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            dense_16_kernel_shap_ce0 <= grp_k2c_idx2sub_fu_977_shape_ce0;
        else 
            dense_16_kernel_shap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_1_fu_1486_p2 <= "1" when (j_11_cast_fu_1481_p1 = B_dim) else "0";
    exitcond10_fu_1470_p2 <= "1" when (j_5_cast_fu_1465_p1 = B_dim) else "0";
    exitcond11_1_fu_1388_p2 <= "1" when (j_10_cast_fu_1383_p1 = A_dim) else "0";
    exitcond11_fu_1844_p2 <= "1" when (j_s_reg_966 = free_axesB_reg_2012) else "0";
    exitcond12_1_fu_1342_p2 <= "1" when (i_23_cast_fu_1337_p1 = B_dim) else "0";
    exitcond13_1_fu_1310_p2 <= "1" when (i_22_cast_fu_1305_p1 = A_dim) else "0";
    exitcond1_1_fu_1045_p2 <= "1" when (i_12_s_fu_1039_p2 = A_dim) else "0";
    exitcond1_fu_1022_p2 <= "1" when (i_reg_744 = A_dim) else "0";
    exitcond2_1_fu_1099_p2 <= "1" when (i_15_s_fu_1093_p2 = B_dim) else "0";
    exitcond2_fu_1066_p2 <= "1" when (i_1_reg_792 = B_dim) else "0";
    exitcond3_fu_1353_p2 <= "1" when (i_s_reg_885 = A_numel_read) else "0";
    exitcond4_fu_1450_p2 <= "1" when (i_3_reg_909 = B_numel_read) else "0";
    exitcond5_fu_1762_p2 <= "1" when (i_6_cast_fu_1757_p1 = tmp_6_reg_2461) else "0";
    exitcond6_fu_1294_p2 <= "1" when (i_8_cast_fu_1289_p1 = A_dim) else "0";
    exitcond7_fu_1326_p2 <= "1" when (i_9_cast_fu_1321_p1 = B_dim) else "0";
    exitcond8_1_fu_1195_p2 <= "1" when (i_18_cast_fu_1190_p1 = i_2_reg_2032) else "0";
    exitcond8_fu_1179_p2 <= "1" when (i_4_cast_fu_1174_p1 = i_2_reg_2032) else "0";
    exitcond9_fu_1372_p2 <= "1" when (j_4_cast_fu_1367_p1 = A_dim) else "0";
    exitcond_fu_1810_p2 <= "1" when (k_cast_fu_1806_p1 = tmp_18_reg_2001) else "0";

    freeA_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, i_4_cast_fu_1174_p1, ap_CS_fsm_state77, i_18_cast_fu_1190_p1, ap_CS_fsm_state78, count_reg_732, count_1_reg_757)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            freeA_address0 <= i_18_cast_fu_1190_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            freeA_address0 <= i_4_cast_fu_1174_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            freeA_address0 <= count_1_reg_757(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            freeA_address0 <= count_reg_732(3 - 1 downto 0);
        else 
            freeA_address0 <= "XXX";
        end if; 
    end process;


    freeA_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state77, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            freeA_ce0 <= ap_const_logic_1;
        else 
            freeA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    freeA_d0_assign_proc : process(i_12_s_reg_1939, ap_CS_fsm_state2, ap_CS_fsm_state4, i_reg_744)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            freeA_d0 <= i_12_s_reg_1939;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            freeA_d0 <= i_reg_744;
        else 
            freeA_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    freeA_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_1022_p2, tmp_1_reg_1948, ap_CS_fsm_state4, tmp_8_fu_1027_p2)
    begin
        if ((((tmp_1_reg_1948 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_8_fu_1027_p2 = ap_const_lv1_0) and (exitcond1_fu_1022_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            freeA_we0 <= ap_const_logic_1;
        else 
            freeA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    freeB_address0_assign_proc : process(count_3_cast_reg_1968, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state81, ap_CS_fsm_state82, j_3_reg_848, count_2_cast_fu_1077_p1, j_9_cast_fu_1267_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            freeB_address0 <= j_9_cast_fu_1267_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            freeB_address0 <= j_3_reg_848(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            freeB_address0 <= count_3_cast_reg_1968(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            freeB_address0 <= count_2_cast_fu_1077_p1(3 - 1 downto 0);
        else 
            freeB_address0 <= "XXX";
        end if; 
    end process;


    freeB_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state81, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            freeB_ce0 <= ap_const_logic_1;
        else 
            freeB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    freeB_d0_assign_proc : process(ap_CS_fsm_state6, i_15_s_reg_1973, ap_CS_fsm_state7, i_1_reg_792)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            freeB_d0 <= i_15_s_reg_1973;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            freeB_d0 <= i_1_reg_792;
        else 
            freeB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    freeB_we0_assign_proc : process(ap_CS_fsm_state6, exitcond2_fu_1066_p2, ap_CS_fsm_state7, tmp_fu_1071_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_fu_1071_p2 = ap_const_lv1_0) and (exitcond2_fu_1066_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            freeB_we0 <= ap_const_logic_1;
        else 
            freeB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    free_axesB_1_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(free_axesB_fu_1129_p4),64));
    free_axesB_fu_1129_p4 <= B_numel_read(63 downto 4);

    fwork_address0_assign_proc : process(fwork_addr_2_reg_2500, ap_CS_fsm_state130, grp_k2c_sub2idx_fu_989_ap_return, ap_CS_fsm_state110, ap_CS_fsm_state120, sum_cast_fu_1753_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            fwork_address0 <= fwork_addr_2_reg_2500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            fwork_address0 <= sum_cast_fu_1753_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            fwork_address0 <= grp_k2c_sub2idx_fu_989_ap_return(5 - 1 downto 0);
        else 
            fwork_address0 <= "XXXXX";
        end if; 
    end process;

    fwork_address1 <= sum3_cast_fu_1875_p1(5 - 1 downto 0);

    fwork_ce0_assign_proc : process(grp_k2c_sub2idx_fu_989_ap_done, ap_CS_fsm_state130, ap_CS_fsm_state110, ap_CS_fsm_state120)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state120) or ((grp_k2c_sub2idx_fu_989_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state110)))) then 
            fwork_ce0 <= ap_const_logic_1;
        else 
            fwork_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fwork_ce1_assign_proc : process(ap_CS_fsm_state130)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            fwork_ce1 <= ap_const_logic_1;
        else 
            fwork_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fwork_d0_assign_proc : process(tmp_5_reg_2323, ap_CS_fsm_state110, ap_CS_fsm_state120, merge_i_fu_1744_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            fwork_d0 <= merge_i_fu_1744_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            fwork_d0 <= tmp_5_reg_2323;
        else 
            fwork_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fwork_we0_assign_proc : process(grp_k2c_sub2idx_fu_989_ap_done, ap_CS_fsm_state110, ap_CS_fsm_state120)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state120) or ((grp_k2c_sub2idx_fu_989_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state110)))) then 
            fwork_we0 <= ap_const_logic_1;
        else 
            fwork_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1124_ap_start_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_1124_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1124_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1124_p1 <= reg_1005(7 - 1 downto 0);
    grp_fu_1461_p0 <= free_axesB_1_reg_2017(60 - 1 downto 0);
    grp_k2c_idx2sub_fu_977_ap_start <= grp_k2c_idx2sub_fu_977_ap_start_reg;

    grp_k2c_idx2sub_fu_977_idx_assign_proc : process(i_s_reg_885, ap_CS_fsm_state103, i_3_reg_909, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            grp_k2c_idx2sub_fu_977_idx <= i_3_reg_909;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_k2c_idx2sub_fu_977_idx <= i_s_reg_885;
        else 
            grp_k2c_idx2sub_fu_977_idx <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_idx2sub_fu_977_ndim_assign_proc : process(A_dim, B_dim, ap_CS_fsm_state103, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            grp_k2c_idx2sub_fu_977_ndim <= B_dim;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_k2c_idx2sub_fu_977_ndim <= A_dim;
        else 
            grp_k2c_idx2sub_fu_977_ndim <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_idx2sub_fu_977_shape_q0_assign_proc : process(dense_15_output_shap_q0, dense_16_kernel_shap_q0, ap_CS_fsm_state103, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            grp_k2c_idx2sub_fu_977_shape_q0 <= dense_16_kernel_shap_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_k2c_idx2sub_fu_977_shape_q0 <= dense_15_output_shap_q0;
        else 
            grp_k2c_idx2sub_fu_977_shape_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_k2c_sub2idx_fu_989_ap_start <= grp_k2c_sub2idx_fu_989_ap_start_reg;

    grp_k2c_sub2idx_fu_989_ndim_assign_proc : process(A_dim, B_dim, ap_CS_fsm_state119, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            grp_k2c_sub2idx_fu_989_ndim <= B_dim;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_k2c_sub2idx_fu_989_ndim <= A_dim;
        else 
            grp_k2c_sub2idx_fu_989_ndim <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_sub2idx_fu_989_shape_q0_assign_proc : process(ap_CS_fsm_state119, newshpA_q0, newshpB_q0, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            grp_k2c_sub2idx_fu_989_shape_q0 <= newshpB_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_k2c_sub2idx_fu_989_shape_q0 <= newshpA_q0;
        else 
            grp_k2c_sub2idx_fu_989_shape_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_sub2idx_fu_989_sub_q0_assign_proc : process(ap_CS_fsm_state119, Asub_q0, Bsub_q0, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            grp_k2c_sub2idx_fu_989_sub_q0 <= Asub_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_k2c_sub2idx_fu_989_sub_q0 <= Bsub_q0;
        else 
            grp_k2c_sub2idx_fu_989_sub_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_11_fu_1767_p2 <= (i_6_reg_933 xor ap_const_lv1_1);
    i_12_1_fu_1060_p2 <= std_logic_vector(unsigned(i_reg_744) + unsigned(ap_const_lv64_2));
    i_12_fu_1358_p2 <= std_logic_vector(unsigned(i_s_reg_885) + unsigned(ap_const_lv64_1));
    i_12_s_fu_1039_p2 <= (i_reg_744 or ap_const_lv64_1);
    i_13_fu_1455_p2 <= std_logic_vector(unsigned(i_3_reg_909) + unsigned(ap_const_lv64_1));
    i_14_fu_1786_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_10_reg_944));
    i_15_1_fu_1104_p2 <= std_logic_vector(unsigned(i_1_reg_792) + unsigned(ap_const_lv64_2));
    i_15_cast_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_15_fu_1216_p2),64));
    i_15_fu_1216_p2 <= std_logic_vector(unsigned(i_5_reg_827) + unsigned(ap_const_lv3_1));
    i_15_s_fu_1093_p2 <= (i_1_reg_792 or ap_const_lv64_1);
    i_16_cast_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_16_fu_1247_p2),64));
    i_16_fu_1247_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_7_reg_836));
    i_18_1_fu_1200_p2 <= std_logic_vector(unsigned(i_4_reg_815) + unsigned(ap_const_lv3_2));
    i_18_cast_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_18_s_fu_1184_p2),64));
    i_18_s_fu_1184_p2 <= (i_4_reg_815 or ap_const_lv3_1);
    i_19_1_fu_1232_p2 <= std_logic_vector(unsigned(i_5_reg_827) + unsigned(ap_const_lv3_2));
    i_21_1_fu_1277_p2 <= std_logic_vector(unsigned(i_7_reg_836) + unsigned(ap_const_lv3_2));
    i_22_1_fu_1315_p2 <= std_logic_vector(unsigned(i_8_reg_861) + unsigned(ap_const_lv3_2));
    i_22_cast_fu_1305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_22_s_fu_1299_p2),64));
    i_22_s_fu_1299_p2 <= (i_8_reg_861 or ap_const_lv3_1);
    i_23_1_fu_1347_p2 <= std_logic_vector(unsigned(i_9_reg_873) + unsigned(ap_const_lv3_2));
    i_23_cast_fu_1337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_23_s_fu_1331_p2),64));
    i_23_s_fu_1331_p2 <= (i_9_reg_873 or ap_const_lv3_1);
    i_2_cast_fu_1168_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(tmp_19_fu_1160_p1));
    i_2_fu_1163_p2 <= std_logic_vector(signed(ap_const_lv64_FFFFFFFFFFFFFFFF) + signed(A_dim));
    i_4_cast_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_815),64));
    i_5_cast_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_827),64));
    i_6_cast_fu_1757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_933),64));
    i_7_cast_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_836),64));
    i_8_cast_fu_1289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_861),64));
    i_9_cast_fu_1321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_873),64));
    inneridx_fu_1797_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_4_reg_1996) * signed(tmp_23_fu_1773_p1))), 7));
    j_10_1_fu_1393_p2 <= std_logic_vector(unsigned(j_4_reg_897) + unsigned(ap_const_lv3_2));
    j_10_cast_fu_1383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_10_s_fu_1377_p2),64));
    j_10_s_fu_1377_p2 <= (j_4_reg_897 or ap_const_lv3_1);
    j_11_1_fu_1491_p2 <= std_logic_vector(unsigned(j_5_reg_921) + unsigned(ap_const_lv3_2));
    j_11_cast_fu_1481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_11_s_fu_1475_p2),64));
    j_11_s_fu_1475_p2 <= (j_5_reg_921 or ap_const_lv3_1);
    j_4_cast_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_897),64));
    j_5_cast_fu_1465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_5_reg_921),64));
    j_9_1_fu_1283_p2 <= std_logic_vector(unsigned(j_3_reg_848) + unsigned(ap_const_lv64_2));
    j_9_cast_fu_1267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_9_s_fu_1261_p2),64));
    j_9_s_fu_1261_p2 <= (tmp_20_fu_1257_p1 or ap_const_lv4_1);
    j_fu_1849_p2 <= std_logic_vector(unsigned(ap_const_lv60_1) + unsigned(j_s_reg_966));
    k_1_fu_1815_p2 <= std_logic_vector(unsigned(k_reg_955) + unsigned(ap_const_lv5_1));
    k_cast3_fu_1802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_955),7));
    k_cast_fu_1806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_955),6));
    merge_i_fu_1744_p3 <= 
        tmp_277_i_fu_1733_p3 when (tmp_17_fu_1740_p2(0) = '1') else 
        tmp_275_i_fu_1726_p3;
    newIndex_cast_fu_1413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_fu_1403_p4),64));
    newIndex_fu_1403_p4 <= i_s_reg_885(5 downto 3);

    newshpA_address0_assign_proc : process(i_8_cast_reg_2123, i_22_cast_reg_2142, ap_CS_fsm_state88, grp_k2c_sub2idx_fu_989_shape_address0, ap_CS_fsm_state92, ap_CS_fsm_state110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            newshpA_address0 <= i_22_cast_reg_2142(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            newshpA_address0 <= i_8_cast_reg_2123(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            newshpA_address0 <= grp_k2c_sub2idx_fu_989_shape_address0;
        else 
            newshpA_address0 <= "XXX";
        end if; 
    end process;


    newshpA_ce0_assign_proc : process(ap_CS_fsm_state88, grp_k2c_sub2idx_fu_989_shape_ce0, ap_CS_fsm_state92, ap_CS_fsm_state110)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            newshpA_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            newshpA_ce0 <= grp_k2c_sub2idx_fu_989_shape_ce0;
        else 
            newshpA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    newshpA_d0_assign_proc : process(reg_1005, ap_CS_fsm_state88, dense_15_output_shap_6_reg_2165, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            newshpA_d0 <= dense_15_output_shap_6_reg_2165;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            newshpA_d0 <= reg_1005;
        else 
            newshpA_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    newshpA_we0_assign_proc : process(exitcond6_reg_2128, ap_CS_fsm_state88, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or ((exitcond6_reg_2128 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88)))) then 
            newshpA_we0 <= ap_const_logic_1;
        else 
            newshpA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    newshpB_address0_assign_proc : process(i_9_cast_reg_2170, i_23_cast_reg_2194, ap_CS_fsm_state97, ap_CS_fsm_state119, grp_k2c_sub2idx_fu_989_shape_address0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            newshpB_address0 <= i_23_cast_reg_2194(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            newshpB_address0 <= i_9_cast_reg_2170(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            newshpB_address0 <= grp_k2c_sub2idx_fu_989_shape_address0;
        else 
            newshpB_address0 <= "XXX";
        end if; 
    end process;


    newshpB_ce0_assign_proc : process(ap_CS_fsm_state97, ap_CS_fsm_state119, grp_k2c_sub2idx_fu_989_shape_ce0, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            newshpB_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            newshpB_ce0 <= grp_k2c_sub2idx_fu_989_shape_ce0;
        else 
            newshpB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    newshpB_d0_assign_proc : process(dense_16_kernel_shap_2_reg_2189, ap_CS_fsm_state97, dense_16_kernel_shap_4_reg_2217, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            newshpB_d0 <= dense_16_kernel_shap_4_reg_2217;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            newshpB_d0 <= dense_16_kernel_shap_2_reg_2189;
        else 
            newshpB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    newshpB_we0_assign_proc : process(exitcond7_reg_2175, ap_CS_fsm_state97, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or ((exitcond7_reg_2175 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state97)))) then 
            newshpB_we0 <= ap_const_logic_1;
        else 
            newshpB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outrowidx_fu_1792_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_24_fu_1777_p1) * signed(free_axesB_cast5_reg_2027))), 2));

    permA_address0_assign_proc : process(i_4_cast_reg_2043, i_18_cast_reg_2057, ap_CS_fsm_state78, ap_CS_fsm_state80, j_4_cast_fu_1367_p1, ap_CS_fsm_state104, ap_CS_fsm_state79, i_5_cast_fu_1206_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            permA_address0 <= j_4_cast_fu_1367_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            permA_address0 <= i_5_cast_fu_1206_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            permA_address0 <= i_18_cast_reg_2057(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            permA_address0 <= i_4_cast_reg_2043(3 - 1 downto 0);
        else 
            permA_address0 <= "XXX";
        end if; 
    end process;


    permA_address1_assign_proc : process(ap_CS_fsm_state80, i_8_cast_fu_1289_p1, ap_CS_fsm_state84, i_22_cast_fu_1305_p1, ap_CS_fsm_state88, j_10_cast_fu_1383_p1, ap_CS_fsm_state106, i_15_cast_fu_1222_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            permA_address1 <= j_10_cast_fu_1383_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            permA_address1 <= i_22_cast_fu_1305_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            permA_address1 <= i_8_cast_fu_1289_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            permA_address1 <= i_15_cast_fu_1222_p1(3 - 1 downto 0);
        else 
            permA_address1 <= "XXX";
        end if; 
    end process;


    permA_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state104, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            permA_ce0 <= ap_const_logic_1;
        else 
            permA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    permA_ce1_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state84, ap_CS_fsm_state88, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            permA_ce1 <= ap_const_logic_1;
        else 
            permA_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    permA_d0_assign_proc : process(p_read2, ap_CS_fsm_state78, ap_CS_fsm_state80, freeA_q0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            permA_d0 <= p_read2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            permA_d0 <= freeA_q0;
        else 
            permA_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    permA_we0_assign_proc : process(exitcond8_reg_2048, ap_CS_fsm_state78, ap_CS_fsm_state80, tmp_2_fu_1211_p2, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((tmp_2_fu_1211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80)) or ((exitcond8_reg_2048 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            permA_we0 <= ap_const_logic_1;
        else 
            permA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    permA_we1_assign_proc : process(ap_CS_fsm_state80, tmp_2_fu_1211_p2, tmp_2_1_fu_1227_p2)
    begin
        if (((tmp_2_1_fu_1227_p2 = ap_const_lv1_1) and (tmp_2_fu_1211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            permA_we1 <= ap_const_logic_1;
        else 
            permA_we1 <= ap_const_logic_0;
        end if; 
    end process;


    permB_address0_assign_proc : process(ap_CS_fsm_state80, i_7_cast_reg_2086, i_16_cast_reg_2100, ap_CS_fsm_state82, i_9_cast_fu_1321_p1, ap_CS_fsm_state93, i_23_cast_fu_1337_p1, ap_CS_fsm_state97, j_5_cast_fu_1465_p1, ap_CS_fsm_state113, j_11_cast_fu_1481_p1, ap_CS_fsm_state115, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            permB_address0 <= j_11_cast_fu_1481_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            permB_address0 <= j_5_cast_fu_1465_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            permB_address0 <= i_23_cast_fu_1337_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            permB_address0 <= i_9_cast_fu_1321_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            permB_address0 <= i_16_cast_reg_2100(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            permB_address0 <= i_7_cast_reg_2086(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            permB_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            permB_address0 <= "XXX";
        end if; 
    end process;


    permB_ce0_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state93, ap_CS_fsm_state97, ap_CS_fsm_state113, ap_CS_fsm_state115, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            permB_ce0 <= ap_const_logic_1;
        else 
            permB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    permB_d0_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state82, freeB_q0, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            permB_d0 <= freeB_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            permB_d0 <= ap_const_lv64_0;
        else 
            permB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    permB_we0_assign_proc : process(ap_CS_fsm_state80, tmp_2_fu_1211_p2, tmp_2_1_fu_1227_p2, tmp_3_reg_2091, ap_CS_fsm_state82, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or ((tmp_3_reg_2091 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and ((tmp_2_1_fu_1227_p2 = ap_const_lv1_0) or (tmp_2_fu_1211_p2 = ap_const_lv1_0))))) then 
            permB_we0 <= ap_const_logic_1;
        else 
            permB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum1_cast_fu_1826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_1821_p2),64));
    sum1_fu_1821_p2 <= std_logic_vector(unsigned(k_cast3_fu_1802_p1) + unsigned(inneridx_reg_2487));
    sum2_cast_fu_1870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_1865_p2),64));
    sum2_fu_1865_p2 <= std_logic_vector(unsigned(tmp_29_fu_1840_p1) + unsigned(outrowidx_reg_2482));
    sum3_cast_fu_1875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_reg_2518),64));
    sum3_fu_1860_p2 <= std_logic_vector(unsigned(tmp1_fu_1855_p2) + unsigned(tmp_s_reg_2505));
    sum_cast_fu_1753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_2456),64));
    sum_fu_1710_p2 <= std_logic_vector(unsigned(tmp_25_fu_1545_p1) + unsigned(tmp_21_reg_2230));
    tmp1_fu_1855_p2 <= std_logic_vector(unsigned(tmp_28_fu_1836_p1) + unsigned(tmp_21_reg_2230));
    tmp_12_fu_1582_p2 <= (tmp_258_i_reg_2423 or tmp_256_i_reg_2418);
    tmp_13_fu_1612_p2 <= (tmp_262_i_fu_1599_p2 or tmp_260_i_fu_1594_p2);
    tmp_14_fu_1644_p2 <= (tmp_266_i_fu_1631_p2 or tmp_264_i_fu_1626_p2);
    tmp_15_fu_1676_p2 <= (tmp_270_i_fu_1663_p2 or tmp_268_i_fu_1658_p2);
    tmp_16_fu_1722_p2 <= (tmp_274_i_reg_2439 or tmp_272_i_reg_2434);
    tmp_17_fu_1740_p2 <= (tmp_278_i_reg_2450 or tmp_276_i_reg_2445);
    tmp_18_fu_1120_p1 <= dense_15_output_shap_q0(6 - 1 downto 0);
    tmp_19_fu_1160_p1 <= A_dim(3 - 1 downto 0);
    tmp_1_25_fu_1563_p2 <= (tmp_254_i_reg_2412 or tmp_252_i_reg_2407);
    tmp_1_fu_1050_p2 <= "1" when (i_12_s_reg_1939 = p_read2) else "0";
    tmp_20_fu_1257_p1 <= j_3_reg_848(4 - 1 downto 0);
    tmp_21_fu_1364_p1 <= A_numel_read(7 - 1 downto 0);
    tmp_22_fu_1399_p1 <= i_s_reg_885(3 - 1 downto 0);
    tmp_23_fu_1773_p1 <= i_10_reg_944(7 - 1 downto 0);
    tmp_24_fu_1777_p1 <= i_10_reg_944(2 - 1 downto 0);
    tmp_252_i_fu_1521_p2 <= "1" when (tmp_9_fu_1509_p3 = ap_const_lv4_1) else "0";
    tmp_253_i_fu_1556_p3 <= 
        ap_const_lv32_3F11B963 when (tmp_254_i_reg_2412(0) = '1') else 
        ap_const_lv32_3F04C347;
    tmp_254_i_fu_1527_p2 <= "1" when (tmp_9_fu_1509_p3 = ap_const_lv4_2) else "0";
    tmp_255_i_fu_1567_p3 <= 
        tmp_253_i_fu_1556_p3 when (tmp_1_25_fu_1563_p2(0) = '1') else 
        tmp_i_24_fu_1549_p3;
    tmp_256_i_fu_1533_p2 <= "1" when (tmp_9_fu_1509_p3 = ap_const_lv4_3) else "0";
    tmp_257_i_fu_1575_p3 <= 
        ap_const_lv32_3F030BC6 when (tmp_258_i_reg_2423(0) = '1') else 
        ap_const_lv32_3D9B8713;
    tmp_258_i_fu_1539_p2 <= "1" when (tmp_9_fu_1509_p3 = ap_const_lv4_4) else "0";
    tmp_259_i_fu_1586_p3 <= 
        tmp_257_i_fu_1575_p3 when (tmp_12_fu_1582_p2(0) = '1') else 
        tmp_255_i_fu_1567_p3;
    tmp_25_fu_1545_p1 <= grp_k2c_sub2idx_fu_989_ap_return(7 - 1 downto 0);
    tmp_260_i_fu_1594_p2 <= "1" when (tmp_9_reg_2388 = ap_const_lv4_5) else "0";
    tmp_261_i_fu_1604_p3 <= 
        ap_const_lv32_BE9F6F6B when (tmp_262_i_fu_1599_p2(0) = '1') else 
        ap_const_lv32_BF22AE22;
    tmp_262_i_fu_1599_p2 <= "1" when (tmp_9_reg_2388 = ap_const_lv4_6) else "0";
    tmp_263_i_fu_1618_p3 <= 
        tmp_261_i_fu_1604_p3 when (tmp_13_fu_1612_p2(0) = '1') else 
        tmp_259_i_fu_1586_p3;
    tmp_264_i_fu_1626_p2 <= "1" when (tmp_9_reg_2388 = ap_const_lv4_7) else "0";
    tmp_265_i_fu_1636_p3 <= 
        ap_const_lv32_BE97C77F when (tmp_266_i_fu_1631_p2(0) = '1') else 
        ap_const_lv32_3E6FDC74;
    tmp_266_i_fu_1631_p2 <= "1" when (tmp_9_reg_2388 = ap_const_lv4_8) else "0";
    tmp_267_i_fu_1650_p3 <= 
        tmp_265_i_fu_1636_p3 when (tmp_14_fu_1644_p2(0) = '1') else 
        tmp_263_i_fu_1618_p3;
    tmp_268_i_fu_1658_p2 <= "1" when (tmp_9_reg_2388 = ap_const_lv4_9) else "0";
    tmp_269_i_fu_1668_p3 <= 
        ap_const_lv32_3E907CAE when (tmp_270_i_fu_1663_p2(0) = '1') else 
        ap_const_lv32_BEEC8A04;
    tmp_26_fu_1497_p1 <= i_3_reg_909(3 - 1 downto 0);
    tmp_270_i_fu_1663_p2 <= "1" when (tmp_9_reg_2388 = ap_const_lv4_A) else "0";
    tmp_271_i_fu_1682_p3 <= 
        tmp_269_i_fu_1668_p3 when (tmp_15_fu_1676_p2(0) = '1') else 
        tmp_267_i_fu_1650_p3;
    tmp_272_i_fu_1690_p2 <= "1" when (tmp_9_reg_2388 = ap_const_lv4_B) else "0";
    tmp_273_i_fu_1715_p3 <= 
        ap_const_lv32_3D16A363 when (tmp_274_i_reg_2439(0) = '1') else 
        ap_const_lv32_3E381D23;
    tmp_274_i_fu_1695_p2 <= "1" when (tmp_9_reg_2388 = ap_const_lv4_C) else "0";
    tmp_275_i_fu_1726_p3 <= 
        tmp_273_i_fu_1715_p3 when (tmp_16_fu_1722_p2(0) = '1') else 
        tmp_271_i_reg_2429;
    tmp_276_i_fu_1700_p2 <= "1" when (tmp_9_reg_2388 = ap_const_lv4_D) else "0";
    tmp_277_i_fu_1733_p3 <= 
        ap_const_lv32_BD687D6C when (tmp_278_i_reg_2450(0) = '1') else 
        ap_const_lv32_3EE2C315;
    tmp_278_i_fu_1705_p2 <= "1" when (tmp_9_reg_2388 = ap_const_lv4_E) else "0";
    tmp_28_fu_1836_p1 <= j_s_reg_966(7 - 1 downto 0);
    tmp_29_fu_1840_p1 <= j_s_reg_966(2 - 1 downto 0);
    tmp_2_1_fu_1227_p2 <= "1" when (unsigned(i_15_cast_fu_1222_p1) < unsigned(A_dim)) else "0";
    tmp_2_fu_1211_p2 <= "1" when (unsigned(i_5_cast_fu_1206_p1) < unsigned(A_dim)) else "0";
    tmp_3_1_fu_1272_p2 <= "1" when (unsigned(i_16_cast_fu_1253_p1) < unsigned(B_dim)) else "0";
    tmp_3_fu_1242_p2 <= "1" when (unsigned(i_7_cast_fu_1238_p1) < unsigned(B_dim)) else "0";
    tmp_4_fu_1116_p1 <= dense_15_output_shap_q0(7 - 1 downto 0);
    tmp_5_fu_1428_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_reg_2273),64));
    tmp_7_fu_1781_p2 <= "1" when (unsigned(i_10_reg_944) < unsigned(free_axesA_reg_2006)) else "0";
    tmp_8_fu_1027_p2 <= "1" when (i_reg_744 = p_read2) else "0";
    tmp_9_fu_1509_p3 <= (tmp_26_reg_2373 & tmp_27_reg_2378);
    tmp_fu_1071_p2 <= "1" when (i_1_reg_792 = ap_const_lv64_0) else "0";
    tmp_i_24_fu_1549_p3 <= 
        ap_const_lv32_3C9F6B1E when (tmp_i_reg_2402(0) = '1') else 
        ap_const_lv32_3F14DED2;
    tmp_i_fu_1515_p2 <= "1" when (tmp_9_fu_1509_p3 = ap_const_lv4_0) else "0";
    tmp_s_fu_1831_p0 <= k_cast3_fu_1802_p1(5 - 1 downto 0);
    tmp_s_fu_1831_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_s_fu_1831_p0) * signed(free_axesB_cast6_reg_2022))), 7));
end behav;
