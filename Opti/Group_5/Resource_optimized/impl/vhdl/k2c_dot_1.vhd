-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_dot_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_array_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    C_array_ce0 : OUT STD_LOGIC;
    C_array_we0 : OUT STD_LOGIC;
    C_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_array_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_array_ce0 : OUT STD_LOGIC;
    A_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_dim : IN STD_LOGIC_VECTOR (63 downto 0);
    A_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    B_dim : IN STD_LOGIC_VECTOR (63 downto 0);
    B_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of k2c_dot_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (123 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (123 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (123 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (123 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (123 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (123 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (123 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (123 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (123 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (123 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv57_1 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_13_output_shap_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_13_output_shap_ce0 : STD_LOGIC;
    signal dense_13_output_shap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dense_14_kernel_shap_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_14_kernel_shap_ce0 : STD_LOGIC;
    signal dense_14_kernel_shap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dense_14_fwork_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_14_fwork_ce0 : STD_LOGIC;
    signal dense_14_fwork_we0 : STD_LOGIC;
    signal dense_14_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_14_fwork_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_14_fwork_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_14_fwork_ce1 : STD_LOGIC;
    signal dense_14_fwork_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_14_kernel_arra_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_14_kernel_arra_ce0 : STD_LOGIC;
    signal dense_14_kernel_arra_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_12_s_fu_869_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_s_reg_1474 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1482 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_1_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_4_1_fu_885_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_12_1_fu_891_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_1_reg_1491 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_3_cast_fu_920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_3_cast_reg_1502 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_s_fu_924_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_15_s_reg_1507 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_5_1_fu_935_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal count_5_1_reg_1515 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_1_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_1_fu_941_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_15_1_reg_1520 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_29_fu_947_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_reg_1535 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_30_fu_951_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_reg_1540 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_955_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal free_axesA_reg_1545 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal free_axesB_fu_960_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal free_axesB_reg_1551 : STD_LOGIC_VECTOR (56 downto 0);
    signal free_axesB_3_fu_969_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal free_axesB_3_reg_1556 : STD_LOGIC_VECTOR (63 downto 0);
    signal free_axesB_cast6_reg_1561 : STD_LOGIC_VECTOR (13 downto 0);
    signal free_axesB_cast5_reg_1566 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_16_fu_994_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_16_reg_1571 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_16_cast_fu_999_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_16_cast_reg_1577 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_cast_fu_1005_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_1582 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal exitcond8_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_reg_1587 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_18_cast_fu_1021_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_18_cast_reg_1596 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal exitcond8_1_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_18_1_fu_1031_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_18_1_reg_1609 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_19_1_fu_1063_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal tmp_2_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_1_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_cast_fu_1069_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_cast_reg_1625 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal tmp_3_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1630 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_21_cast_fu_1084_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_21_cast_reg_1639 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal tmp_3_1_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_21_1_fu_1108_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_21_1_reg_1652 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_9_1_fu_1114_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_9_1_reg_1657 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_8_cast_fu_1120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_8_cast_reg_1662 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal exitcond13_fu_1125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond13_reg_1667 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal i_22_cast_fu_1136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_22_cast_reg_1681 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal exitcond13_1_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_22_1_fu_1146_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_22_1_reg_1694 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_13_output_shap_5_gep_fu_318_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal i_9_cast_fu_1152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_9_cast_reg_1704 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal exitcond12_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond12_reg_1709 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal i_23_cast_fu_1168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_23_cast_reg_1723 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal exitcond12_1_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_23_1_fu_1178_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_23_1_reg_1736 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_14_kernel_shap_3_gep_fu_375_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal i_23_fu_1189_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_23_reg_1749 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal tmp_33_fu_1195_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_33_reg_1754 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond9_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_cast_fu_1198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_4_cast_reg_1760 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal exitcond11_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond11_reg_1765 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal j_10_cast_fu_1214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_10_cast_reg_1779 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal exitcond11_1_fu_1219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_10_1_fu_1224_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_10_1_reg_1792 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal A_array_load_reg_1807 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal i_24_fu_1235_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_24_reg_1815 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal j_5_cast_fu_1245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_5_cast_reg_1820 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal exitcond14_fu_1250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond14_reg_1825 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal j_11_cast_fu_1261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_11_cast_reg_1839 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal exitcond10_1_fu_1266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_11_1_fu_1271_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_11_1_reg_1852 : STD_LOGIC_VECTOR (2 downto 0);
    signal Bsub_addr_9_gep_fu_515_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal dense_14_kernel_arra_2_reg_1867 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal grp_fu_1241_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1872 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal i_22_fu_1301_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal i_25_fu_1320_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_25_reg_1888 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal outrowidx_fu_1326_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal outrowidx_reg_1893 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_1315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inneridx_fu_1404_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal inneridx_reg_1898 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_1_fu_1344_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_reg_1906 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal dense_14_fwork_addr_2_reg_1911 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_1339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_11_fu_1409_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_11_reg_1916 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_fu_1373_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal j_reg_1924 : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal exitcond3_fu_1368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_array_addr_3_reg_1934 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_14_fwork_load_reg_1939 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal dense_14_fwork_load_1_reg_1944 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_848_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1949 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal C_array_load_reg_1954 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1959 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal permA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal permA_ce0 : STD_LOGIC;
    signal permA_we0 : STD_LOGIC;
    signal permA_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal permA_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal permA_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal permA_ce1 : STD_LOGIC;
    signal permA_we1 : STD_LOGIC;
    signal permA_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal permB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal permB_ce0 : STD_LOGIC;
    signal permB_we0 : STD_LOGIC;
    signal permB_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal permB_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal freeA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal freeA_ce0 : STD_LOGIC;
    signal freeA_we0 : STD_LOGIC;
    signal freeA_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal freeA_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal freeB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal freeB_ce0 : STD_LOGIC;
    signal freeB_we0 : STD_LOGIC;
    signal freeB_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal freeB_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal newshpA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal newshpA_ce0 : STD_LOGIC;
    signal newshpA_we0 : STD_LOGIC;
    signal newshpA_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal newshpB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal newshpB_ce0 : STD_LOGIC;
    signal newshpB_we0 : STD_LOGIC;
    signal newshpB_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Asub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Asub_ce0 : STD_LOGIC;
    signal Asub_we0 : STD_LOGIC;
    signal Asub_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Asub_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Bsub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Bsub_ce0 : STD_LOGIC;
    signal Bsub_we0 : STD_LOGIC;
    signal Bsub_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Bsub_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_824_ap_start : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_824_ap_done : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_824_ap_idle : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_824_ap_ready : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_824_idx : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_824_sub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_idx2sub_fu_824_sub_ce0 : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_824_sub_we0 : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_824_sub_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_824_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_idx2sub_fu_824_shape_ce0 : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_824_shape_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_824_ndim : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_836_ap_start : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_836_ap_done : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_836_ap_idle : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_836_ap_ready : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_836_sub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_sub2idx_fu_836_sub_ce0 : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_836_sub_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_836_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_sub2idx_fu_836_shape_ce0 : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_836_shape_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_836_ndim : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_836_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal count_reg_578 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_reg_590 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_4_fu_862_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_count_1_phi_fu_607_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_1_reg_603 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_1_1_reg_615 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_2_reg_627 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_reg_638 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_5_fu_913_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_count_3_phi_fu_653_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_reg_660 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal i_5_reg_672 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_681 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal j_3_reg_693 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_8_reg_706 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal i_9_reg_718 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal i_s_reg_730 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal j_4_reg_743 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal i_10_reg_755 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal j_5_reg_768 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal i_11_reg_780 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond5_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_14_reg_791 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_reg_802 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_s_reg_813 : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal grp_k2c_idx2sub_fu_824_ap_start_reg : STD_LOGIC := '0';
    signal exitcond10_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_sub2idx_fu_836_ap_start_reg : STD_LOGIC := '0';
    signal count_2_cast4_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_fu_1037_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_19_cast_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_9_cast_fu_1098_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_1286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_11_cast_fu_1291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_1355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_fu_1389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_1399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal grp_fu_955_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_fu_991_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_18_s_fu_1015_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_19_fu_1047_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_21_fu_1078_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_32_fu_1088_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_9_s_fu_1092_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_22_s_fu_1130_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_23_s_fu_1162_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_10_s_fu_1208_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1241_p0 : STD_LOGIC_VECTOR (56 downto 0);
    signal j_11_s_fu_1255_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_36_fu_1277_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_fu_1281_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_35_fu_1311_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_cast_fu_1335_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_cast3_fu_1331_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum6_fu_1350_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sum6_fu_1350_p2 : signal is "no";
    signal tmp_37_fu_1360_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp1_fu_1379_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum7_fu_1384_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of sum7_fu_1384_p2 : signal is "no";
    signal tmp_38_fu_1364_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum2_fu_1394_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal inneridx_fu_1404_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_11_fu_1409_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_955_ap_start : STD_LOGIC;
    signal grp_fu_955_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (123 downto 0);

    component k2c_idx2sub IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        idx : IN STD_LOGIC_VECTOR (63 downto 0);
        sub_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sub_ce0 : OUT STD_LOGIC;
        sub_we0 : OUT STD_LOGIC;
        sub_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        shape_ce0 : OUT STD_LOGIC;
        shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ndim : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_sub2idx IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sub_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sub_ce0 : OUT STD_LOGIC;
        sub_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        shape_ce0 : OUT STD_LOGIC;
        shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ndim : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sample_fadd_32ns_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_fmul_32ns_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_udiv_64ns_udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sample_mul_57ns_6vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (56 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sample_mul_mul_14wdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component sample_mul_mul_8nxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component k2c_dot_1_dense_1qcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_dot_1_dense_1rcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_dot_1_dense_1sc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2c_dot_1_dense_1tde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2c_dot_permA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_dot_permB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dense_13_output_shap_U : component k2c_dot_1_dense_1qcK
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_13_output_shap_address0,
        ce0 => dense_13_output_shap_ce0,
        q0 => dense_13_output_shap_q0);

    dense_14_kernel_shap_U : component k2c_dot_1_dense_1rcU
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_14_kernel_shap_address0,
        ce0 => dense_14_kernel_shap_ce0,
        q0 => dense_14_kernel_shap_q0);

    dense_14_fwork_U : component k2c_dot_1_dense_1sc4
    generic map (
        DataWidth => 32,
        AddressRange => 4224,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_14_fwork_address0,
        ce0 => dense_14_fwork_ce0,
        we0 => dense_14_fwork_we0,
        d0 => dense_14_fwork_d0,
        q0 => dense_14_fwork_q0,
        address1 => dense_14_fwork_address1,
        ce1 => dense_14_fwork_ce1,
        q1 => dense_14_fwork_q1);

    dense_14_kernel_arra_U : component k2c_dot_1_dense_1tde
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_14_kernel_arra_address0,
        ce0 => dense_14_kernel_arra_ce0,
        q0 => dense_14_kernel_arra_q0);

    permA_U : component k2c_dot_permA
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => permA_address0,
        ce0 => permA_ce0,
        we0 => permA_we0,
        d0 => permA_d0,
        q0 => permA_q0,
        address1 => permA_address1,
        ce1 => permA_ce1,
        we1 => permA_we1,
        d1 => p_read2,
        q1 => permA_q1);

    permB_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => permB_address0,
        ce0 => permB_ce0,
        we0 => permB_we0,
        d0 => permB_d0,
        q0 => permB_q0);

    freeA_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => freeA_address0,
        ce0 => freeA_ce0,
        we0 => freeA_we0,
        d0 => freeA_d0,
        q0 => freeA_q0);

    freeB_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => freeB_address0,
        ce0 => freeB_ce0,
        we0 => freeB_we0,
        d0 => freeB_d0,
        q0 => freeB_q0);

    newshpA_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => newshpA_address0,
        ce0 => newshpA_ce0,
        we0 => newshpA_we0,
        d0 => dense_13_output_shap_q0,
        q0 => newshpA_q0);

    newshpB_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => newshpB_address0,
        ce0 => newshpB_ce0,
        we0 => newshpB_we0,
        d0 => dense_14_kernel_shap_q0,
        q0 => newshpB_q0);

    Asub_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Asub_address0,
        ce0 => Asub_ce0,
        we0 => Asub_we0,
        d0 => Asub_d0,
        q0 => Asub_q0);

    Bsub_U : component k2c_dot_permB
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Bsub_address0,
        ce0 => Bsub_ce0,
        we0 => Bsub_we0,
        d0 => Bsub_d0,
        q0 => Bsub_q0);

    grp_k2c_idx2sub_fu_824 : component k2c_idx2sub
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_idx2sub_fu_824_ap_start,
        ap_done => grp_k2c_idx2sub_fu_824_ap_done,
        ap_idle => grp_k2c_idx2sub_fu_824_ap_idle,
        ap_ready => grp_k2c_idx2sub_fu_824_ap_ready,
        idx => grp_k2c_idx2sub_fu_824_idx,
        sub_address0 => grp_k2c_idx2sub_fu_824_sub_address0,
        sub_ce0 => grp_k2c_idx2sub_fu_824_sub_ce0,
        sub_we0 => grp_k2c_idx2sub_fu_824_sub_we0,
        sub_d0 => grp_k2c_idx2sub_fu_824_sub_d0,
        shape_address0 => grp_k2c_idx2sub_fu_824_shape_address0,
        shape_ce0 => grp_k2c_idx2sub_fu_824_shape_ce0,
        shape_q0 => grp_k2c_idx2sub_fu_824_shape_q0,
        ndim => grp_k2c_idx2sub_fu_824_ndim);

    grp_k2c_sub2idx_fu_836 : component k2c_sub2idx
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_sub2idx_fu_836_ap_start,
        ap_done => grp_k2c_sub2idx_fu_836_ap_done,
        ap_idle => grp_k2c_sub2idx_fu_836_ap_idle,
        ap_ready => grp_k2c_sub2idx_fu_836_ap_ready,
        sub_address0 => grp_k2c_sub2idx_fu_836_sub_address0,
        sub_ce0 => grp_k2c_sub2idx_fu_836_sub_ce0,
        sub_q0 => grp_k2c_sub2idx_fu_836_sub_q0,
        shape_address0 => grp_k2c_sub2idx_fu_836_shape_address0,
        shape_ce0 => grp_k2c_sub2idx_fu_836_shape_ce0,
        shape_q0 => grp_k2c_sub2idx_fu_836_shape_q0,
        ndim => grp_k2c_sub2idx_fu_836_ndim,
        ap_return => grp_k2c_sub2idx_fu_836_ap_return);

    sample_fadd_32ns_hbi_U64 : component sample_fadd_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_array_load_reg_1954,
        din1 => tmp_s_reg_1949,
        ce => ap_const_logic_1,
        dout => grp_fu_844_p2);

    sample_fmul_32ns_ibs_U65 : component sample_fmul_32ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dense_14_fwork_load_reg_1939,
        din1 => dense_14_fwork_load_1_reg_1944,
        ce => ap_const_logic_1,
        dout => grp_fu_848_p2);

    sample_udiv_64ns_udo_U66 : component sample_udiv_64ns_udo
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 10,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_955_ap_start,
        done => grp_fu_955_ap_done,
        din0 => A_numel_read,
        din1 => grp_fu_955_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_955_p2);

    sample_mul_57ns_6vdy_U67 : component sample_mul_57ns_6vdy
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 57,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1241_p0,
        din1 => free_axesA_reg_1545,
        ce => ap_const_logic_1,
        dout => grp_fu_1241_p2);

    sample_mul_mul_14wdI_U68 : component sample_mul_mul_14wdI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        din0 => tmp_29_reg_1535,
        din1 => inneridx_fu_1404_p1,
        dout => inneridx_fu_1404_p2);

    sample_mul_mul_8nxdS_U69 : component sample_mul_mul_8nxdS
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        din0 => tmp_1_11_fu_1409_p0,
        din1 => free_axesB_cast6_reg_1561,
        dout => tmp_1_11_fu_1409_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_k2c_idx2sub_fu_824_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_idx2sub_fu_824_ap_start_reg <= ap_const_logic_0;
            else
                if ((((exitcond10_fu_1230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101)) or ((exitcond9_fu_1184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state92)))) then 
                    grp_k2c_idx2sub_fu_824_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_idx2sub_fu_824_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_idx2sub_fu_824_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_sub2idx_fu_836_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_sub2idx_fu_836_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                    grp_k2c_sub2idx_fu_836_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_sub2idx_fu_836_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_sub2idx_fu_836_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count_1_1_reg_615_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_880_p2 = ap_const_lv1_1) and (exitcond1_1_fu_875_p2 = ap_const_lv1_0) and (exitcond1_fu_852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                count_1_1_reg_615 <= ap_phi_mux_count_1_phi_fu_607_p4;
            elsif (((tmp_1_reg_1482 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                count_1_1_reg_615 <= count_4_1_fu_885_p2;
            end if; 
        end if;
    end process;

    count_1_reg_603_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                if ((tmp_9_fu_857_p2 = ap_const_lv1_1)) then 
                    count_1_reg_603 <= count_reg_578;
                elsif ((tmp_9_fu_857_p2 = ap_const_lv1_0)) then 
                    count_1_reg_603 <= count_4_fu_862_p2;
                end if;
            end if; 
        end if;
    end process;

    count_2_reg_627_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((exitcond1_1_fu_875_p2 = ap_const_lv1_1) or (exitcond1_fu_852_p2 = ap_const_lv1_1)))) then 
                count_2_reg_627 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                count_2_reg_627 <= count_5_1_reg_1515;
            end if; 
        end if;
    end process;

    count_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                count_reg_578 <= count_1_1_reg_615;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                count_reg_578 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_10_reg_755_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_1184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then 
                i_10_reg_755 <= ap_const_lv64_0;
            elsif (((grp_k2c_sub2idx_fu_836_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
                i_10_reg_755 <= i_24_reg_1815;
            end if; 
        end if;
    end process;

    i_11_reg_780_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_1296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
                i_11_reg_780 <= i_22_fu_1301_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
                i_11_reg_780 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_14_reg_791_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_1296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
                i_14_reg_791 <= ap_const_lv64_0;
            elsif (((exitcond_fu_1339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
                i_14_reg_791 <= i_25_reg_1888;
            end if; 
        end if;
    end process;

    i_1_reg_638_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((exitcond1_1_fu_875_p2 = ap_const_lv1_1) or (exitcond1_fu_852_p2 = ap_const_lv1_1)))) then 
                i_1_reg_638 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_638 <= i_15_1_reg_1520;
            end if; 
        end if;
    end process;

    i_4_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                i_4_reg_660 <= i_18_1_reg_1609;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                i_4_reg_660 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_5_reg_672_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) and ((exitcond8_1_fu_1026_p2 = ap_const_lv1_1) or (exitcond8_reg_1587 = ap_const_lv1_1)))) then 
                i_5_reg_672 <= i_16_cast_reg_1577;
            elsif (((tmp_2_1_fu_1058_p2 = ap_const_lv1_1) and (tmp_2_fu_1042_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
                i_5_reg_672 <= i_19_1_fu_1063_p2;
            end if; 
        end if;
    end process;

    i_7_reg_681_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and ((tmp_2_1_fu_1058_p2 = ap_const_lv1_0) or (tmp_2_fu_1042_p2 = ap_const_lv1_0)))) then 
                i_7_reg_681 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                i_7_reg_681 <= i_21_1_reg_1652;
            end if; 
        end if;
    end process;

    i_8_reg_706_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state80) and ((tmp_3_1_fu_1103_p2 = ap_const_lv1_0) or (tmp_3_reg_1630 = ap_const_lv1_0)))) then 
                i_8_reg_706 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                i_8_reg_706 <= i_22_1_reg_1694;
            end if; 
        end if;
    end process;

    i_9_reg_718_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state84) and ((exitcond13_1_fu_1141_p2 = ap_const_lv1_1) or (exitcond13_reg_1667 = ap_const_lv1_1)))) then 
                i_9_reg_718 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                i_9_reg_718 <= i_23_1_reg_1736;
            end if; 
        end if;
    end process;

    i_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_590 <= i_12_1_reg_1491;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_590 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_s_reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state89) and ((exitcond12_1_fu_1173_p2 = ap_const_lv1_1) or (exitcond12_reg_1709 = ap_const_lv1_1)))) then 
                i_s_reg_730 <= ap_const_lv64_0;
            elsif (((grp_k2c_sub2idx_fu_836_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state100))) then 
                i_s_reg_730 <= i_23_reg_1749;
            end if; 
        end if;
    end process;

    j_3_reg_693_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and ((tmp_2_1_fu_1058_p2 = ap_const_lv1_0) or (tmp_2_fu_1042_p2 = ap_const_lv1_0)))) then 
                j_3_reg_693 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                j_3_reg_693 <= j_9_1_reg_1657;
            end if; 
        end if;
    end process;

    j_4_reg_743_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                j_4_reg_743 <= j_10_1_reg_1792;
            elsif (((grp_k2c_idx2sub_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                j_4_reg_743 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_5_reg_768_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
                j_5_reg_768 <= j_11_1_reg_1852;
            elsif (((grp_k2c_idx2sub_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then 
                j_5_reg_768 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_s_reg_813_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
                j_s_reg_813 <= ap_const_lv57_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state124)) then 
                j_s_reg_813 <= j_reg_1924;
            end if; 
        end if;
    end process;

    k_reg_802_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1368_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state114))) then 
                k_reg_802 <= k_1_reg_1906;
            elsif (((tmp_7_fu_1315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
                k_reg_802 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state99)) then
                A_array_load_reg_1807 <= A_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_1368_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state114))) then
                C_array_addr_3_reg_1934 <= sum2_cast_fu_1399_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                C_array_load_reg_1954 <= C_array_q0;
                tmp_s_reg_1949 <= grp_fu_848_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_897_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    count_3_cast_reg_1502(2 downto 0) <= count_3_cast_fu_920_p1(2 downto 0);
                    i_15_s_reg_1507(63 downto 1) <= i_15_s_fu_924_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_1_fu_930_p2 = ap_const_lv1_0) and (exitcond2_fu_897_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                count_5_1_reg_1515 <= count_5_1_fu_935_p2;
                i_15_1_reg_1520 <= i_15_1_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state113))) then
                dense_14_fwork_addr_2_reg_1911 <= sum6_cast_fu_1355_p1(13 - 1 downto 0);
                tmp_1_11_reg_1916 <= tmp_1_11_fu_1409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then
                dense_14_fwork_load_1_reg_1944 <= dense_14_fwork_q1;
                dense_14_fwork_load_reg_1939 <= dense_14_fwork_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then
                dense_14_kernel_arra_2_reg_1867 <= dense_14_kernel_arra_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                exitcond11_reg_1765 <= exitcond11_fu_1203_p2;
                    j_4_cast_reg_1760(2 downto 0) <= j_4_cast_fu_1198_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                exitcond12_reg_1709 <= exitcond12_fu_1157_p2;
                    i_9_cast_reg_1704(2 downto 0) <= i_9_cast_fu_1152_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                exitcond13_reg_1667 <= exitcond13_fu_1125_p2;
                    i_8_cast_reg_1662(2 downto 0) <= i_8_cast_fu_1120_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                exitcond14_reg_1825 <= exitcond14_fu_1250_p2;
                    j_5_cast_reg_1820(2 downto 0) <= j_5_cast_fu_1245_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                exitcond8_reg_1587 <= exitcond8_fu_1010_p2;
                    i_4_cast_reg_1582(2 downto 0) <= i_4_cast_fu_1005_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                free_axesA_reg_1545 <= grp_fu_955_p2;
                    free_axesB_3_reg_1556(56 downto 0) <= free_axesB_3_fu_969_p1(56 downto 0);
                free_axesB_cast5_reg_1566 <= B_numel_read(13 downto 7);
                free_axesB_cast6_reg_1561 <= B_numel_read(20 downto 7);
                free_axesB_reg_1551 <= B_numel_read(63 downto 7);
                i_16_cast_reg_1577 <= i_16_cast_fu_999_p2;
                i_16_reg_1571 <= i_16_fu_994_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_12_1_reg_1491 <= i_12_1_fu_891_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    i_12_s_reg_1474(63 downto 1) <= i_12_s_fu_869_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_1_fu_1026_p2 = ap_const_lv1_0) and (exitcond8_reg_1587 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                i_18_1_reg_1609 <= i_18_1_fu_1031_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_reg_1587 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    i_18_cast_reg_1596(2 downto 1) <= i_18_cast_fu_1021_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_1_fu_1103_p2 = ap_const_lv1_1) and (tmp_3_reg_1630 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                i_21_1_reg_1652 <= i_21_1_fu_1108_p2;
                j_9_1_reg_1657 <= j_9_1_fu_1114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_1630 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    i_21_cast_reg_1639(2 downto 0) <= i_21_cast_fu_1084_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond13_1_fu_1141_p2 = ap_const_lv1_0) and (exitcond13_reg_1667 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                i_22_1_reg_1694 <= i_22_1_fu_1146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond13_reg_1667 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    i_22_cast_reg_1681(2 downto 1) <= i_22_cast_fu_1136_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond12_1_fu_1173_p2 = ap_const_lv1_0) and (exitcond12_reg_1709 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                i_23_1_reg_1736 <= i_23_1_fu_1178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond12_reg_1709 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    i_23_cast_reg_1723(2 downto 1) <= i_23_cast_fu_1168_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                i_23_reg_1749 <= i_23_fu_1189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                i_24_reg_1815 <= i_24_fu_1235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then
                i_25_reg_1888 <= i_25_fu_1320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                    i_7_cast_reg_1625(2 downto 0) <= i_7_cast_fu_1069_p1(2 downto 0);
                tmp_3_reg_1630 <= tmp_3_fu_1073_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_1315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                inneridx_reg_1898 <= inneridx_fu_1404_p2;
                outrowidx_reg_1893 <= outrowidx_fu_1326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_1_fu_1219_p2 = ap_const_lv1_0) and (exitcond11_reg_1765 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                j_10_1_reg_1792 <= j_10_1_fu_1224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_reg_1765 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    j_10_cast_reg_1779(2 downto 1) <= j_10_cast_fu_1214_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10_1_fu_1266_p2 = ap_const_lv1_0) and (exitcond14_reg_1825 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state105))) then
                j_11_1_reg_1852 <= j_11_1_fu_1271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond14_reg_1825 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state105))) then
                    j_11_cast_reg_1839(2 downto 1) <= j_11_cast_fu_1261_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state114)) then
                j_reg_1924 <= j_fu_1373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state113)) then
                k_1_reg_1906 <= k_1_fu_1344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_1_fu_875_p2 = ap_const_lv1_0) and (exitcond1_fu_852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_1_reg_1482 <= tmp_1_fu_880_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_29_reg_1535 <= tmp_29_fu_947_p1;
                tmp_30_reg_1540 <= tmp_30_fu_951_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_1184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                tmp_33_reg_1754 <= tmp_33_fu_1195_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state123)) then
                tmp_4_reg_1959 <= grp_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state110)) then
                tmp_6_reg_1872 <= grp_fu_1241_p2;
            end if;
        end if;
    end process;
    i_12_s_reg_1474(0) <= '1';
    count_3_cast_reg_1502(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_15_s_reg_1507(0) <= '1';
    free_axesB_3_reg_1556(63 downto 57) <= "0000000";
    i_4_cast_reg_1582(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_18_cast_reg_1596(0) <= '1';
    i_18_cast_reg_1596(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_7_cast_reg_1625(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_21_cast_reg_1639(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_8_cast_reg_1662(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_22_cast_reg_1681(0) <= '1';
    i_22_cast_reg_1681(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_9_cast_reg_1704(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_23_cast_reg_1723(0) <= '1';
    i_23_cast_reg_1723(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_4_cast_reg_1760(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_10_cast_reg_1779(0) <= '1';
    j_10_cast_reg_1779(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_5_cast_reg_1820(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_11_cast_reg_1839(0) <= '1';
    j_11_cast_reg_1839(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_852_p2, exitcond1_1_fu_875_p2, ap_CS_fsm_state5, exitcond2_fu_897_p2, exitcond2_1_fu_930_p2, exitcond8_reg_1587, ap_CS_fsm_state76, exitcond8_1_fu_1026_p2, ap_CS_fsm_state78, tmp_2_fu_1042_p2, tmp_2_1_fu_1058_p2, tmp_3_reg_1630, ap_CS_fsm_state80, tmp_3_1_fu_1103_p2, ap_CS_fsm_state82, exitcond13_fu_1125_p2, exitcond13_reg_1667, ap_CS_fsm_state84, exitcond13_1_fu_1141_p2, ap_CS_fsm_state87, exitcond12_fu_1157_p2, exitcond12_reg_1709, ap_CS_fsm_state89, exitcond12_1_fu_1173_p2, ap_CS_fsm_state92, exitcond9_fu_1184_p2, ap_CS_fsm_state94, exitcond11_fu_1203_p2, exitcond11_reg_1765, ap_CS_fsm_state96, exitcond11_1_fu_1219_p2, ap_CS_fsm_state101, ap_CS_fsm_state103, exitcond14_fu_1250_p2, exitcond14_reg_1825, ap_CS_fsm_state105, exitcond10_1_fu_1266_p2, ap_CS_fsm_state111, ap_CS_fsm_state112, tmp_7_fu_1315_p2, ap_CS_fsm_state113, exitcond_fu_1339_p2, ap_CS_fsm_state114, exitcond3_fu_1368_p2, grp_k2c_idx2sub_fu_824_ap_done, grp_k2c_sub2idx_fu_836_ap_done, ap_CS_fsm_state100, ap_CS_fsm_state93, ap_CS_fsm_state109, ap_CS_fsm_state102, exitcond5_fu_1296_p2, exitcond10_fu_1230_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((exitcond1_1_fu_875_p2 = ap_const_lv1_1) or (exitcond1_fu_852_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((exitcond2_1_fu_930_p2 = ap_const_lv1_0) and (exitcond2_fu_897_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and ((exitcond8_1_fu_1026_p2 = ap_const_lv1_1) or (exitcond8_reg_1587 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and ((tmp_2_1_fu_1058_p2 = ap_const_lv1_0) or (tmp_2_fu_1042_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state80) and ((tmp_3_1_fu_1103_p2 = ap_const_lv1_0) or (tmp_3_reg_1630 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state82 => 
                if (((exitcond13_fu_1125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and ((exitcond13_1_fu_1141_p2 = ap_const_lv1_1) or (exitcond13_reg_1667 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state87 => 
                if (((exitcond12_fu_1157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state89) and ((exitcond12_1_fu_1173_p2 = ap_const_lv1_1) or (exitcond12_reg_1709 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state92 => 
                if (((exitcond9_fu_1184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state93 => 
                if (((grp_k2c_idx2sub_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                if (((exitcond11_fu_1203_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state96) and ((exitcond11_1_fu_1219_p2 = ap_const_lv1_1) or (exitcond11_reg_1765 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                if (((grp_k2c_sub2idx_fu_836_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state100))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state101 => 
                if (((exitcond10_fu_1230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state102 => 
                if (((grp_k2c_idx2sub_fu_824_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state103 => 
                if (((exitcond14_fu_1250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state105) and ((exitcond10_1_fu_1266_p2 = ap_const_lv1_1) or (exitcond14_reg_1825 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state108;
                else
                    ap_NS_fsm <= ap_ST_fsm_state106;
                end if;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                if (((grp_k2c_sub2idx_fu_836_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                if (((exitcond5_fu_1296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state111;
                end if;
            when ap_ST_fsm_state112 => 
                if (((tmp_7_fu_1315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state113;
                end if;
            when ap_ST_fsm_state113 => 
                if (((exitcond_fu_1339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state113))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state114;
                end if;
            when ap_ST_fsm_state114 => 
                if (((exitcond3_fu_1368_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state114))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_state115;
                end if;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_array_address0 <= i_s_reg_730(7 - 1 downto 0);

    A_array_ce0_assign_proc : process(ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            A_array_ce0 <= ap_const_logic_1;
        else 
            A_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Asub_address0_assign_proc : process(ap_CS_fsm_state95, ap_CS_fsm_state97, j_5_cast_reg_1820, j_11_cast_reg_1839, ap_CS_fsm_state105, permA_q0, permA_q1, grp_k2c_idx2sub_fu_824_sub_address0, grp_k2c_sub2idx_fu_836_sub_address0, ap_CS_fsm_state93, ap_CS_fsm_state109, ap_CS_fsm_state107)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            Asub_address0 <= j_11_cast_reg_1839(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            Asub_address0 <= j_5_cast_reg_1820(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            Asub_address0 <= permA_q1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            Asub_address0 <= permA_q0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            Asub_address0 <= grp_k2c_sub2idx_fu_836_sub_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            Asub_address0 <= grp_k2c_idx2sub_fu_824_sub_address0;
        else 
            Asub_address0 <= "XXX";
        end if; 
    end process;


    Asub_ce0_assign_proc : process(ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state105, grp_k2c_idx2sub_fu_824_sub_ce0, grp_k2c_sub2idx_fu_836_sub_ce0, ap_CS_fsm_state93, ap_CS_fsm_state109, ap_CS_fsm_state107)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            Asub_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            Asub_ce0 <= grp_k2c_sub2idx_fu_836_sub_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            Asub_ce0 <= grp_k2c_idx2sub_fu_824_sub_ce0;
        else 
            Asub_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Asub_d0_assign_proc : process(ap_CS_fsm_state105, Bsub_q0, grp_k2c_idx2sub_fu_824_sub_d0, ap_CS_fsm_state93, ap_CS_fsm_state107)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state105))) then 
            Asub_d0 <= Bsub_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            Asub_d0 <= grp_k2c_idx2sub_fu_824_sub_d0;
        else 
            Asub_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Asub_we0_assign_proc : process(exitcond14_reg_1825, ap_CS_fsm_state105, grp_k2c_idx2sub_fu_824_sub_we0, ap_CS_fsm_state93, ap_CS_fsm_state107)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or ((exitcond14_reg_1825 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state105)))) then 
            Asub_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            Asub_we0 <= grp_k2c_idx2sub_fu_824_sub_we0;
        else 
            Asub_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Bsub_addr_9_gep_fu_515_p3 <= permB_q0(3 - 1 downto 0);

    Bsub_address0_assign_proc : process(j_4_cast_reg_1760, j_10_cast_reg_1779, ap_CS_fsm_state96, ap_CS_fsm_state104, Bsub_addr_9_gep_fu_515_p3, ap_CS_fsm_state106, permB_q0, grp_k2c_idx2sub_fu_824_sub_address0, grp_k2c_sub2idx_fu_836_sub_address0, ap_CS_fsm_state100, ap_CS_fsm_state98, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            Bsub_address0 <= Bsub_addr_9_gep_fu_515_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            Bsub_address0 <= permB_q0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            Bsub_address0 <= j_10_cast_reg_1779(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            Bsub_address0 <= j_4_cast_reg_1760(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            Bsub_address0 <= grp_k2c_sub2idx_fu_836_sub_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            Bsub_address0 <= grp_k2c_idx2sub_fu_824_sub_address0;
        else 
            Bsub_address0 <= "XXX";
        end if; 
    end process;


    Bsub_ce0_assign_proc : process(ap_CS_fsm_state96, ap_CS_fsm_state104, ap_CS_fsm_state106, grp_k2c_idx2sub_fu_824_sub_ce0, grp_k2c_sub2idx_fu_836_sub_ce0, ap_CS_fsm_state100, ap_CS_fsm_state98, ap_CS_fsm_state102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state96))) then 
            Bsub_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            Bsub_ce0 <= grp_k2c_sub2idx_fu_836_sub_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            Bsub_ce0 <= grp_k2c_idx2sub_fu_824_sub_ce0;
        else 
            Bsub_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bsub_d0_assign_proc : process(ap_CS_fsm_state96, Asub_q0, grp_k2c_idx2sub_fu_824_sub_d0, ap_CS_fsm_state98, ap_CS_fsm_state102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96))) then 
            Bsub_d0 <= Asub_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            Bsub_d0 <= grp_k2c_idx2sub_fu_824_sub_d0;
        else 
            Bsub_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Bsub_we0_assign_proc : process(exitcond11_reg_1765, ap_CS_fsm_state96, grp_k2c_idx2sub_fu_824_sub_we0, ap_CS_fsm_state98, ap_CS_fsm_state102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state98) or ((exitcond11_reg_1765 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96)))) then 
            Bsub_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            Bsub_we0 <= grp_k2c_idx2sub_fu_824_sub_we0;
        else 
            Bsub_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_array_address0_assign_proc : process(ap_CS_fsm_state111, C_array_addr_3_reg_1934, ap_CS_fsm_state124, i_11_cast_fu_1291_p1, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state117))) then 
            C_array_address0 <= C_array_addr_3_reg_1934;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            C_array_address0 <= i_11_cast_fu_1291_p1(5 - 1 downto 0);
        else 
            C_array_address0 <= "XXXXX";
        end if; 
    end process;


    C_array_ce0_assign_proc : process(ap_CS_fsm_state111, ap_CS_fsm_state124, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state117))) then 
            C_array_ce0 <= ap_const_logic_1;
        else 
            C_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_array_d0_assign_proc : process(ap_CS_fsm_state111, tmp_4_reg_1959, ap_CS_fsm_state124)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state124)) then 
            C_array_d0 <= tmp_4_reg_1959;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            C_array_d0 <= ap_const_lv32_0;
        else 
            C_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_array_we0_assign_proc : process(ap_CS_fsm_state111, exitcond5_fu_1296_p2, ap_CS_fsm_state124)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state124) or ((exitcond5_fu_1296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111)))) then 
            C_array_we0 <= ap_const_logic_1;
        else 
            C_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state112, tmp_7_fu_1315_p2)
    begin
        if ((((tmp_7_fu_1315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state112)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_count_1_phi_fu_607_p4_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_852_p2, count_reg_578, count_4_fu_862_p2, tmp_9_fu_857_p2)
    begin
        if (((exitcond1_fu_852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
            if ((tmp_9_fu_857_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_count_1_phi_fu_607_p4 <= count_reg_578;
            elsif ((tmp_9_fu_857_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_count_1_phi_fu_607_p4 <= count_4_fu_862_p2;
            else 
                ap_phi_mux_count_1_phi_fu_607_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_count_1_phi_fu_607_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_count_3_phi_fu_653_p4_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_897_p2, count_2_reg_627, count_5_fu_913_p2, tmp_fu_902_p2)
    begin
        if (((exitcond2_fu_897_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
            if ((tmp_fu_902_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_count_3_phi_fu_653_p4 <= count_2_reg_627;
            elsif ((tmp_fu_902_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_count_3_phi_fu_653_p4 <= count_5_fu_913_p2;
            else 
                ap_phi_mux_count_3_phi_fu_653_p4 <= "XXX";
            end if;
        else 
            ap_phi_mux_count_3_phi_fu_653_p4 <= "XXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state112, tmp_7_fu_1315_p2)
    begin
        if (((tmp_7_fu_1315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    count_2_cast4_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_2_reg_627),64));
    count_3_cast_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_count_3_phi_fu_653_p4),64));
    count_4_1_fu_885_p2 <= std_logic_vector(unsigned(count_1_reg_603) + unsigned(ap_const_lv64_1));
    count_4_fu_862_p2 <= std_logic_vector(unsigned(count_reg_578) + unsigned(ap_const_lv64_1));
    count_5_1_fu_935_p2 <= std_logic_vector(unsigned(ap_phi_mux_count_3_phi_fu_653_p4) + unsigned(ap_const_lv3_1));
    count_5_fu_913_p2 <= std_logic_vector(unsigned(count_2_reg_627) + unsigned(ap_const_lv3_1));
    dense_13_output_shap_5_gep_fu_318_p3 <= permA_q1(3 - 1 downto 0);

    dense_13_output_shap_address0_assign_proc : process(p_read2, ap_CS_fsm_state5, ap_CS_fsm_state83, dense_13_output_shap_5_gep_fu_318_p3, ap_CS_fsm_state85, permA_q1, grp_k2c_idx2sub_fu_824_shape_address0, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            dense_13_output_shap_address0 <= dense_13_output_shap_5_gep_fu_318_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            dense_13_output_shap_address0 <= permA_q1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_13_output_shap_address0 <= p_read2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            dense_13_output_shap_address0 <= grp_k2c_idx2sub_fu_824_shape_address0;
        else 
            dense_13_output_shap_address0 <= "XXX";
        end if; 
    end process;


    dense_13_output_shap_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state83, ap_CS_fsm_state85, grp_k2c_idx2sub_fu_824_shape_ce0, ap_CS_fsm_state93)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dense_13_output_shap_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            dense_13_output_shap_ce0 <= grp_k2c_idx2sub_fu_824_shape_ce0;
        else 
            dense_13_output_shap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_14_fwork_address0_assign_proc : process(dense_14_fwork_addr_2_reg_1911, ap_CS_fsm_state114, grp_k2c_sub2idx_fu_836_ap_return, ap_CS_fsm_state100, ap_CS_fsm_state109, sum_cast_fu_1286_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            dense_14_fwork_address0 <= dense_14_fwork_addr_2_reg_1911;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            dense_14_fwork_address0 <= sum_cast_fu_1286_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            dense_14_fwork_address0 <= grp_k2c_sub2idx_fu_836_ap_return(13 - 1 downto 0);
        else 
            dense_14_fwork_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    dense_14_fwork_address1 <= sum7_cast_fu_1389_p1(13 - 1 downto 0);

    dense_14_fwork_ce0_assign_proc : process(ap_CS_fsm_state114, grp_k2c_sub2idx_fu_836_ap_done, ap_CS_fsm_state100, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state114) or ((grp_k2c_sub2idx_fu_836_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109)) or ((grp_k2c_sub2idx_fu_836_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state100)))) then 
            dense_14_fwork_ce0 <= ap_const_logic_1;
        else 
            dense_14_fwork_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_14_fwork_ce1_assign_proc : process(ap_CS_fsm_state114)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            dense_14_fwork_ce1 <= ap_const_logic_1;
        else 
            dense_14_fwork_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_14_fwork_d0_assign_proc : process(A_array_load_reg_1807, dense_14_kernel_arra_2_reg_1867, ap_CS_fsm_state100, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            dense_14_fwork_d0 <= dense_14_kernel_arra_2_reg_1867;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            dense_14_fwork_d0 <= A_array_load_reg_1807;
        else 
            dense_14_fwork_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_14_fwork_we0_assign_proc : process(grp_k2c_sub2idx_fu_836_ap_done, ap_CS_fsm_state100, ap_CS_fsm_state109)
    begin
        if ((((grp_k2c_sub2idx_fu_836_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109)) or ((grp_k2c_sub2idx_fu_836_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state100)))) then 
            dense_14_fwork_we0 <= ap_const_logic_1;
        else 
            dense_14_fwork_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_14_kernel_arra_address0 <= i_10_reg_755(12 - 1 downto 0);

    dense_14_kernel_arra_ce0_assign_proc : process(ap_CS_fsm_state105)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            dense_14_kernel_arra_ce0 <= ap_const_logic_1;
        else 
            dense_14_kernel_arra_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_14_kernel_shap_3_gep_fu_375_p3 <= permB_q0(3 - 1 downto 0);

    dense_14_kernel_shap_address0_assign_proc : process(ap_CS_fsm_state88, dense_14_kernel_shap_3_gep_fu_375_p3, ap_CS_fsm_state90, permB_q0, grp_k2c_idx2sub_fu_824_shape_address0, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            dense_14_kernel_shap_address0 <= dense_14_kernel_shap_3_gep_fu_375_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            dense_14_kernel_shap_address0 <= permB_q0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            dense_14_kernel_shap_address0 <= grp_k2c_idx2sub_fu_824_shape_address0;
        else 
            dense_14_kernel_shap_address0 <= "XXX";
        end if; 
    end process;


    dense_14_kernel_shap_ce0_assign_proc : process(ap_CS_fsm_state88, ap_CS_fsm_state90, grp_k2c_idx2sub_fu_824_shape_ce0, ap_CS_fsm_state102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            dense_14_kernel_shap_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            dense_14_kernel_shap_ce0 <= grp_k2c_idx2sub_fu_824_shape_ce0;
        else 
            dense_14_kernel_shap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_1_fu_1266_p2 <= "1" when (j_11_cast_fu_1261_p1 = B_dim) else "0";
    exitcond10_fu_1230_p2 <= "1" when (i_10_reg_755 = B_numel_read) else "0";
    exitcond11_1_fu_1219_p2 <= "1" when (j_10_cast_fu_1214_p1 = A_dim) else "0";
    exitcond11_fu_1203_p2 <= "1" when (j_4_cast_fu_1198_p1 = A_dim) else "0";
    exitcond12_1_fu_1173_p2 <= "1" when (i_23_cast_fu_1168_p1 = B_dim) else "0";
    exitcond12_fu_1157_p2 <= "1" when (i_9_cast_fu_1152_p1 = B_dim) else "0";
    exitcond13_1_fu_1141_p2 <= "1" when (i_22_cast_fu_1136_p1 = A_dim) else "0";
    exitcond13_fu_1125_p2 <= "1" when (i_8_cast_fu_1120_p1 = A_dim) else "0";
    exitcond14_fu_1250_p2 <= "1" when (j_5_cast_fu_1245_p1 = B_dim) else "0";
    exitcond1_1_fu_875_p2 <= "1" when (i_12_s_fu_869_p2 = A_dim) else "0";
    exitcond1_fu_852_p2 <= "1" when (i_reg_590 = A_dim) else "0";
    exitcond2_1_fu_930_p2 <= "1" when (i_15_s_fu_924_p2 = B_dim) else "0";
    exitcond2_fu_897_p2 <= "1" when (i_1_reg_638 = B_dim) else "0";
    exitcond3_fu_1368_p2 <= "1" when (j_s_reg_813 = free_axesB_reg_1551) else "0";
    exitcond5_fu_1296_p2 <= "1" when (i_11_cast_fu_1291_p1 = tmp_6_reg_1872) else "0";
    exitcond8_1_fu_1026_p2 <= "1" when (i_18_cast_fu_1021_p1 = i_16_reg_1571) else "0";
    exitcond8_fu_1010_p2 <= "1" when (i_4_cast_fu_1005_p1 = i_16_reg_1571) else "0";
    exitcond9_fu_1184_p2 <= "1" when (i_s_reg_730 = A_numel_read) else "0";
    exitcond_fu_1339_p2 <= "1" when (k_cast_fu_1335_p1 = tmp_30_reg_1540) else "0";

    freeA_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, i_4_cast_fu_1005_p1, ap_CS_fsm_state75, i_18_cast_fu_1021_p1, ap_CS_fsm_state76, count_reg_578, count_1_reg_603)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            freeA_address0 <= i_18_cast_fu_1021_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            freeA_address0 <= i_4_cast_fu_1005_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            freeA_address0 <= count_1_reg_603(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            freeA_address0 <= count_reg_578(3 - 1 downto 0);
        else 
            freeA_address0 <= "XXX";
        end if; 
    end process;


    freeA_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state75, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            freeA_ce0 <= ap_const_logic_1;
        else 
            freeA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    freeA_d0_assign_proc : process(i_12_s_reg_1474, ap_CS_fsm_state2, ap_CS_fsm_state3, i_reg_590)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            freeA_d0 <= i_12_s_reg_1474;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            freeA_d0 <= i_reg_590;
        else 
            freeA_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    freeA_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_852_p2, tmp_1_reg_1482, ap_CS_fsm_state3, tmp_9_fu_857_p2)
    begin
        if ((((tmp_1_reg_1482 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_9_fu_857_p2 = ap_const_lv1_0) and (exitcond1_fu_852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            freeA_we0 <= ap_const_logic_1;
        else 
            freeA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    freeB_address0_assign_proc : process(count_3_cast_reg_1502, ap_CS_fsm_state5, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state6, j_3_reg_693, count_2_cast4_fu_908_p1, j_9_cast_fu_1098_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            freeB_address0 <= j_9_cast_fu_1098_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            freeB_address0 <= j_3_reg_693(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            freeB_address0 <= count_3_cast_reg_1502(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            freeB_address0 <= count_2_cast4_fu_908_p1(3 - 1 downto 0);
        else 
            freeB_address0 <= "XXX";
        end if; 
    end process;


    freeB_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            freeB_ce0 <= ap_const_logic_1;
        else 
            freeB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    freeB_d0_assign_proc : process(ap_CS_fsm_state5, i_15_s_reg_1507, ap_CS_fsm_state6, i_1_reg_638)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            freeB_d0 <= i_15_s_reg_1507;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            freeB_d0 <= i_1_reg_638;
        else 
            freeB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    freeB_we0_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_897_p2, ap_CS_fsm_state6, tmp_fu_902_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((tmp_fu_902_p2 = ap_const_lv1_0) and (exitcond2_fu_897_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            freeB_we0 <= ap_const_logic_1;
        else 
            freeB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    free_axesB_3_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(free_axesB_fu_960_p4),64));
    free_axesB_fu_960_p4 <= B_numel_read(63 downto 7);
    grp_fu_1241_p0 <= free_axesB_3_reg_1556(57 - 1 downto 0);

    grp_fu_955_ap_start_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_955_ap_start <= ap_const_logic_1;
        else 
            grp_fu_955_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_955_p1 <= dense_13_output_shap_q0(10 - 1 downto 0);
    grp_k2c_idx2sub_fu_824_ap_start <= grp_k2c_idx2sub_fu_824_ap_start_reg;

    grp_k2c_idx2sub_fu_824_idx_assign_proc : process(i_s_reg_730, ap_CS_fsm_state93, i_10_reg_755, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_k2c_idx2sub_fu_824_idx <= i_10_reg_755;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_k2c_idx2sub_fu_824_idx <= i_s_reg_730;
        else 
            grp_k2c_idx2sub_fu_824_idx <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_idx2sub_fu_824_ndim_assign_proc : process(A_dim, B_dim, ap_CS_fsm_state93, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_k2c_idx2sub_fu_824_ndim <= B_dim;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_k2c_idx2sub_fu_824_ndim <= A_dim;
        else 
            grp_k2c_idx2sub_fu_824_ndim <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_idx2sub_fu_824_shape_q0_assign_proc : process(dense_13_output_shap_q0, dense_14_kernel_shap_q0, ap_CS_fsm_state93, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_k2c_idx2sub_fu_824_shape_q0 <= dense_14_kernel_shap_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_k2c_idx2sub_fu_824_shape_q0 <= dense_13_output_shap_q0;
        else 
            grp_k2c_idx2sub_fu_824_shape_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_k2c_sub2idx_fu_836_ap_start <= grp_k2c_sub2idx_fu_836_ap_start_reg;

    grp_k2c_sub2idx_fu_836_ndim_assign_proc : process(A_dim, B_dim, ap_CS_fsm_state100, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            grp_k2c_sub2idx_fu_836_ndim <= B_dim;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            grp_k2c_sub2idx_fu_836_ndim <= A_dim;
        else 
            grp_k2c_sub2idx_fu_836_ndim <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_sub2idx_fu_836_shape_q0_assign_proc : process(newshpA_q0, newshpB_q0, ap_CS_fsm_state100, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            grp_k2c_sub2idx_fu_836_shape_q0 <= newshpB_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            grp_k2c_sub2idx_fu_836_shape_q0 <= newshpA_q0;
        else 
            grp_k2c_sub2idx_fu_836_shape_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_sub2idx_fu_836_sub_q0_assign_proc : process(Asub_q0, Bsub_q0, ap_CS_fsm_state100, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            grp_k2c_sub2idx_fu_836_sub_q0 <= Asub_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            grp_k2c_sub2idx_fu_836_sub_q0 <= Bsub_q0;
        else 
            grp_k2c_sub2idx_fu_836_sub_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_11_cast_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_11_reg_780),64));
    i_12_1_fu_891_p2 <= std_logic_vector(unsigned(i_reg_590) + unsigned(ap_const_lv64_2));
    i_12_s_fu_869_p2 <= (i_reg_590 or ap_const_lv64_1);
    i_15_1_fu_941_p2 <= std_logic_vector(unsigned(i_1_reg_638) + unsigned(ap_const_lv64_2));
    i_15_s_fu_924_p2 <= (i_1_reg_638 or ap_const_lv64_1);
    i_16_cast_fu_999_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(tmp_31_fu_991_p1));
    i_16_fu_994_p2 <= std_logic_vector(signed(ap_const_lv64_FFFFFFFFFFFFFFFF) + signed(A_dim));
    i_18_1_fu_1031_p2 <= std_logic_vector(unsigned(i_4_reg_660) + unsigned(ap_const_lv3_2));
    i_18_cast_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_18_s_fu_1015_p2),64));
    i_18_s_fu_1015_p2 <= (i_4_reg_660 or ap_const_lv3_1);
    i_19_1_fu_1063_p2 <= std_logic_vector(unsigned(i_5_reg_672) + unsigned(ap_const_lv3_2));
    i_19_cast_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_19_fu_1047_p2),64));
    i_19_fu_1047_p2 <= std_logic_vector(unsigned(i_5_reg_672) + unsigned(ap_const_lv3_1));
    i_21_1_fu_1108_p2 <= std_logic_vector(unsigned(i_7_reg_681) + unsigned(ap_const_lv3_2));
    i_21_cast_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_21_fu_1078_p2),64));
    i_21_fu_1078_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_7_reg_681));
    i_22_1_fu_1146_p2 <= std_logic_vector(unsigned(i_8_reg_706) + unsigned(ap_const_lv3_2));
    i_22_cast_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_22_s_fu_1130_p2),64));
    i_22_fu_1301_p2 <= std_logic_vector(unsigned(i_11_reg_780) + unsigned(ap_const_lv6_1));
    i_22_s_fu_1130_p2 <= (i_8_reg_706 or ap_const_lv3_1);
    i_23_1_fu_1178_p2 <= std_logic_vector(unsigned(i_9_reg_718) + unsigned(ap_const_lv3_2));
    i_23_cast_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_23_s_fu_1162_p2),64));
    i_23_fu_1189_p2 <= std_logic_vector(unsigned(i_s_reg_730) + unsigned(ap_const_lv64_1));
    i_23_s_fu_1162_p2 <= (i_9_reg_718 or ap_const_lv3_1);
    i_24_fu_1235_p2 <= std_logic_vector(unsigned(i_10_reg_755) + unsigned(ap_const_lv64_1));
    i_25_fu_1320_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_14_reg_791));
    i_4_cast_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_660),64));
    i_5_cast_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_672),64));
    i_7_cast_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_681),64));
    i_8_cast_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_706),64));
    i_9_cast_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_718),64));
    inneridx_fu_1404_p1 <= i_14_reg_791(14 - 1 downto 0);
    j_10_1_fu_1224_p2 <= std_logic_vector(unsigned(j_4_reg_743) + unsigned(ap_const_lv3_2));
    j_10_cast_fu_1214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_10_s_fu_1208_p2),64));
    j_10_s_fu_1208_p2 <= (j_4_reg_743 or ap_const_lv3_1);
    j_11_1_fu_1271_p2 <= std_logic_vector(unsigned(j_5_reg_768) + unsigned(ap_const_lv3_2));
    j_11_cast_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_11_s_fu_1255_p2),64));
    j_11_s_fu_1255_p2 <= (j_5_reg_768 or ap_const_lv3_1);
    j_4_cast_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_743),64));
    j_5_cast_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_5_reg_768),64));
    j_9_1_fu_1114_p2 <= std_logic_vector(unsigned(j_3_reg_693) + unsigned(ap_const_lv64_2));
    j_9_cast_fu_1098_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_9_s_fu_1092_p2),64));
    j_9_s_fu_1092_p2 <= (tmp_32_fu_1088_p1 or ap_const_lv4_1);
    j_fu_1373_p2 <= std_logic_vector(unsigned(ap_const_lv57_1) + unsigned(j_s_reg_813));
    k_1_fu_1344_p2 <= std_logic_vector(unsigned(k_reg_802) + unsigned(ap_const_lv8_1));
    k_cast3_fu_1331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_802),14));
    k_cast_fu_1335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_802),9));

    newshpA_address0_assign_proc : process(i_8_cast_reg_1662, i_22_cast_reg_1681, ap_CS_fsm_state84, grp_k2c_sub2idx_fu_836_shape_address0, ap_CS_fsm_state86, ap_CS_fsm_state100)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            newshpA_address0 <= i_22_cast_reg_1681(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            newshpA_address0 <= i_8_cast_reg_1662(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            newshpA_address0 <= grp_k2c_sub2idx_fu_836_shape_address0;
        else 
            newshpA_address0 <= "XXX";
        end if; 
    end process;


    newshpA_ce0_assign_proc : process(ap_CS_fsm_state84, grp_k2c_sub2idx_fu_836_shape_ce0, ap_CS_fsm_state86, ap_CS_fsm_state100)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            newshpA_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            newshpA_ce0 <= grp_k2c_sub2idx_fu_836_shape_ce0;
        else 
            newshpA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    newshpA_we0_assign_proc : process(exitcond13_reg_1667, ap_CS_fsm_state84, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((exitcond13_reg_1667 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84)))) then 
            newshpA_we0 <= ap_const_logic_1;
        else 
            newshpA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    newshpB_address0_assign_proc : process(i_9_cast_reg_1704, i_23_cast_reg_1723, ap_CS_fsm_state89, grp_k2c_sub2idx_fu_836_shape_address0, ap_CS_fsm_state91, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            newshpB_address0 <= i_23_cast_reg_1723(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            newshpB_address0 <= i_9_cast_reg_1704(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            newshpB_address0 <= grp_k2c_sub2idx_fu_836_shape_address0;
        else 
            newshpB_address0 <= "XXX";
        end if; 
    end process;


    newshpB_ce0_assign_proc : process(ap_CS_fsm_state89, grp_k2c_sub2idx_fu_836_shape_ce0, ap_CS_fsm_state91, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            newshpB_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            newshpB_ce0 <= grp_k2c_sub2idx_fu_836_shape_ce0;
        else 
            newshpB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    newshpB_we0_assign_proc : process(exitcond12_reg_1709, ap_CS_fsm_state89, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or ((exitcond12_reg_1709 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89)))) then 
            newshpB_we0 <= ap_const_logic_1;
        else 
            newshpB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outrowidx_fu_1326_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_35_fu_1311_p1) * signed(free_axesB_cast5_reg_1566))), 7));

    permA_address0_assign_proc : process(i_4_cast_reg_1582, i_18_cast_reg_1596, ap_CS_fsm_state76, ap_CS_fsm_state78, j_4_cast_fu_1198_p1, ap_CS_fsm_state94, ap_CS_fsm_state77, i_5_cast_fu_1037_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            permA_address0 <= j_4_cast_fu_1198_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            permA_address0 <= i_5_cast_fu_1037_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            permA_address0 <= i_18_cast_reg_1596(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            permA_address0 <= i_4_cast_reg_1582(3 - 1 downto 0);
        else 
            permA_address0 <= "XXX";
        end if; 
    end process;


    permA_address1_assign_proc : process(ap_CS_fsm_state78, i_8_cast_fu_1120_p1, ap_CS_fsm_state82, i_22_cast_fu_1136_p1, ap_CS_fsm_state84, j_10_cast_fu_1214_p1, ap_CS_fsm_state96, i_19_cast_fu_1053_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            permA_address1 <= j_10_cast_fu_1214_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            permA_address1 <= i_22_cast_fu_1136_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            permA_address1 <= i_8_cast_fu_1120_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            permA_address1 <= i_19_cast_fu_1053_p1(3 - 1 downto 0);
        else 
            permA_address1 <= "XXX";
        end if; 
    end process;


    permA_ce0_assign_proc : process(ap_CS_fsm_state76, ap_CS_fsm_state78, ap_CS_fsm_state94, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            permA_ce0 <= ap_const_logic_1;
        else 
            permA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    permA_ce1_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state82, ap_CS_fsm_state84, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            permA_ce1 <= ap_const_logic_1;
        else 
            permA_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    permA_d0_assign_proc : process(p_read2, ap_CS_fsm_state76, ap_CS_fsm_state78, freeA_q0, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            permA_d0 <= p_read2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            permA_d0 <= freeA_q0;
        else 
            permA_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    permA_we0_assign_proc : process(exitcond8_reg_1587, ap_CS_fsm_state76, ap_CS_fsm_state78, tmp_2_fu_1042_p2, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or ((tmp_2_fu_1042_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78)) or ((exitcond8_reg_1587 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76)))) then 
            permA_we0 <= ap_const_logic_1;
        else 
            permA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    permA_we1_assign_proc : process(ap_CS_fsm_state78, tmp_2_fu_1042_p2, tmp_2_1_fu_1058_p2)
    begin
        if (((tmp_2_1_fu_1058_p2 = ap_const_lv1_1) and (tmp_2_fu_1042_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            permA_we1 <= ap_const_logic_1;
        else 
            permA_we1 <= ap_const_logic_0;
        end if; 
    end process;


    permB_address0_assign_proc : process(ap_CS_fsm_state78, i_7_cast_reg_1625, i_21_cast_reg_1639, ap_CS_fsm_state80, i_9_cast_fu_1152_p1, ap_CS_fsm_state87, i_23_cast_fu_1168_p1, ap_CS_fsm_state89, j_5_cast_fu_1245_p1, ap_CS_fsm_state103, j_11_cast_fu_1261_p1, ap_CS_fsm_state105, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            permB_address0 <= j_11_cast_fu_1261_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            permB_address0 <= j_5_cast_fu_1245_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            permB_address0 <= i_23_cast_fu_1168_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            permB_address0 <= i_9_cast_fu_1152_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            permB_address0 <= i_21_cast_reg_1639(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            permB_address0 <= i_7_cast_reg_1625(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            permB_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            permB_address0 <= "XXX";
        end if; 
    end process;


    permB_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state80, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state103, ap_CS_fsm_state105, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            permB_ce0 <= ap_const_logic_1;
        else 
            permB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    permB_d0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state80, freeB_q0, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            permB_d0 <= freeB_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            permB_d0 <= ap_const_lv64_0;
        else 
            permB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    permB_we0_assign_proc : process(ap_CS_fsm_state78, tmp_2_fu_1042_p2, tmp_2_1_fu_1058_p2, tmp_3_reg_1630, ap_CS_fsm_state80, ap_CS_fsm_state81)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or ((tmp_3_reg_1630 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80)) or ((ap_const_logic_1 = ap_CS_fsm_state78) and ((tmp_2_1_fu_1058_p2 = ap_const_lv1_0) or (tmp_2_fu_1042_p2 = ap_const_lv1_0))))) then 
            permB_we0 <= ap_const_logic_1;
        else 
            permB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum2_cast_fu_1399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_1394_p2),64));
    sum2_fu_1394_p2 <= std_logic_vector(unsigned(tmp_38_fu_1364_p1) + unsigned(outrowidx_reg_1893));
    sum6_cast_fu_1355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_fu_1350_p2),64));
    sum6_fu_1350_p2 <= std_logic_vector(unsigned(k_cast3_fu_1331_p1) + unsigned(inneridx_reg_1898));
    sum7_cast_fu_1389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_fu_1384_p2),64));
    sum7_fu_1384_p2 <= std_logic_vector(unsigned(tmp1_fu_1379_p2) + unsigned(tmp_1_11_reg_1916));
    sum_cast_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_1281_p2),64));
    sum_fu_1281_p2 <= std_logic_vector(unsigned(tmp_36_fu_1277_p1) + unsigned(tmp_33_reg_1754));
    tmp1_fu_1379_p2 <= std_logic_vector(unsigned(tmp_37_fu_1360_p1) + unsigned(tmp_33_reg_1754));
    tmp_1_11_fu_1409_p0 <= k_cast3_fu_1331_p1(8 - 1 downto 0);
    tmp_1_fu_880_p2 <= "1" when (i_12_s_fu_869_p2 = p_read2) else "0";
    tmp_29_fu_947_p1 <= dense_13_output_shap_q0(14 - 1 downto 0);
    tmp_2_1_fu_1058_p2 <= "1" when (unsigned(i_19_cast_fu_1053_p1) < unsigned(A_dim)) else "0";
    tmp_2_fu_1042_p2 <= "1" when (unsigned(i_5_cast_fu_1037_p1) < unsigned(A_dim)) else "0";
    tmp_30_fu_951_p1 <= dense_13_output_shap_q0(9 - 1 downto 0);
    tmp_31_fu_991_p1 <= A_dim(3 - 1 downto 0);
    tmp_32_fu_1088_p1 <= j_3_reg_693(4 - 1 downto 0);
    tmp_33_fu_1195_p1 <= A_numel_read(14 - 1 downto 0);
    tmp_35_fu_1311_p1 <= i_14_reg_791(7 - 1 downto 0);
    tmp_36_fu_1277_p1 <= grp_k2c_sub2idx_fu_836_ap_return(14 - 1 downto 0);
    tmp_37_fu_1360_p1 <= j_s_reg_813(14 - 1 downto 0);
    tmp_38_fu_1364_p1 <= j_s_reg_813(7 - 1 downto 0);
    tmp_3_1_fu_1103_p2 <= "1" when (unsigned(i_21_cast_fu_1084_p1) < unsigned(B_dim)) else "0";
    tmp_3_fu_1073_p2 <= "1" when (unsigned(i_7_cast_fu_1069_p1) < unsigned(B_dim)) else "0";
    tmp_7_fu_1315_p2 <= "1" when (unsigned(i_14_reg_791) < unsigned(free_axesA_reg_1545)) else "0";
    tmp_9_fu_857_p2 <= "1" when (i_reg_590 = p_read2) else "0";
    tmp_fu_902_p2 <= "1" when (i_1_reg_638 = ap_const_lv64_0) else "0";
end behav;
