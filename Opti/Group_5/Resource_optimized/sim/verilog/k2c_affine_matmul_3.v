// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_affine_matmul_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        outrows
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
input  [4:0] outrows;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg A_ce0;
reg B_ce0;

(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_144;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_135_p2;
reg   [31:0] reg_149;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state31;
wire   [4:0] i_37_fu_164_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] tmp_fu_170_p1;
reg   [1:0] tmp_reg_261;
wire    ap_CS_fsm_state3;
wire   [4:0] i_38_fu_179_p2;
reg   [4:0] i_38_reg_269;
wire   [5:0] inneridx_fu_185_p3;
reg   [5:0] inneridx_reg_274;
wire   [0:0] exitcond2_fu_174_p2;
wire   [4:0] j_cast1_fu_193_p1;
reg   [4:0] j_cast1_reg_279;
wire    ap_CS_fsm_state4;
reg   [0:0] C_addr_1_reg_284;
wire   [0:0] ap_phi_mux_j_phi_fu_116_p4;
wire   [4:0] k_2_fu_221_p2;
reg   [4:0] k_2_reg_292;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_215_p2;
reg   [31:0] A_load_reg_307;
wire    ap_CS_fsm_state6;
reg   [31:0] B_load_reg_312;
wire   [31:0] grp_fu_140_p2;
reg   [31:0] tmp_25_reg_317;
reg   [4:0] i_reg_89;
wire   [0:0] exitcond3_fu_159_p2;
reg   [4:0] outrowidx_reg_100;
reg   [0:0] j_reg_111;
wire    ap_CS_fsm_state32;
reg   [4:0] k_reg_124;
wire    ap_CS_fsm_state21;
wire   [63:0] i_cast3_fu_154_p1;
wire   [63:0] sum2_cast_fu_206_p1;
wire   [63:0] sum5_cast_fu_232_p1;
wire   [63:0] sum8_cast_fu_242_p1;
wire    ap_CS_fsm_state10;
reg   [31:0] grp_fu_135_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state7;
wire   [1:0] j_cast_fu_197_p1;
wire   [1:0] sum2_fu_201_p2;
wire   [5:0] k_cast_fu_211_p1;
wire   [5:0] sum5_fu_227_p2;
wire   [4:0] sum8_fu_237_p2;
reg   [31:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
end

sample_fadd_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sample_fadd_32ns_hbi_U152(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_144),
    .din1(grp_fu_135_p1),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

sample_fmul_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sample_fmul_32ns_ibs_U153(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_307),
    .din1(B_load_reg_312),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_159_p2 == 1'd0))) begin
        i_reg_89 <= i_37_fu_164_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_89 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        j_reg_111 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_174_p2 == 1'd0))) begin
        j_reg_111 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_j_phi_fu_116_p4 == 1'd0))) begin
        k_reg_124 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        k_reg_124 <= k_2_reg_292;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_159_p2 == 1'd1))) begin
        outrowidx_reg_100 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_j_phi_fu_116_p4 == 1'd1))) begin
        outrowidx_reg_100 <= i_38_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_load_reg_307 <= A_q0;
        B_load_reg_312 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_j_phi_fu_116_p4 == 1'd0))) begin
        C_addr_1_reg_284 <= sum2_cast_fu_206_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_38_reg_269 <= i_38_fu_179_p2;
        tmp_reg_261 <= tmp_fu_170_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_174_p2 == 1'd0))) begin
        inneridx_reg_274[5 : 4] <= inneridx_fu_185_p3[5 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_cast1_reg_279[0] <= j_cast1_fu_193_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_2_reg_292 <= k_2_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_144 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_149 <= grp_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_25_reg_317 <= grp_fu_140_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state5))) begin
        C_address0 = C_addr_1_reg_284;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C_address0 = i_cast3_fu_154_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state32))) begin
        C_d0 = reg_149;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C_d0 = 32'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state32) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_159_p2 == 1'd0)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_174_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_174_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_135_p1 = 32'd3172971855;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_135_p1 = tmp_25_reg_317;
    end else begin
        grp_fu_135_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_159_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_174_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_j_phi_fu_116_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_215_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = sum5_cast_fu_232_p1;

assign B_address0 = sum8_cast_fu_242_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_phi_mux_j_phi_fu_116_p4 = j_reg_111;

assign exitcond2_fu_174_p2 = ((outrowidx_reg_100 == outrows) ? 1'b1 : 1'b0);

assign exitcond3_fu_159_p2 = ((i_reg_89 == outrows) ? 1'b1 : 1'b0);

assign exitcond_fu_215_p2 = ((k_reg_124 == 5'd16) ? 1'b1 : 1'b0);

assign i_37_fu_164_p2 = (i_reg_89 + 5'd1);

assign i_38_fu_179_p2 = (5'd1 + outrowidx_reg_100);

assign i_cast3_fu_154_p1 = i_reg_89;

assign inneridx_fu_185_p3 = {{tmp_fu_170_p1}, {4'd0}};

assign j_cast1_fu_193_p1 = j_reg_111;

assign j_cast_fu_197_p1 = j_reg_111;

assign k_2_fu_221_p2 = (k_reg_124 + 5'd1);

assign k_cast_fu_211_p1 = k_reg_124;

assign sum2_cast_fu_206_p1 = sum2_fu_201_p2;

assign sum2_fu_201_p2 = (j_cast_fu_197_p1 + tmp_reg_261);

assign sum5_cast_fu_232_p1 = sum5_fu_227_p2;

assign sum5_fu_227_p2 = (k_cast_fu_211_p1 + inneridx_reg_274);

assign sum8_cast_fu_242_p1 = sum8_fu_237_p2;

assign sum8_fu_237_p2 = (k_reg_124 + j_cast1_reg_279);

assign tmp_fu_170_p1 = outrowidx_reg_100[1:0];

always @ (posedge ap_clk) begin
    inneridx_reg_274[3:0] <= 4'b0000;
    j_cast1_reg_279[4:1] <= 4'b0000;
end

endmodule //k2c_affine_matmul_3
