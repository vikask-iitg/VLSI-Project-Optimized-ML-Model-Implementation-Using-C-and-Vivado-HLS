-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_dense is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_array_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_array_ce0 : OUT STD_LOGIC;
    output_array_we0 : OUT STD_LOGIC;
    output_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_dim : IN STD_LOGIC_VECTOR (63 downto 0);
    input_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_dim : IN STD_LOGIC_VECTOR (63 downto 0);
    fwork_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fwork_ce0 : OUT STD_LOGIC;
    fwork_we0 : OUT STD_LOGIC;
    fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fwork_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fwork_ce1 : OUT STD_LOGIC;
    fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_15_output_arra_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_15_output_arra_ce0 : OUT STD_LOGIC;
    dense_15_output_arra_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_15_output_arra_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_15_output_arra_ce1 : OUT STD_LOGIC;
    dense_15_output_arra_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of k2c_dense is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (65 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (65 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (65 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (65 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (65 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (65 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (65 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (65 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (65 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (65 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (65 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (65 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_BD1FB54F : STD_LOGIC_VECTOR (31 downto 0) := "10111101000111111011010101001111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_16_kernel_arra_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_16_kernel_arra_ce0 : STD_LOGIC;
    signal dense_16_kernel_arra_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_16_kernel_arra_ce1 : STD_LOGIC;
    signal dense_16_kernel_arra_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_16_kernel_nume : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    signal dense_16_bias_numel : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    signal reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_245_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_413 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_s_fu_273_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_s_reg_423 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_k2c_dot_3_fu_166_ap_idle : STD_LOGIC;
    signal grp_k2c_dot_3_fu_166_ap_ready : STD_LOGIC;
    signal grp_k2c_dot_3_fu_166_ap_done : STD_LOGIC;
    signal j_fu_300_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_441 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_array_addr_2_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_36_fu_321_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_array_addr_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond3_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_35_fu_367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_35_reg_477 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal output_array_addr_1_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_k2c_dot_3_fu_166_ap_start : STD_LOGIC;
    signal grp_k2c_dot_3_fu_166_C_array_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_dot_3_fu_166_C_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_166_C_array_we0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_166_C_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_3_fu_166_A_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_k2c_dot_3_fu_166_A_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_166_fwork_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_k2c_dot_3_fu_166_fwork_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_166_fwork_we0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_166_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_3_fu_166_fwork_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_k2c_dot_3_fu_166_fwork_ce1 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_190_ap_start : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_190_ap_done : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_190_ap_idle : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_190_ap_ready : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_190_C_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_affine_matmul_3_fu_190_C_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_190_C_we0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_190_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_affine_matmul_3_fu_190_A_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_k2c_affine_matmul_3_fu_190_A_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_190_A_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_k2c_affine_matmul_3_fu_190_A_ce1 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_190_B_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_k2c_affine_matmul_3_fu_190_B_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_190_B_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_k2c_affine_matmul_3_fu_190_B_ce1 : STD_LOGIC;
    signal i_i_reg_121 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_i_reg_133 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_144 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal i_1_reg_155 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_k2c_dot_3_fu_166_ap_start_reg : STD_LOGIC := '0';
    signal grp_k2c_affine_matmul_3_fu_190_ap_start_reg : STD_LOGIC := '0';
    signal sum_i_cast_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast1_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_fu_257_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_306_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_67_fu_291_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_i_fu_310_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_24_to_int_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_neg_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_to_int_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_neg_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (65 downto 0);

    component k2c_dot_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_array_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        C_array_ce0 : OUT STD_LOGIC;
        C_array_we0 : OUT STD_LOGIC;
        C_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_array_ce0 : OUT STD_LOGIC;
        A_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_dim : IN STD_LOGIC_VECTOR (63 downto 0);
        A_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_dim : IN STD_LOGIC_VECTOR (63 downto 0);
        B_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
        fwork_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fwork_ce0 : OUT STD_LOGIC;
        fwork_we0 : OUT STD_LOGIC;
        fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fwork_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fwork_ce1 : OUT STD_LOGIC;
        fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2c_affine_matmul_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        outrows : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component sample_fadd_32ns_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_fdiv_32ns_PgM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_fexp_32ns_QgW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2c_dense_dense_1OgC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_16_kernel_arra_U : component k2c_dense_dense_1OgC
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_16_kernel_arra_address0,
        ce0 => dense_16_kernel_arra_ce0,
        q0 => dense_16_kernel_arra_q0,
        address1 => grp_k2c_affine_matmul_3_fu_190_B_address1,
        ce1 => dense_16_kernel_arra_ce1,
        q1 => dense_16_kernel_arra_q1);

    grp_k2c_dot_3_fu_166 : component k2c_dot_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_dot_3_fu_166_ap_start,
        ap_done => grp_k2c_dot_3_fu_166_ap_done,
        ap_idle => grp_k2c_dot_3_fu_166_ap_idle,
        ap_ready => grp_k2c_dot_3_fu_166_ap_ready,
        C_array_address0 => grp_k2c_dot_3_fu_166_C_array_address0,
        C_array_ce0 => grp_k2c_dot_3_fu_166_C_array_ce0,
        C_array_we0 => grp_k2c_dot_3_fu_166_C_array_we0,
        C_array_d0 => grp_k2c_dot_3_fu_166_C_array_d0,
        C_array_q0 => output_array_q0,
        A_array_address0 => grp_k2c_dot_3_fu_166_A_array_address0,
        A_array_ce0 => grp_k2c_dot_3_fu_166_A_array_ce0,
        A_array_q0 => dense_15_output_arra_q0,
        A_dim => input_dim,
        A_numel_read => input_numel_read,
        B_dim => kernel_dim,
        B_numel_read => dense_16_kernel_nume,
        p_read2 => tmp_16_reg_413,
        fwork_address0 => grp_k2c_dot_3_fu_166_fwork_address0,
        fwork_ce0 => grp_k2c_dot_3_fu_166_fwork_ce0,
        fwork_we0 => grp_k2c_dot_3_fu_166_fwork_we0,
        fwork_d0 => grp_k2c_dot_3_fu_166_fwork_d0,
        fwork_q0 => fwork_q0,
        fwork_address1 => grp_k2c_dot_3_fu_166_fwork_address1,
        fwork_ce1 => grp_k2c_dot_3_fu_166_fwork_ce1,
        fwork_q1 => fwork_q1);

    grp_k2c_affine_matmul_3_fu_190 : component k2c_affine_matmul_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_affine_matmul_3_fu_190_ap_start,
        ap_done => grp_k2c_affine_matmul_3_fu_190_ap_done,
        ap_idle => grp_k2c_affine_matmul_3_fu_190_ap_idle,
        ap_ready => grp_k2c_affine_matmul_3_fu_190_ap_ready,
        C_address0 => grp_k2c_affine_matmul_3_fu_190_C_address0,
        C_ce0 => grp_k2c_affine_matmul_3_fu_190_C_ce0,
        C_we0 => grp_k2c_affine_matmul_3_fu_190_C_we0,
        C_d0 => grp_k2c_affine_matmul_3_fu_190_C_d0,
        A_address0 => grp_k2c_affine_matmul_3_fu_190_A_address0,
        A_ce0 => grp_k2c_affine_matmul_3_fu_190_A_ce0,
        A_q0 => dense_15_output_arra_q0,
        A_address1 => grp_k2c_affine_matmul_3_fu_190_A_address1,
        A_ce1 => grp_k2c_affine_matmul_3_fu_190_A_ce1,
        A_q1 => dense_15_output_arra_q1,
        B_address0 => grp_k2c_affine_matmul_3_fu_190_B_address0,
        B_ce0 => grp_k2c_affine_matmul_3_fu_190_B_ce0,
        B_q0 => dense_16_kernel_arra_q0,
        B_address1 => grp_k2c_affine_matmul_3_fu_190_B_address1,
        B_ce1 => grp_k2c_affine_matmul_3_fu_190_B_ce1,
        B_q1 => dense_16_kernel_arra_q1,
        outrows => p_s_reg_423);

    sample_fadd_32ns_hbi_U164 : component sample_fadd_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_201_p0,
        din1 => grp_fu_201_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p2);

    sample_fdiv_32ns_PgM_U165 : component sample_fdiv_32ns_PgM
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => reg_229,
        ce => ap_const_logic_1,
        dout => grp_fu_209_p2);

    sample_fexp_32ns_QgW_U166 : component sample_fexp_32ns_QgW
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_214_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_214_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_k2c_affine_matmul_3_fu_190_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_affine_matmul_3_fu_190_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (tmp_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_k2c_affine_matmul_3_fu_190_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_affine_matmul_3_fu_190_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_affine_matmul_3_fu_190_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_dot_3_fu_166_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_dot_3_fu_166_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (tmp_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_k2c_dot_3_fu_166_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_dot_3_fu_166_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_dot_3_fu_166_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dense_16_bias_numel_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    dense_16_kernel_nume_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_1_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_k2c_affine_matmul_3_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                i_1_reg_155 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                i_1_reg_155 <= i_35_reg_477;
            end if; 
        end if;
    end process;

    i_3_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_3_reg_144 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                i_3_reg_144 <= i_reg_464;
            end if; 
        end if;
    end process;

    i_i_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_i_reg_121 <= i_36_fu_321_p2;
            elsif (((grp_k2c_dot_3_fu_166_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_121 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_i_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_i_reg_133 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_i_reg_133 <= j_reg_441;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                i_35_reg_477 <= i_35_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_331_p2 = ap_const_lv1_0) and (tmp_reg_409 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                i_reg_464 <= i_fu_336_p2;
                output_array_addr_reg_459 <= i_3_cast_fu_326_p1(1 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_441 <= j_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                output_array_addr_1_reg_482 <= i_1_cast1_fu_357_p1(1 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                output_array_addr_2_reg_446 <= sum_i_cast_fu_316_p1(1 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (tmp_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    p_s_reg_423(0) <= p_s_fu_273_p3(0);    p_s_reg_423(4) <= p_s_fu_273_p3(4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_219 <= output_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_224 <= grp_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_229 <= grp_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state36))) then
                reg_234 <= grp_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (tmp_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_16_reg_413 <= tmp_16_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_409 <= tmp_fu_239_p2;
            end if;
        end if;
    end process;
    p_s_reg_423(3 downto 1) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_239_p2, tmp_reg_409, ap_CS_fsm_state2, grp_k2c_dot_3_fu_166_ap_done, ap_CS_fsm_state4, exitcond_i_fu_295_p2, ap_CS_fsm_state10, exitcond3_fu_331_p2, ap_CS_fsm_state39, exitcond_fu_362_p2, grp_k2c_affine_matmul_3_fu_190_ap_done, ap_CS_fsm_state3, tmp_i_fu_286_p2, ap_CS_fsm_state38)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (tmp_fu_239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                elsif (((ap_start = ap_const_logic_1) and (tmp_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_k2c_dot_3_fu_166_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_i_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((exitcond3_fu_331_p2 = ap_const_lv1_1) or (tmp_reg_409 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state38 => 
                if (((grp_k2c_affine_matmul_3_fu_190_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((exitcond_fu_362_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_reg_409, ap_CS_fsm_state10, exitcond3_fu_331_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and ((exitcond3_fu_331_p2 = ap_const_lv1_1) or (tmp_reg_409 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_reg_409, ap_CS_fsm_state10, exitcond3_fu_331_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((exitcond3_fu_331_p2 = ap_const_lv1_1) or (tmp_reg_409 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dense_15_output_arra_address0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_166_A_array_address0, grp_k2c_affine_matmul_3_fu_190_A_address0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            dense_15_output_arra_address0 <= grp_k2c_affine_matmul_3_fu_190_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dense_15_output_arra_address0 <= grp_k2c_dot_3_fu_166_A_array_address0;
        else 
            dense_15_output_arra_address0 <= "XXXX";
        end if; 
    end process;

    dense_15_output_arra_address1 <= grp_k2c_affine_matmul_3_fu_190_A_address1;

    dense_15_output_arra_ce0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_166_A_array_ce0, grp_k2c_affine_matmul_3_fu_190_A_ce0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            dense_15_output_arra_ce0 <= grp_k2c_affine_matmul_3_fu_190_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dense_15_output_arra_ce0 <= grp_k2c_dot_3_fu_166_A_array_ce0;
        else 
            dense_15_output_arra_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_15_output_arra_ce1_assign_proc : process(grp_k2c_affine_matmul_3_fu_190_A_ce1, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            dense_15_output_arra_ce1 <= grp_k2c_affine_matmul_3_fu_190_A_ce1;
        else 
            dense_15_output_arra_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_16_kernel_arra_address0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_affine_matmul_3_fu_190_B_address0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            dense_16_kernel_arra_address0 <= grp_k2c_affine_matmul_3_fu_190_B_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dense_16_kernel_arra_address0 <= ap_const_lv4_0;
        else 
            dense_16_kernel_arra_address0 <= "XXXX";
        end if; 
    end process;


    dense_16_kernel_arra_ce0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_affine_matmul_3_fu_190_B_ce0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            dense_16_kernel_arra_ce0 <= grp_k2c_affine_matmul_3_fu_190_B_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dense_16_kernel_arra_ce0 <= ap_const_logic_0;
        else 
            dense_16_kernel_arra_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_16_kernel_arra_ce1_assign_proc : process(grp_k2c_affine_matmul_3_fu_190_B_ce1, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            dense_16_kernel_arra_ce1 <= grp_k2c_affine_matmul_3_fu_190_B_ce1;
        else 
            dense_16_kernel_arra_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_331_p2 <= "1" when (i_3_cast_fu_326_p1 = output_numel_read) else "0";
    exitcond_fu_362_p2 <= "1" when (i_1_reg_155 = p_s_reg_423) else "0";
    exitcond_i_fu_295_p2 <= "1" when (j_i_reg_133 = dense_16_bias_numel) else "0";
    fwork_address0 <= grp_k2c_dot_3_fu_166_fwork_address0;
    fwork_address1 <= grp_k2c_dot_3_fu_166_fwork_address1;
    fwork_ce0 <= grp_k2c_dot_3_fu_166_fwork_ce0;
    fwork_ce1 <= grp_k2c_dot_3_fu_166_fwork_ce1;
    fwork_d0 <= grp_k2c_dot_3_fu_166_fwork_d0;
    fwork_we0 <= grp_k2c_dot_3_fu_166_fwork_we0;

    grp_fu_201_p0_assign_proc : process(output_array_q0, ap_CS_fsm_state5, reg_224, ap_CS_fsm_state20, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_201_p0 <= reg_224;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_201_p0 <= output_array_q0;
        else 
            grp_fu_201_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_201_p1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state20, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_fu_201_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_201_p1 <= ap_const_lv32_BD1FB54F;
        else 
            grp_fu_201_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_214_p1_assign_proc : process(tmp_21_fu_352_p1, ap_CS_fsm_state12, tmp_17_fu_383_p1, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_214_p1 <= tmp_17_fu_383_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_214_p1 <= tmp_21_fu_352_p1;
        else 
            grp_fu_214_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_k2c_affine_matmul_3_fu_190_ap_start <= grp_k2c_affine_matmul_3_fu_190_ap_start_reg;
    grp_k2c_dot_3_fu_166_ap_start <= grp_k2c_dot_3_fu_166_ap_start_reg;
    i_1_cast1_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_155),64));
    i_35_fu_367_p2 <= std_logic_vector(unsigned(i_1_reg_155) + unsigned(ap_const_lv5_1));
    i_36_fu_321_p2 <= std_logic_vector(unsigned(dense_16_bias_numel) + unsigned(i_i_reg_121));
    i_3_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_144),64));
    i_fu_336_p2 <= (i_3_reg_144 xor ap_const_lv1_1);
    icmp_fu_267_p2 <= "0" when (tmp_66_fu_257_p4 = ap_const_lv63_0) else "1";
    j_fu_300_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j_i_reg_133));

    output_array_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, output_array_addr_2_reg_446, output_array_addr_reg_459, ap_CS_fsm_state10, ap_CS_fsm_state39, output_array_addr_1_reg_482, grp_k2c_dot_3_fu_166_C_array_address0, grp_k2c_affine_matmul_3_fu_190_C_address0, ap_CS_fsm_state9, ap_CS_fsm_state37, ap_CS_fsm_state66, ap_CS_fsm_state38, sum_i_cast_fu_316_p1, i_3_cast_fu_326_p1, i_1_cast1_fu_357_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            output_array_address0 <= output_array_addr_1_reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_array_address0 <= i_1_cast1_fu_357_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            output_array_address0 <= output_array_addr_reg_459;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_array_address0 <= i_3_cast_fu_326_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_array_address0 <= output_array_addr_2_reg_446;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_array_address0 <= sum_i_cast_fu_316_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_array_address0 <= grp_k2c_affine_matmul_3_fu_190_C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_address0 <= grp_k2c_dot_3_fu_166_C_array_address0;
        else 
            output_array_address0 <= "X";
        end if; 
    end process;


    output_array_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state39, grp_k2c_dot_3_fu_166_C_array_ce0, grp_k2c_affine_matmul_3_fu_190_C_ce0, ap_CS_fsm_state9, ap_CS_fsm_state37, ap_CS_fsm_state66, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_array_ce0 <= grp_k2c_affine_matmul_3_fu_190_C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_ce0 <= grp_k2c_dot_3_fu_166_C_array_ce0;
        else 
            output_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_d0_assign_proc : process(grp_fu_201_p2, reg_234, ap_CS_fsm_state2, grp_k2c_dot_3_fu_166_C_array_d0, grp_k2c_affine_matmul_3_fu_190_C_d0, ap_CS_fsm_state9, ap_CS_fsm_state37, ap_CS_fsm_state66, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            output_array_d0 <= reg_234;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_array_d0 <= grp_fu_201_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_array_d0 <= grp_k2c_affine_matmul_3_fu_190_C_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_d0 <= grp_k2c_dot_3_fu_166_C_array_d0;
        else 
            output_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_we0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_166_C_array_we0, grp_k2c_affine_matmul_3_fu_190_C_we0, ap_CS_fsm_state9, ap_CS_fsm_state37, ap_CS_fsm_state66, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_array_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_array_we0 <= grp_k2c_affine_matmul_3_fu_190_C_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_we0 <= grp_k2c_dot_3_fu_166_C_array_we0;
        else 
            output_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_s_fu_273_p3 <= 
        ap_const_lv5_10 when (icmp_fu_267_p2(0) = '1') else 
        ap_const_lv5_1;
    sum_i_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_310_p2),64));
    sum_i_fu_310_p2 <= std_logic_vector(unsigned(tmp_68_fu_306_p1) + unsigned(tmp_67_fu_291_p1));
    tmp_16_fu_245_p2 <= std_logic_vector(unsigned(input_dim) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    tmp_17_fu_383_p1 <= tmp_29_neg_fu_377_p2;
    tmp_21_fu_352_p1 <= tmp_24_neg_fu_346_p2;
    tmp_24_neg_fu_346_p2 <= (tmp_24_to_int_fu_342_p1 xor ap_const_lv32_80000000);
    tmp_24_to_int_fu_342_p1 <= reg_219;
    tmp_29_neg_fu_377_p2 <= (tmp_29_to_int_fu_373_p1 xor ap_const_lv32_80000000);
    tmp_29_to_int_fu_373_p1 <= reg_219;
    tmp_66_fu_257_p4 <= input_dim(63 downto 1);
    tmp_67_fu_291_p1 <= j_i_reg_133(2 - 1 downto 0);
    tmp_68_fu_306_p1 <= i_i_reg_121(2 - 1 downto 0);
    tmp_fu_239_p2 <= "1" when (unsigned(input_dim) < unsigned(ap_const_lv64_3)) else "0";
    tmp_i_fu_286_p2 <= "1" when (unsigned(i_i_reg_121) < unsigned(output_numel_read)) else "0";
end behav;
