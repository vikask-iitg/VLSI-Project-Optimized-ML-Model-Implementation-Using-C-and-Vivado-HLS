-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity k2c_dot_2_dense_1bdk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of k2c_dot_2_dense_1bdk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100010000011000111000000", 
    1 => "10111110100110011111111110101100", 
    2 => "00111110100110101100111100011000", 
    3 => "10111101110111110110000100110000", 
    4 => "10111101101100101100111011001000", 
    5 => "10111110010000101001100110101100", 
    6 => "00111110001101101101001111001101", 
    7 => "00111110100010101101101101010010", 
    8 => "10111110101011100001000010010010", 
    9 => "10111100000010010111101001110110", 
    10 => "10111101111111100001101111001001", 
    11 => "10111110000001000101111000111110", 
    12 => "10111101010101000100100101011000", 
    13 => "10111101001111110001101000010101", 
    14 => "10111110001101010001001001100101", 
    15 => "10111101110010110011010110011110", 
    16 => "10111101111000010100000001010111", 
    17 => "10111110100101100100101100111010", 
    18 => "10111110100001100111101011001111", 
    19 => "10111101000101100110000101001000", 
    20 => "00111110100101011100111111001111", 
    21 => "10111110100111010110111011000110", 
    22 => "00111110010000000110000010000010", 
    23 => "00111110000111011101001010011001", 
    24 => "00111101100100010000110000011000", 
    25 => "10111110100100000010111011100010", 
    26 => "10111110100000100001001101101001", 
    27 => "00111110010011010110100000111010", 
    28 => "10111110000001001101100101110010", 
    29 => "10111101111110000110100001001111", 
    30 => "10111110100110100001001001100100", 
    31 => "00111101110010111010000110101001", 
    32 => "00111110010010010001111111101111", 
    33 => "00111110100100010101001001001110", 
    34 => "00111110010011001010001110010001", 
    35 => "00111110010101110011001100111011", 
    36 => "10111101010011011011010011101111", 
    37 => "10111101110011001001101111111011", 
    38 => "10111110101010111011110000100100", 
    39 => "00111110001100100111100101000000", 
    40 => "10111101110000100100001001100110", 
    41 => "00111101010010111100101111011011", 
    42 => "00111110101101110011010011111100", 
    43 => "10111110001100000000111101000111", 
    44 => "10111110100010010110100010011111", 
    45 => "00111110101100011011100001101110", 
    46 => "10111110000111011110110000010011", 
    47 => "10111101100011101001111011100100", 
    48 => "00111110110010001111000100010110", 
    49 => "10111110001101101010000000011001", 
    50 => "00111110101001100010000111010010", 
    51 => "10111110000111010001101001011111", 
    52 => "00111110011100000100111000011101", 
    53 => "00111110101000111101110000111001", 
    54 => "00111110101011000011101011000001", 
    55 => "00111110010011111010000001111010", 
    56 => "00111110101111001001100011011100", 
    57 => "00111101101110011011100000100000", 
    58 => "10111110101011001000100100000010", 
    59 => "00111110100111001101101110000001", 
    60 => "00111110010101111011000000000010", 
    61 => "10111110101011101100111011100111", 
    62 => "10111101101011001101110000100001", 
    63 => "10111100110111000000111110011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity k2c_dot_2_dense_1bdk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of k2c_dot_2_dense_1bdk is
    component k2c_dot_2_dense_1bdk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    k2c_dot_2_dense_1bdk_rom_U :  component k2c_dot_2_dense_1bdk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


