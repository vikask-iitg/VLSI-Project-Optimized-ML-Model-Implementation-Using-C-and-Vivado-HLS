-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity k2c_dot_2_dense_1bhl_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of k2c_dot_2_dense_1bhl_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011111110100100001010111110", 
    1 => "00111110001011111001001011100011", 
    2 => "10111110001101100011001011001000", 
    3 => "00111110010101011000111010100101", 
    4 => "10111110011001101010011100110100", 
    5 => "00111110010111001111010000101001", 
    6 => "10111101010010001010000111101110", 
    7 => "10111100001000101011111011000010", 
    8 => "00111110001100101001111010100101", 
    9 => "00111110101100100110010110111001", 
    10 => "10111110100011011010101101111100", 
    11 => "00111110100010101100101000001101", 
    12 => "10111100011000000010010110110110", 
    13 => "00111110010000101101100100111001", 
    14 => "10111110100011000000111110000111", 
    15 => "10111110011110001111110101100110", 
    16 => "10111110010010111010100110111000", 
    17 => "00111110100100101110101011100000", 
    18 => "00111110100100001010110010000100", 
    19 => "10111110001101110010111011111110", 
    20 => "00111101111111110000100011000011", 
    21 => "00111101011111110001000111101100", 
    22 => "10111101010001111101101010011001", 
    23 => "10111101000101101001010111000011", 
    24 => "10111101101100011111011011011110", 
    25 => "00111110011100011110110110001001", 
    26 => "10111110101001001100110101000000", 
    27 => "10111110100000110001011010111100", 
    28 => "00111110000110101110001100110110", 
    29 => "00111101101101001010100110101010", 
    30 => "00111110001110000111110110110110", 
    31 => "10111101001100101101100010001011", 
    32 => "10111110100010011001001010010011", 
    33 => "00111100101010010010101011111100", 
    34 => "10111110101010110110001010000011", 
    35 => "10111101011100000100000110010001", 
    36 => "10111110100010101101110101010010", 
    37 => "10111110011100011101110100110011", 
    38 => "00111110100101001101011110010101", 
    39 => "10111110100010111110011110000010", 
    40 => "00111101001011111110011110111110", 
    41 => "10111110100000101110111111000000", 
    42 => "00111011101111101111100110010001", 
    43 => "10111110000011111011000111100001", 
    44 => "10111101100111011000011101110101", 
    45 => "00111101110111001010011100110001", 
    46 => "10111110100001010111011100011101", 
    47 => "10111110010110110100000010110101", 
    48 => "00111110010011101001010110111000", 
    49 => "00111110011110100110101111110111", 
    50 => "10111110100111100101111100100111", 
    51 => "10111101011000111111100011111001", 
    52 => "00111110001001011011000001110011", 
    53 => "00111110011100110000000001001111", 
    54 => "00111110101001111010100101000001", 
    55 => "10111110100011110101101011110111", 
    56 => "10111110010101100000110011001001", 
    57 => "10111110001000010001111011000001", 
    58 => "10111110100100010110100111100111", 
    59 => "10111110001011001110010111010001", 
    60 => "00111101111001001010001100010000", 
    61 => "10111110100101000110100111111000", 
    62 => "00111110101100010001000001000111", 
    63 => "00111010100010111111110011000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity k2c_dot_2_dense_1bhl is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of k2c_dot_2_dense_1bhl is
    component k2c_dot_2_dense_1bhl_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    k2c_dot_2_dense_1bhl_rom_U :  component k2c_dot_2_dense_1bhl_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


