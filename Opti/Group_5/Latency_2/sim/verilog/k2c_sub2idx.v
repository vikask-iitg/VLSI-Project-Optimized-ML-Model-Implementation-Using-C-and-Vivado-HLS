// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_sub2idx (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sub_address0,
        sub_ce0,
        sub_q0,
        shape_address0,
        shape_ce0,
        shape_q0,
        ndim,
        ap_return
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] sub_address0;
output   sub_ce0;
input  [63:0] sub_q0;
output  [2:0] shape_address0;
output   shape_ce0;
input  [63:0] shape_q0;
input  [63:0] ndim;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] sub_address0;
reg sub_ce0;
reg[2:0] shape_address0;
reg shape_ce0;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [63:0] reg_137;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_141_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] j_fu_146_p2;
reg   [63:0] j_reg_229;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_fu_152_p2;
wire   [63:0] idx_1_fu_157_p2;
reg   [63:0] idx_1_reg_244;
wire   [63:0] i_1_s_fu_163_p2;
reg   [63:0] i_1_s_reg_250;
wire   [0:0] exitcond_1_fu_170_p2;
wire   [63:0] grp_fu_175_p2;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire   [63:0] j_1_fu_181_p2;
reg   [63:0] j_1_reg_273;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [0:0] tmp_1_fu_187_p2;
wire   [63:0] idx_1_1_fu_191_p2;
wire   [63:0] i_1_1_fu_196_p2;
wire   [63:0] grp_fu_202_p2;
wire    ap_CS_fsm_state22;
reg   [63:0] idx_reg_64;
reg   [63:0] i_reg_76;
reg   [63:0] j_0_in_reg_89;
reg  signed [63:0] temp1_reg_98;
reg   [63:0] j_0_in_1_reg_108;
reg  signed [63:0] temp1_1_reg_117;
reg   [63:0] idx_lcssa_reg_127;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state17;
reg   [63:0] ap_return_preg;
wire    ap_CS_fsm_state23;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 ap_return_preg = 64'd0;
end

sample_mul_64s_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sample_mul_64s_64dEe_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_137),
    .din1(temp1_reg_98),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

sample_mul_64s_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sample_mul_64s_64dEe_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_137),
    .din1(temp1_1_reg_117),
    .ce(1'b1),
    .dout(grp_fu_202_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_return_preg <= idx_lcssa_reg_127;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        i_reg_76 <= i_1_1_fu_196_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_76 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (exitcond_1_fu_170_p2 == 1'd1))) begin
        idx_lcssa_reg_127 <= idx_1_fu_157_p2;
    end else if (((exitcond_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_lcssa_reg_127 <= idx_reg_64;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        idx_reg_64 <= idx_1_1_fu_191_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idx_reg_64 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j_0_in_1_reg_108 <= j_1_reg_273;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        j_0_in_1_reg_108 <= ndim;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_0_in_reg_89 <= j_reg_229;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_in_reg_89 <= ndim;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        temp1_1_reg_117 <= grp_fu_202_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        temp1_1_reg_117 <= sub_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        temp1_reg_98 <= grp_fu_175_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        temp1_reg_98 <= sub_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_s_reg_250[63 : 1] <= i_1_s_fu_163_p2[63 : 1];
        idx_1_reg_244 <= idx_1_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_1_reg_273 <= j_1_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_229 <= j_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_137 <= shape_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_return = idx_lcssa_reg_127;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        shape_address0 = j_1_reg_273;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shape_address0 = j_reg_229;
    end else begin
        shape_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state5))) begin
        shape_ce0 = 1'b1;
    end else begin
        shape_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sub_address0 = i_1_s_fu_163_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_address0 = i_reg_76;
    end else begin
        sub_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        sub_ce0 = 1'b1;
    end else begin
        sub_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (exitcond_1_fu_170_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((exitcond_1_fu_170_p2 == 1'd0) & (tmp_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((tmp_1_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign exitcond_1_fu_170_p2 = ((i_1_s_fu_163_p2 == ndim) ? 1'b1 : 1'b0);

assign exitcond_fu_141_p2 = ((i_reg_76 == ndim) ? 1'b1 : 1'b0);

assign i_1_1_fu_196_p2 = (i_reg_76 + 64'd2);

assign i_1_s_fu_163_p2 = (i_reg_76 | 64'd1);

assign idx_1_1_fu_191_p2 = ($signed(temp1_1_reg_117) + $signed(idx_1_reg_244));

assign idx_1_fu_157_p2 = ($signed(temp1_reg_98) + $signed(idx_reg_64));

assign j_1_fu_181_p2 = ($signed(j_0_in_1_reg_108) + $signed(64'd18446744073709551615));

assign j_fu_146_p2 = ($signed(j_0_in_reg_89) + $signed(64'd18446744073709551615));

assign tmp_1_fu_187_p2 = ((j_1_reg_273 > i_1_s_reg_250) ? 1'b1 : 1'b0);

assign tmp_fu_152_p2 = ((j_reg_229 > i_reg_76) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i_1_s_reg_250[0] <= 1'b1;
end

endmodule //k2c_sub2idx
