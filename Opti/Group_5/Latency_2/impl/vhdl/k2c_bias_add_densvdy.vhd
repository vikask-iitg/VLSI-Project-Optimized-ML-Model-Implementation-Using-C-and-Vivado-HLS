-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity k2c_bias_add_densvdy_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of k2c_bias_add_densvdy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011101000011110010011001100", 
    1 => "00111101001011100101000000110101", 
    2 => "10111011001110001101011100010010", 
    3 => "10111100001010101101101111111010", 
    4 => "00111100101100001011010100101000", 
    5 => "00111101011011111011101001010000", 
    6 => "00111100111001111110101110101100", 
    7 => "00111100100111010111111001011101", 
    8 => "10111100101101001000001000011110", 
    9 => "00111100011111110110101001001001", 
    10 => "10111011101010000111110100000100", 
    11 => "00111011111110000010101100111010", 
    12 => "00111100101001010000010101010110", 
    13 => "00111100110111110111111101010010", 
    14 => "00111101000100101100010101110001", 
    15 => "10111010000110100110101101111010", 
    16 => "00111100111100001001101110111010", 
    17 => "10111011111101001110001001010100", 
    18 => "00111101010110111111100010100110", 
    19 => "10111100100110110011100101101011", 
    20 => "00111100100110000100000011101001", 
    21 => "00111101010110010100110010101101", 
    22 => "10111101010010100110111010001010", 
    23 => "00111100000111011101101000110111", 
    24 => "00111100011100111011001001001101", 
    25 => "10111011000110010000110110001001", 
    26 => "10111100100010111011001100110010", 
    27 => "10111100101001100101110111010100", 
    28 => "00111101100000100100100011100010", 
    29 => "00111100111010000100010001011000", 
    30 => "00111010110111010101001101010001", 
    31 => "00111100100011101001010101011110", 
    32 => "00111101000010110110010100100011", 
    33 => "00111101000110000010100000101010", 
    34 => "00111011110101011010101101110000", 
    35 => "00111101100011101001111101111011", 
    36 => "10111100000111011100111110000001", 
    37 => "00111101000000011011101111010100", 
    38 => "10111100011110011001111000101011", 
    39 => "00111011100101001010000011001001", 
    40 => "10111100011011111111110010011010", 
    41 => "00111100111010011100001000011111", 
    42 => "00111100011110111110000111000010", 
    43 => "00111011000000001000111011110111", 
    44 => "00111100001110001110101000000111", 
    45 => "00111101001000001010010000000111", 
    46 => "00111101001001111001001100101010", 
    47 => "00111100111101010011001100011010", 
    48 => "00111100000110110001011100001010", 
    49 => "00111101100000011000011011010000", 
    50 => "10111101000011011000001101111001", 
    51 => "00111100110101101110101011101101", 
    52 => "10111100011101110000001101000100", 
    53 => "10111100001010100001101010100101", 
    54 => "10111100110110001101111001111110", 
    55 => "10111101010011000110011100010010", 
    56 => "00111101001101010111100110110111", 
    57 => "00111100111100011100001000000001", 
    58 => "00111100110001111010000111001111", 
    59 => "10111100111000010000000101110000", 
    60 => "00111100101100110100001011110100", 
    61 => "00111011101110100011110000011010", 
    62 => "00111101001000101100111011000101", 
    63 => "10111100000111101101101001100001", 
    64 => "00111101000101100111100101101101", 
    65 => "00111100101000111111010111010110", 
    66 => "00111100011101011011110110111100", 
    67 => "10111100100011001001010011001010", 
    68 => "00111100110001100011000101101101", 
    69 => "00111101000001011000101100001100", 
    70 => "10111101000000010111010111011101", 
    71 => "00111101011110111011100010000010", 
    72 => "00111100100101001011110110110001", 
    73 => "00111100000101110111000100111101", 
    74 => "00111101001101101100010010101101", 
    75 => "10111100111110011100000100111001", 
    76 => "00111100110100011110001011000110", 
    77 => "00111100111011100011000110111111", 
    78 => "10111100101010000011000000100001", 
    79 => "00111101000101001110111110111001", 
    80 => "00111100010111001110001001010011", 
    81 => "00111100101110110111111010011111", 
    82 => "00111100101010001100100111110010", 
    83 => "10111010100101100110100001010001", 
    84 => "10111100010010000011100010110100", 
    85 => "00111101001001111101111111011101", 
    86 => "10111101100011001000011011111000", 
    87 => "10111100101111111001010100110000", 
    88 => "00111101001001110101000001011011", 
    89 => "00111010100010001100111011011010", 
    90 => "00111101001100100100010011111000", 
    91 => "00111101001110001010010111100111", 
    92 => "10111100010001101111000000101010", 
    93 => "00111100111001111010100110100010", 
    94 => "00111101000100110111011000000100", 
    95 => "00111100111010110010011011000101", 
    96 => "00111100001001010110001010011011", 
    97 => "00111100111001011010000000000011", 
    98 => "00111101000001001100001100111000", 
    99 => "00111101011010110010001001110010", 
    100 => "10111100100100000111000010000111", 
    101 => "10111011101011011110110100001001", 
    102 => "10111010001000011010110111001010", 
    103 => "00111101100001111000000001100110", 
    104 => "00111100000110100111110001100011", 
    105 => "00111101000110011110001010010100", 
    106 => "00111010001111010110000010101000", 
    107 => "00111100010110111000001011110011", 
    108 => "00111101011010110100000100000011", 
    109 => "00111101010000000001000101010001", 
    110 => "00111101000011110101101001111010", 
    111 => "10111100111010001000011110111111", 
    112 => "00111101000001100110110101100010", 
    113 => "00111101000000110001111000111011", 
    114 => "00111100100110011010001010010101", 
    115 => "00111100110100110110111001111010", 
    116 => "00111100101101111111100010110011", 
    117 => "00111100100000101010101001000000", 
    118 => "00111100011011001101001110001010", 
    119 => "10111011011101110111110111011011", 
    120 => "00111100111001110000001001100101", 
    121 => "00111101000110111010001111010101", 
    122 => "00111101001110011100110001110011", 
    123 => "00111101011000100010011110110110", 
    124 => "10111100001001001111011001101011", 
    125 => "00111100101100110000100100110101", 
    126 => "10111010111000000101001011000100", 
    127 => "00111101010001100111011111101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity k2c_bias_add_densvdy is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of k2c_bias_add_densvdy is
    component k2c_bias_add_densvdy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    k2c_bias_add_densvdy_rom_U :  component k2c_bias_add_densvdy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


