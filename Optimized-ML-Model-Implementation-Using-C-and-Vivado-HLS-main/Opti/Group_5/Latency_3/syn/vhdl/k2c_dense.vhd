-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_dense is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_array_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_array_ce0 : OUT STD_LOGIC;
    output_array_we0 : OUT STD_LOGIC;
    output_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_array_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_array_0_ce0 : OUT STD_LOGIC;
    input_array_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_array_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_array_1_ce0 : OUT STD_LOGIC;
    input_array_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_array_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_array_2_ce0 : OUT STD_LOGIC;
    input_array_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_array_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_array_3_ce0 : OUT STD_LOGIC;
    input_array_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_array_4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_array_4_ce0 : OUT STD_LOGIC;
    input_array_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_array_5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_array_5_ce0 : OUT STD_LOGIC;
    input_array_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_array_6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_array_6_ce0 : OUT STD_LOGIC;
    input_array_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_array_7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_array_7_ce0 : OUT STD_LOGIC;
    input_array_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_dim : IN STD_LOGIC_VECTOR (63 downto 0);
    input_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_dim : IN STD_LOGIC_VECTOR (63 downto 0);
    fwork_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fwork_ce0 : OUT STD_LOGIC;
    fwork_we0 : OUT STD_LOGIC;
    fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fwork_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fwork_ce1 : OUT STD_LOGIC;
    fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of k2c_dense is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (135 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (135 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (135 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (135 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (135 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (135 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (135 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (135 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (135 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (135 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (135 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_BD1FB54F : STD_LOGIC_VECTOR (31 downto 0) := "10111101000111111011010101001111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (135 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_16_kernel_nume : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    signal dense_16_bias_numel : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal tmp_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_275_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_441 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_s_fu_303_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_s_reg_451 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_k2c_dot_3_fu_178_ap_idle : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_ap_ready : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_ap_done : STD_LOGIC;
    signal j_fu_330_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_469 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_array_addr_2_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_33_fu_351_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_array_load_2_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal output_array_addr_reg_492 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exitcond3_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_neg_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_neg_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_21_fu_382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_32_fu_396_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_32_reg_515 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal output_array_addr_1_reg_520 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_neg_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_neg_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal tmp_17_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_k2c_dot_3_fu_178_ap_start : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_C_array_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_dot_3_fu_178_C_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_C_array_we0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_C_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_3_fu_178_A_array_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_dot_3_fu_178_A_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_A_array1_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_dot_3_fu_178_A_array1_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_A_array2_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_dot_3_fu_178_A_array2_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_A_array3_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_dot_3_fu_178_A_array3_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_A_array4_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_dot_3_fu_178_A_array4_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_A_array5_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_dot_3_fu_178_A_array5_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_A_array6_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_dot_3_fu_178_A_array6_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_A_array7_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_dot_3_fu_178_A_array7_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_fwork_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_k2c_dot_3_fu_178_fwork_ce0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_fwork_we0 : STD_LOGIC;
    signal grp_k2c_dot_3_fu_178_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_3_fu_178_fwork_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_k2c_dot_3_fu_178_fwork_ce1 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_ap_start : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_ap_done : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_ap_idle : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_ap_ready : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_C_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_affine_matmul_3_fu_214_C_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_C_we0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_affine_matmul_3_fu_214_A_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_affine_matmul_3_fu_214_A_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_A1_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_affine_matmul_3_fu_214_A1_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_A2_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_affine_matmul_3_fu_214_A2_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_A3_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_affine_matmul_3_fu_214_A3_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_A4_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_affine_matmul_3_fu_214_A4_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_A5_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_affine_matmul_3_fu_214_A5_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_A6_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_affine_matmul_3_fu_214_A6_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_3_fu_214_A7_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_affine_matmul_3_fu_214_A7_ce0 : STD_LOGIC;
    signal i_i_reg_133 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_i_reg_145 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal i_1_reg_167 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_k2c_dot_3_fu_178_ap_start_reg : STD_LOGIC := '0';
    signal grp_k2c_affine_matmul_3_fu_214_ap_start_reg : STD_LOGIC := '0';
    signal sum_i_cast_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast1_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_237_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal grp_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_fu_287_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_336_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_84_fu_321_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_i_fu_340_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_24_to_int_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_to_int_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (135 downto 0);

    component k2c_dot_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_array_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        C_array_ce0 : OUT STD_LOGIC;
        C_array_we0 : OUT STD_LOGIC;
        C_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_array_ce0 : OUT STD_LOGIC;
        A_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_array1_ce0 : OUT STD_LOGIC;
        A_array1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_array2_ce0 : OUT STD_LOGIC;
        A_array2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_array3_ce0 : OUT STD_LOGIC;
        A_array3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_array4_ce0 : OUT STD_LOGIC;
        A_array4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_array5_ce0 : OUT STD_LOGIC;
        A_array5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_array6_ce0 : OUT STD_LOGIC;
        A_array6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_array7_ce0 : OUT STD_LOGIC;
        A_array7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_dim : IN STD_LOGIC_VECTOR (63 downto 0);
        A_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_dim : IN STD_LOGIC_VECTOR (63 downto 0);
        B_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
        fwork_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fwork_ce0 : OUT STD_LOGIC;
        fwork_we0 : OUT STD_LOGIC;
        fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fwork_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        fwork_ce1 : OUT STD_LOGIC;
        fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2c_affine_matmul_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A1_ce0 : OUT STD_LOGIC;
        A1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A2_ce0 : OUT STD_LOGIC;
        A2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A3_ce0 : OUT STD_LOGIC;
        A3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A4_ce0 : OUT STD_LOGIC;
        A4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A5_ce0 : OUT STD_LOGIC;
        A5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A6_ce0 : OUT STD_LOGIC;
        A6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        A7_ce0 : OUT STD_LOGIC;
        A7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outrows : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component sample_fadd_32ns_ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_fdiv_32ns_bzo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_fexp_32ns_bAo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_k2c_dot_3_fu_178 : component k2c_dot_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_dot_3_fu_178_ap_start,
        ap_done => grp_k2c_dot_3_fu_178_ap_done,
        ap_idle => grp_k2c_dot_3_fu_178_ap_idle,
        ap_ready => grp_k2c_dot_3_fu_178_ap_ready,
        C_array_address0 => grp_k2c_dot_3_fu_178_C_array_address0,
        C_array_ce0 => grp_k2c_dot_3_fu_178_C_array_ce0,
        C_array_we0 => grp_k2c_dot_3_fu_178_C_array_we0,
        C_array_d0 => grp_k2c_dot_3_fu_178_C_array_d0,
        C_array_q0 => output_array_q0,
        A_array_address0 => grp_k2c_dot_3_fu_178_A_array_address0,
        A_array_ce0 => grp_k2c_dot_3_fu_178_A_array_ce0,
        A_array_q0 => input_array_0_q0,
        A_array1_address0 => grp_k2c_dot_3_fu_178_A_array1_address0,
        A_array1_ce0 => grp_k2c_dot_3_fu_178_A_array1_ce0,
        A_array1_q0 => input_array_1_q0,
        A_array2_address0 => grp_k2c_dot_3_fu_178_A_array2_address0,
        A_array2_ce0 => grp_k2c_dot_3_fu_178_A_array2_ce0,
        A_array2_q0 => input_array_2_q0,
        A_array3_address0 => grp_k2c_dot_3_fu_178_A_array3_address0,
        A_array3_ce0 => grp_k2c_dot_3_fu_178_A_array3_ce0,
        A_array3_q0 => input_array_3_q0,
        A_array4_address0 => grp_k2c_dot_3_fu_178_A_array4_address0,
        A_array4_ce0 => grp_k2c_dot_3_fu_178_A_array4_ce0,
        A_array4_q0 => input_array_4_q0,
        A_array5_address0 => grp_k2c_dot_3_fu_178_A_array5_address0,
        A_array5_ce0 => grp_k2c_dot_3_fu_178_A_array5_ce0,
        A_array5_q0 => input_array_5_q0,
        A_array6_address0 => grp_k2c_dot_3_fu_178_A_array6_address0,
        A_array6_ce0 => grp_k2c_dot_3_fu_178_A_array6_ce0,
        A_array6_q0 => input_array_6_q0,
        A_array7_address0 => grp_k2c_dot_3_fu_178_A_array7_address0,
        A_array7_ce0 => grp_k2c_dot_3_fu_178_A_array7_ce0,
        A_array7_q0 => input_array_7_q0,
        A_dim => input_dim,
        A_numel_read => input_numel_read,
        B_dim => kernel_dim,
        B_numel_read => dense_16_kernel_nume,
        p_read2 => tmp_16_reg_441,
        fwork_address0 => grp_k2c_dot_3_fu_178_fwork_address0,
        fwork_ce0 => grp_k2c_dot_3_fu_178_fwork_ce0,
        fwork_we0 => grp_k2c_dot_3_fu_178_fwork_we0,
        fwork_d0 => grp_k2c_dot_3_fu_178_fwork_d0,
        fwork_q0 => fwork_q0,
        fwork_address1 => grp_k2c_dot_3_fu_178_fwork_address1,
        fwork_ce1 => grp_k2c_dot_3_fu_178_fwork_ce1,
        fwork_q1 => fwork_q1);

    grp_k2c_affine_matmul_3_fu_214 : component k2c_affine_matmul_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_affine_matmul_3_fu_214_ap_start,
        ap_done => grp_k2c_affine_matmul_3_fu_214_ap_done,
        ap_idle => grp_k2c_affine_matmul_3_fu_214_ap_idle,
        ap_ready => grp_k2c_affine_matmul_3_fu_214_ap_ready,
        C_address0 => grp_k2c_affine_matmul_3_fu_214_C_address0,
        C_ce0 => grp_k2c_affine_matmul_3_fu_214_C_ce0,
        C_we0 => grp_k2c_affine_matmul_3_fu_214_C_we0,
        C_d0 => grp_k2c_affine_matmul_3_fu_214_C_d0,
        A_address0 => grp_k2c_affine_matmul_3_fu_214_A_address0,
        A_ce0 => grp_k2c_affine_matmul_3_fu_214_A_ce0,
        A_q0 => input_array_0_q0,
        A1_address0 => grp_k2c_affine_matmul_3_fu_214_A1_address0,
        A1_ce0 => grp_k2c_affine_matmul_3_fu_214_A1_ce0,
        A1_q0 => input_array_1_q0,
        A2_address0 => grp_k2c_affine_matmul_3_fu_214_A2_address0,
        A2_ce0 => grp_k2c_affine_matmul_3_fu_214_A2_ce0,
        A2_q0 => input_array_2_q0,
        A3_address0 => grp_k2c_affine_matmul_3_fu_214_A3_address0,
        A3_ce0 => grp_k2c_affine_matmul_3_fu_214_A3_ce0,
        A3_q0 => input_array_3_q0,
        A4_address0 => grp_k2c_affine_matmul_3_fu_214_A4_address0,
        A4_ce0 => grp_k2c_affine_matmul_3_fu_214_A4_ce0,
        A4_q0 => input_array_4_q0,
        A5_address0 => grp_k2c_affine_matmul_3_fu_214_A5_address0,
        A5_ce0 => grp_k2c_affine_matmul_3_fu_214_A5_ce0,
        A5_q0 => input_array_5_q0,
        A6_address0 => grp_k2c_affine_matmul_3_fu_214_A6_address0,
        A6_ce0 => grp_k2c_affine_matmul_3_fu_214_A6_ce0,
        A6_q0 => input_array_6_q0,
        A7_address0 => grp_k2c_affine_matmul_3_fu_214_A7_address0,
        A7_ce0 => grp_k2c_affine_matmul_3_fu_214_A7_ce0,
        A7_q0 => input_array_7_q0,
        outrows => p_s_reg_451);

    sample_fadd_32ns_ocq_U383 : component sample_fadd_32ns_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_237_p0,
        din1 => grp_fu_237_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p2);

    sample_fdiv_32ns_bzo_U384 : component sample_fdiv_32ns_bzo
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => reg_253,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);

    sample_fexp_32ns_bAo_U385 : component sample_fexp_32ns_bAo
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_248_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_248_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_k2c_affine_matmul_3_fu_214_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_affine_matmul_3_fu_214_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_k2c_affine_matmul_3_fu_214_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_affine_matmul_3_fu_214_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_affine_matmul_3_fu_214_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_dot_3_fu_178_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_dot_3_fu_178_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_k2c_dot_3_fu_178_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_dot_3_fu_178_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_dot_3_fu_178_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dense_16_bias_numel_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    dense_16_kernel_nume_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_1_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_k2c_affine_matmul_3_fu_214_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                i_1_reg_167 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
                i_1_reg_167 <= i_32_reg_515;
            end if; 
        end if;
    end process;

    i_3_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_3_reg_156 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                i_3_reg_156 <= i_reg_497;
            end if; 
        end if;
    end process;

    i_i_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_i_reg_133 <= i_33_fu_351_p2;
            elsif (((grp_k2c_dot_3_fu_178_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_133 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_i_reg_145 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_i_reg_145 <= j_reg_469;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                i_32_reg_515 <= i_32_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_361_p2 = ap_const_lv1_0) and (tmp_reg_437 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                i_reg_497 <= i_fu_366_p2;
                output_array_addr_reg_492 <= i_3_cast_fu_356_p1(1 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_469 <= j_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                output_array_addr_1_reg_520 <= i_1_cast1_fu_386_p1(1 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                output_array_addr_2_reg_474 <= sum_i_cast_fu_346_p1(1 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                output_array_load_2_reg_484 <= output_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    p_s_reg_451(0) <= p_s_fu_303_p3(0);    p_s_reg_451(4) <= p_s_fu_303_p3(4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_253 <= grp_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state35))) then
                reg_259 <= grp_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state74))) then
                reg_264 <= grp_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_16_reg_441 <= tmp_16_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_24_neg_reg_502 <= tmp_24_neg_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                tmp_29_neg_reg_525 <= tmp_29_neg_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_reg_437 <= tmp_fu_269_p2;
            end if;
        end if;
    end process;
    p_s_reg_451(3 downto 1) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_269_p2, tmp_reg_437, ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_ap_done, ap_CS_fsm_state4, exitcond_i_fu_325_p2, ap_CS_fsm_state16, exitcond3_fu_361_p2, ap_CS_fsm_state77, exitcond_fu_391_p2, grp_k2c_affine_matmul_3_fu_214_ap_done, ap_CS_fsm_state3, tmp_i_fu_316_p2, ap_CS_fsm_state76)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((tmp_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                elsif (((tmp_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_k2c_dot_3_fu_178_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_i_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and ((exitcond3_fu_361_p2 = ap_const_lv1_1) or (tmp_reg_437 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state76 => 
                if (((grp_k2c_affine_matmul_3_fu_214_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                if (((exitcond_fu_391_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_reg_437, ap_CS_fsm_state16, exitcond3_fu_361_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state16) and ((exitcond3_fu_361_p2 = ap_const_lv1_1) or (tmp_reg_437 = ap_const_lv1_1))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_reg_437, ap_CS_fsm_state16, exitcond3_fu_361_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and ((exitcond3_fu_361_p2 = ap_const_lv1_1) or (tmp_reg_437 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_361_p2 <= "1" when (i_3_cast_fu_356_p1 = output_numel_read) else "0";
    exitcond_fu_391_p2 <= "1" when (i_1_reg_167 = p_s_reg_451) else "0";
    exitcond_i_fu_325_p2 <= "1" when (j_i_reg_145 = dense_16_bias_numel) else "0";
    fwork_address0 <= grp_k2c_dot_3_fu_178_fwork_address0;
    fwork_address1 <= grp_k2c_dot_3_fu_178_fwork_address1;
    fwork_ce0 <= grp_k2c_dot_3_fu_178_fwork_ce0;
    fwork_ce1 <= grp_k2c_dot_3_fu_178_fwork_ce1;
    fwork_d0 <= grp_k2c_dot_3_fu_178_fwork_d0;
    fwork_we0 <= grp_k2c_dot_3_fu_178_fwork_we0;

    grp_fu_237_p0_assign_proc : process(reg_259, output_array_load_2_reg_484, ap_CS_fsm_state6, ap_CS_fsm_state36, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_237_p0 <= reg_259;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_237_p0 <= output_array_load_2_reg_484;
        else 
            grp_fu_237_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_237_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state36, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_237_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_237_p1 <= ap_const_lv32_BD1FB54F;
        else 
            grp_fu_237_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_248_p1_assign_proc : process(tmp_21_fu_382_p1, ap_CS_fsm_state18, tmp_17_fu_412_p1, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_fu_248_p1 <= tmp_17_fu_412_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_248_p1 <= tmp_21_fu_382_p1;
        else 
            grp_fu_248_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_k2c_affine_matmul_3_fu_214_ap_start <= grp_k2c_affine_matmul_3_fu_214_ap_start_reg;
    grp_k2c_dot_3_fu_178_ap_start <= grp_k2c_dot_3_fu_178_ap_start_reg;
    i_1_cast1_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_167),64));
    i_32_fu_396_p2 <= std_logic_vector(unsigned(i_1_reg_167) + unsigned(ap_const_lv5_1));
    i_33_fu_351_p2 <= std_logic_vector(unsigned(dense_16_bias_numel) + unsigned(i_i_reg_133));
    i_3_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_156),64));
    i_fu_366_p2 <= (i_3_reg_156 xor ap_const_lv1_1);
    icmp_fu_297_p2 <= "0" when (tmp_83_fu_287_p4 = ap_const_lv63_0) else "1";

    input_array_0_address0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array_address0, grp_k2c_affine_matmul_3_fu_214_A_address0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_0_address0 <= grp_k2c_affine_matmul_3_fu_214_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_0_address0 <= grp_k2c_dot_3_fu_178_A_array_address0;
        else 
            input_array_0_address0 <= "X";
        end if; 
    end process;


    input_array_0_ce0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array_ce0, grp_k2c_affine_matmul_3_fu_214_A_ce0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_0_ce0 <= grp_k2c_affine_matmul_3_fu_214_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_0_ce0 <= grp_k2c_dot_3_fu_178_A_array_ce0;
        else 
            input_array_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_array_1_address0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array1_address0, grp_k2c_affine_matmul_3_fu_214_A1_address0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_1_address0 <= grp_k2c_affine_matmul_3_fu_214_A1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_1_address0 <= grp_k2c_dot_3_fu_178_A_array1_address0;
        else 
            input_array_1_address0 <= "X";
        end if; 
    end process;


    input_array_1_ce0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array1_ce0, grp_k2c_affine_matmul_3_fu_214_A1_ce0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_1_ce0 <= grp_k2c_affine_matmul_3_fu_214_A1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_1_ce0 <= grp_k2c_dot_3_fu_178_A_array1_ce0;
        else 
            input_array_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_array_2_address0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array2_address0, grp_k2c_affine_matmul_3_fu_214_A2_address0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_2_address0 <= grp_k2c_affine_matmul_3_fu_214_A2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_2_address0 <= grp_k2c_dot_3_fu_178_A_array2_address0;
        else 
            input_array_2_address0 <= "X";
        end if; 
    end process;


    input_array_2_ce0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array2_ce0, grp_k2c_affine_matmul_3_fu_214_A2_ce0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_2_ce0 <= grp_k2c_affine_matmul_3_fu_214_A2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_2_ce0 <= grp_k2c_dot_3_fu_178_A_array2_ce0;
        else 
            input_array_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_array_3_address0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array3_address0, grp_k2c_affine_matmul_3_fu_214_A3_address0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_3_address0 <= grp_k2c_affine_matmul_3_fu_214_A3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_3_address0 <= grp_k2c_dot_3_fu_178_A_array3_address0;
        else 
            input_array_3_address0 <= "X";
        end if; 
    end process;


    input_array_3_ce0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array3_ce0, grp_k2c_affine_matmul_3_fu_214_A3_ce0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_3_ce0 <= grp_k2c_affine_matmul_3_fu_214_A3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_3_ce0 <= grp_k2c_dot_3_fu_178_A_array3_ce0;
        else 
            input_array_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_array_4_address0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array4_address0, grp_k2c_affine_matmul_3_fu_214_A4_address0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_4_address0 <= grp_k2c_affine_matmul_3_fu_214_A4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_4_address0 <= grp_k2c_dot_3_fu_178_A_array4_address0;
        else 
            input_array_4_address0 <= "X";
        end if; 
    end process;


    input_array_4_ce0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array4_ce0, grp_k2c_affine_matmul_3_fu_214_A4_ce0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_4_ce0 <= grp_k2c_affine_matmul_3_fu_214_A4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_4_ce0 <= grp_k2c_dot_3_fu_178_A_array4_ce0;
        else 
            input_array_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_array_5_address0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array5_address0, grp_k2c_affine_matmul_3_fu_214_A5_address0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_5_address0 <= grp_k2c_affine_matmul_3_fu_214_A5_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_5_address0 <= grp_k2c_dot_3_fu_178_A_array5_address0;
        else 
            input_array_5_address0 <= "X";
        end if; 
    end process;


    input_array_5_ce0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array5_ce0, grp_k2c_affine_matmul_3_fu_214_A5_ce0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_5_ce0 <= grp_k2c_affine_matmul_3_fu_214_A5_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_5_ce0 <= grp_k2c_dot_3_fu_178_A_array5_ce0;
        else 
            input_array_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_array_6_address0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array6_address0, grp_k2c_affine_matmul_3_fu_214_A6_address0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_6_address0 <= grp_k2c_affine_matmul_3_fu_214_A6_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_6_address0 <= grp_k2c_dot_3_fu_178_A_array6_address0;
        else 
            input_array_6_address0 <= "X";
        end if; 
    end process;


    input_array_6_ce0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array6_ce0, grp_k2c_affine_matmul_3_fu_214_A6_ce0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_6_ce0 <= grp_k2c_affine_matmul_3_fu_214_A6_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_6_ce0 <= grp_k2c_dot_3_fu_178_A_array6_ce0;
        else 
            input_array_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_array_7_address0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array7_address0, grp_k2c_affine_matmul_3_fu_214_A7_address0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_7_address0 <= grp_k2c_affine_matmul_3_fu_214_A7_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_7_address0 <= grp_k2c_dot_3_fu_178_A_array7_address0;
        else 
            input_array_7_address0 <= "X";
        end if; 
    end process;


    input_array_7_ce0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_A_array7_ce0, grp_k2c_affine_matmul_3_fu_214_A7_ce0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            input_array_7_ce0 <= grp_k2c_affine_matmul_3_fu_214_A7_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_7_ce0 <= grp_k2c_dot_3_fu_178_A_array7_ce0;
        else 
            input_array_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_330_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j_i_reg_145));

    output_array_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, output_array_addr_2_reg_474, output_array_addr_reg_492, ap_CS_fsm_state16, ap_CS_fsm_state77, output_array_addr_1_reg_520, grp_k2c_dot_3_fu_178_C_array_address0, grp_k2c_affine_matmul_3_fu_214_C_address0, ap_CS_fsm_state15, ap_CS_fsm_state75, ap_CS_fsm_state136, ap_CS_fsm_state76, sum_i_cast_fu_346_p1, i_3_cast_fu_356_p1, i_1_cast1_fu_386_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            output_array_address0 <= output_array_addr_1_reg_520;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            output_array_address0 <= i_1_cast1_fu_386_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            output_array_address0 <= output_array_addr_reg_492;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_array_address0 <= i_3_cast_fu_356_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_array_address0 <= output_array_addr_2_reg_474;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_array_address0 <= sum_i_cast_fu_346_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            output_array_address0 <= grp_k2c_affine_matmul_3_fu_214_C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_address0 <= grp_k2c_dot_3_fu_178_C_array_address0;
        else 
            output_array_address0 <= "X";
        end if; 
    end process;


    output_array_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state77, grp_k2c_dot_3_fu_178_C_array_ce0, grp_k2c_affine_matmul_3_fu_214_C_ce0, ap_CS_fsm_state15, ap_CS_fsm_state75, ap_CS_fsm_state136, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            output_array_ce0 <= grp_k2c_affine_matmul_3_fu_214_C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_ce0 <= grp_k2c_dot_3_fu_178_C_array_ce0;
        else 
            output_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_d0_assign_proc : process(reg_253, reg_264, ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_C_array_d0, grp_k2c_affine_matmul_3_fu_214_C_d0, ap_CS_fsm_state15, ap_CS_fsm_state75, ap_CS_fsm_state136, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            output_array_d0 <= reg_264;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_array_d0 <= reg_253;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            output_array_d0 <= grp_k2c_affine_matmul_3_fu_214_C_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_d0 <= grp_k2c_dot_3_fu_178_C_array_d0;
        else 
            output_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_we0_assign_proc : process(ap_CS_fsm_state2, grp_k2c_dot_3_fu_178_C_array_we0, grp_k2c_affine_matmul_3_fu_214_C_we0, ap_CS_fsm_state15, ap_CS_fsm_state75, ap_CS_fsm_state136, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            output_array_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            output_array_we0 <= grp_k2c_affine_matmul_3_fu_214_C_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_we0 <= grp_k2c_dot_3_fu_178_C_array_we0;
        else 
            output_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_s_fu_303_p3 <= 
        ap_const_lv5_10 when (icmp_fu_297_p2(0) = '1') else 
        ap_const_lv5_1;
    sum_i_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_340_p2),64));
    sum_i_fu_340_p2 <= std_logic_vector(unsigned(tmp_85_fu_336_p1) + unsigned(tmp_84_fu_321_p1));
    tmp_16_fu_275_p2 <= std_logic_vector(unsigned(input_dim) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    tmp_17_fu_412_p1 <= tmp_29_neg_reg_525;
    tmp_21_fu_382_p1 <= tmp_24_neg_reg_502;
    tmp_24_neg_fu_376_p2 <= (tmp_24_to_int_fu_372_p1 xor ap_const_lv32_80000000);
    tmp_24_to_int_fu_372_p1 <= output_array_q0;
    tmp_29_neg_fu_406_p2 <= (tmp_29_to_int_fu_402_p1 xor ap_const_lv32_80000000);
    tmp_29_to_int_fu_402_p1 <= output_array_q0;
    tmp_83_fu_287_p4 <= input_dim(63 downto 1);
    tmp_84_fu_321_p1 <= j_i_reg_145(2 - 1 downto 0);
    tmp_85_fu_336_p1 <= i_i_reg_133(2 - 1 downto 0);
    tmp_fu_269_p2 <= "1" when (unsigned(input_dim) < unsigned(ap_const_lv64_3)) else "0";
    tmp_i_fu_316_p2 <= "1" when (unsigned(i_i_reg_133) < unsigned(output_numel_read)) else "0";
end behav;
