// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _k2c_sub2idx_HH_
#define _k2c_sub2idx_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sample_mul_64s_64dEe.h"

namespace ap_rtl {

struct k2c_sub2idx : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > sub_address0;
    sc_out< sc_logic > sub_ce0;
    sc_in< sc_lv<64> > sub_q0;
    sc_out< sc_lv<3> > shape_address0;
    sc_out< sc_logic > shape_ce0;
    sc_in< sc_lv<64> > shape_q0;
    sc_in< sc_lv<64> > ndim;
    sc_out< sc_lv<64> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    k2c_sub2idx(sc_module_name name);
    SC_HAS_PROCESS(k2c_sub2idx);

    ~k2c_sub2idx();

    sc_trace_file* mVcdFile;

    sample_mul_64s_64dEe<1,6,64,64,64>* sample_mul_64s_64dEe_U11;
    sample_mul_64s_64dEe<1,6,64,64,64>* sample_mul_64s_64dEe_U12;
    sc_signal< sc_lv<23> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > reg_137;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_141_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > j_fu_146_p2;
    sc_signal< sc_lv<64> > j_reg_229;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_fu_152_p2;
    sc_signal< sc_lv<64> > idx_1_fu_157_p2;
    sc_signal< sc_lv<64> > idx_1_reg_244;
    sc_signal< sc_lv<64> > i_1_s_fu_163_p2;
    sc_signal< sc_lv<64> > i_1_s_reg_250;
    sc_signal< sc_lv<1> > exitcond_1_fu_170_p2;
    sc_signal< sc_lv<64> > grp_fu_175_p2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<64> > j_1_fu_181_p2;
    sc_signal< sc_lv<64> > j_1_reg_273;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<1> > tmp_1_fu_187_p2;
    sc_signal< sc_lv<64> > idx_1_1_fu_191_p2;
    sc_signal< sc_lv<64> > i_1_1_fu_196_p2;
    sc_signal< sc_lv<64> > grp_fu_202_p2;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_lv<64> > idx_reg_64;
    sc_signal< sc_lv<64> > i_reg_76;
    sc_signal< sc_lv<64> > j_0_in_reg_89;
    sc_signal< sc_lv<64> > temp1_reg_98;
    sc_signal< sc_lv<64> > j_0_in_1_reg_108;
    sc_signal< sc_lv<64> > temp1_1_reg_117;
    sc_signal< sc_lv<64> > idx_lcssa_reg_127;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_lv<64> > ap_return_preg;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_lv<23> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<23> ap_ST_fsm_state1;
    static const sc_lv<23> ap_ST_fsm_state2;
    static const sc_lv<23> ap_ST_fsm_state3;
    static const sc_lv<23> ap_ST_fsm_state4;
    static const sc_lv<23> ap_ST_fsm_state5;
    static const sc_lv<23> ap_ST_fsm_state6;
    static const sc_lv<23> ap_ST_fsm_state7;
    static const sc_lv<23> ap_ST_fsm_state8;
    static const sc_lv<23> ap_ST_fsm_state9;
    static const sc_lv<23> ap_ST_fsm_state10;
    static const sc_lv<23> ap_ST_fsm_state11;
    static const sc_lv<23> ap_ST_fsm_state12;
    static const sc_lv<23> ap_ST_fsm_state13;
    static const sc_lv<23> ap_ST_fsm_state14;
    static const sc_lv<23> ap_ST_fsm_state15;
    static const sc_lv<23> ap_ST_fsm_state16;
    static const sc_lv<23> ap_ST_fsm_state17;
    static const sc_lv<23> ap_ST_fsm_state18;
    static const sc_lv<23> ap_ST_fsm_state19;
    static const sc_lv<23> ap_ST_fsm_state20;
    static const sc_lv<23> ap_ST_fsm_state21;
    static const sc_lv<23> ap_ST_fsm_state22;
    static const sc_lv<23> ap_ST_fsm_state23;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFFFFF;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_16;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_exitcond_1_fu_170_p2();
    void thread_exitcond_fu_141_p2();
    void thread_i_1_1_fu_196_p2();
    void thread_i_1_s_fu_163_p2();
    void thread_idx_1_1_fu_191_p2();
    void thread_idx_1_fu_157_p2();
    void thread_j_1_fu_181_p2();
    void thread_j_fu_146_p2();
    void thread_shape_address0();
    void thread_shape_ce0();
    void thread_sub_address0();
    void thread_sub_ce0();
    void thread_tmp_1_fu_187_p2();
    void thread_tmp_fu_152_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
