// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_idx2sub (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idx,
        sub_address0,
        sub_ce0,
        sub_we0,
        sub_d0,
        shape_address0,
        shape_ce0,
        shape_q0,
        ndim
);

parameter    ap_ST_fsm_state1 = 142'd1;
parameter    ap_ST_fsm_state2 = 142'd2;
parameter    ap_ST_fsm_state3 = 142'd4;
parameter    ap_ST_fsm_state4 = 142'd8;
parameter    ap_ST_fsm_state5 = 142'd16;
parameter    ap_ST_fsm_state6 = 142'd32;
parameter    ap_ST_fsm_state7 = 142'd64;
parameter    ap_ST_fsm_state8 = 142'd128;
parameter    ap_ST_fsm_state9 = 142'd256;
parameter    ap_ST_fsm_state10 = 142'd512;
parameter    ap_ST_fsm_state11 = 142'd1024;
parameter    ap_ST_fsm_state12 = 142'd2048;
parameter    ap_ST_fsm_state13 = 142'd4096;
parameter    ap_ST_fsm_state14 = 142'd8192;
parameter    ap_ST_fsm_state15 = 142'd16384;
parameter    ap_ST_fsm_state16 = 142'd32768;
parameter    ap_ST_fsm_state17 = 142'd65536;
parameter    ap_ST_fsm_state18 = 142'd131072;
parameter    ap_ST_fsm_state19 = 142'd262144;
parameter    ap_ST_fsm_state20 = 142'd524288;
parameter    ap_ST_fsm_state21 = 142'd1048576;
parameter    ap_ST_fsm_state22 = 142'd2097152;
parameter    ap_ST_fsm_state23 = 142'd4194304;
parameter    ap_ST_fsm_state24 = 142'd8388608;
parameter    ap_ST_fsm_state25 = 142'd16777216;
parameter    ap_ST_fsm_state26 = 142'd33554432;
parameter    ap_ST_fsm_state27 = 142'd67108864;
parameter    ap_ST_fsm_state28 = 142'd134217728;
parameter    ap_ST_fsm_state29 = 142'd268435456;
parameter    ap_ST_fsm_state30 = 142'd536870912;
parameter    ap_ST_fsm_state31 = 142'd1073741824;
parameter    ap_ST_fsm_state32 = 142'd2147483648;
parameter    ap_ST_fsm_state33 = 142'd4294967296;
parameter    ap_ST_fsm_state34 = 142'd8589934592;
parameter    ap_ST_fsm_state35 = 142'd17179869184;
parameter    ap_ST_fsm_state36 = 142'd34359738368;
parameter    ap_ST_fsm_state37 = 142'd68719476736;
parameter    ap_ST_fsm_state38 = 142'd137438953472;
parameter    ap_ST_fsm_state39 = 142'd274877906944;
parameter    ap_ST_fsm_state40 = 142'd549755813888;
parameter    ap_ST_fsm_state41 = 142'd1099511627776;
parameter    ap_ST_fsm_state42 = 142'd2199023255552;
parameter    ap_ST_fsm_state43 = 142'd4398046511104;
parameter    ap_ST_fsm_state44 = 142'd8796093022208;
parameter    ap_ST_fsm_state45 = 142'd17592186044416;
parameter    ap_ST_fsm_state46 = 142'd35184372088832;
parameter    ap_ST_fsm_state47 = 142'd70368744177664;
parameter    ap_ST_fsm_state48 = 142'd140737488355328;
parameter    ap_ST_fsm_state49 = 142'd281474976710656;
parameter    ap_ST_fsm_state50 = 142'd562949953421312;
parameter    ap_ST_fsm_state51 = 142'd1125899906842624;
parameter    ap_ST_fsm_state52 = 142'd2251799813685248;
parameter    ap_ST_fsm_state53 = 142'd4503599627370496;
parameter    ap_ST_fsm_state54 = 142'd9007199254740992;
parameter    ap_ST_fsm_state55 = 142'd18014398509481984;
parameter    ap_ST_fsm_state56 = 142'd36028797018963968;
parameter    ap_ST_fsm_state57 = 142'd72057594037927936;
parameter    ap_ST_fsm_state58 = 142'd144115188075855872;
parameter    ap_ST_fsm_state59 = 142'd288230376151711744;
parameter    ap_ST_fsm_state60 = 142'd576460752303423488;
parameter    ap_ST_fsm_state61 = 142'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 142'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 142'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 142'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 142'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 142'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 142'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 142'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 142'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 142'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 142'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 142'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 142'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 142'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 142'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 142'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 142'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 142'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 142'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 142'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 142'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 142'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 142'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 142'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 142'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 142'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 142'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 142'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 142'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 142'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 142'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 142'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 142'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 142'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 142'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 142'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 142'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 142'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 142'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 142'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 142'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 142'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 142'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 142'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 142'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 142'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 142'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 142'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 142'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 142'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 142'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 142'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 142'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 142'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 142'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 142'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 142'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 142'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 142'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 142'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 142'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 142'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 142'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 142'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 142'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 142'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 142'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 142'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 142'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 142'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 142'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 142'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 142'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 142'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 142'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 142'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 142'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 142'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 142'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 142'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 142'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 142'd2787593149816327892691964784081045188247552;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] idx;
output  [2:0] sub_address0;
output   sub_ce0;
output   sub_we0;
output  [63:0] sub_d0;
output  [2:0] shape_address0;
output   shape_ce0;
input  [63:0] shape_q0;
input  [63:0] ndim;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] sub_address0;
reg sub_ce0;
reg sub_we0;
reg[63:0] sub_d0;
reg[2:0] shape_address0;
reg shape_ce0;

(* fsm_encoding = "none" *) reg   [141:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] reg_94;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state73;
wire   [31:0] tmp_fu_98_p1;
wire   [0:0] tmp_1_fu_108_p3;
reg   [0:0] tmp_1_reg_172;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_6_fu_116_p1;
reg   [63:0] tmp_6_reg_176;
wire   [63:0] grp_fu_121_p2;
reg   [63:0] tmp_7_reg_186;
wire    ap_CS_fsm_state71;
wire   [63:0] grp_fu_127_p2;
reg   [63:0] idx2_1_reg_191;
wire   [31:0] i_1_fu_133_p2;
reg   [31:0] i_1_reg_197;
wire    ap_CS_fsm_state72;
wire   [63:0] tmp_6_1_fu_147_p1;
reg   [63:0] tmp_6_1_reg_205;
wire   [0:0] tmp_2_fu_139_p3;
wire   [63:0] grp_fu_152_p2;
reg   [63:0] tmp_7_1_reg_215;
wire    ap_CS_fsm_state141;
wire   [63:0] grp_fu_157_p2;
reg   [63:0] idx2_1_1_reg_220;
reg   [63:0] idx2_reg_74;
wire    ap_CS_fsm_state142;
reg   [31:0] i_0_in_reg_84;
wire   [31:0] i_fu_102_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state74;
reg    grp_fu_121_ap_start;
wire    grp_fu_121_ap_done;
reg    grp_fu_127_ap_start;
wire    grp_fu_127_ap_done;
reg    grp_fu_152_ap_start;
wire    grp_fu_152_ap_done;
reg    grp_fu_157_ap_start;
wire    grp_fu_157_ap_done;
reg   [141:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 142'd1;
end

sample_urem_64ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sample_urem_64ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_121_ap_start),
    .done(grp_fu_121_ap_done),
    .din0(idx2_reg_74),
    .din1(reg_94),
    .ce(1'b1),
    .dout(grp_fu_121_p2)
);

sample_udiv_64ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sample_udiv_64ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_127_ap_start),
    .done(grp_fu_127_ap_done),
    .din0(idx2_reg_74),
    .din1(reg_94),
    .ce(1'b1),
    .dout(grp_fu_127_p2)
);

sample_urem_64ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sample_urem_64ns_bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_152_ap_start),
    .done(grp_fu_152_ap_done),
    .din0(idx2_1_reg_191),
    .din1(reg_94),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

sample_udiv_64ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sample_udiv_64ns_cud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_157_ap_start),
    .done(grp_fu_157_ap_done),
    .din0(idx2_1_reg_191),
    .din1(reg_94),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        i_0_in_reg_84 <= i_1_reg_197;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_in_reg_84 <= tmp_fu_98_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        idx2_reg_74 <= idx2_1_1_reg_220;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idx2_reg_74 <= idx;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state72) & (tmp_1_reg_172 == 1'd0))) begin
        i_1_reg_197 <= i_1_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        idx2_1_1_reg_220 <= grp_fu_157_p2;
        tmp_7_1_reg_215 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        idx2_1_reg_191 <= grp_fu_127_p2;
        tmp_7_reg_186 <= grp_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_94 <= shape_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_1_reg_172 <= i_fu_102_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_139_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state72) & (tmp_1_reg_172 == 1'd0))) begin
        tmp_6_1_reg_205[31 : 0] <= tmp_6_1_fu_147_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_108_p3 == 1'd0))) begin
        tmp_6_reg_176[31 : 0] <= tmp_6_fu_116_p1[31 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state72) & ((tmp_2_fu_139_p3 == 1'd1) | (tmp_1_reg_172 == 1'd1))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) & ((tmp_2_fu_139_p3 == 1'd1) | (tmp_1_reg_172 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_121_ap_start = 1'b1;
    end else begin
        grp_fu_121_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_127_ap_start = 1'b1;
    end else begin
        grp_fu_127_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_152_ap_start = 1'b1;
    end else begin
        grp_fu_152_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_157_ap_start = 1'b1;
    end else begin
        grp_fu_157_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        shape_address0 = tmp_6_1_fu_147_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shape_address0 = tmp_6_fu_116_p1;
    end else begin
        shape_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state2))) begin
        shape_ce0 = 1'b1;
    end else begin
        shape_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        sub_address0 = tmp_6_1_reg_205;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        sub_address0 = tmp_6_reg_176;
    end else begin
        sub_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state142) | (1'b1 == ap_CS_fsm_state72))) begin
        sub_ce0 = 1'b1;
    end else begin
        sub_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        sub_d0 = tmp_7_1_reg_215;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        sub_d0 = tmp_7_reg_186;
    end else begin
        sub_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state142) | ((1'b1 == ap_CS_fsm_state72) & (tmp_1_reg_172 == 1'd0)))) begin
        sub_we0 = 1'b1;
    end else begin
        sub_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_108_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == ap_CS_fsm_state72) & ((tmp_2_fu_139_p3 == 1'd1) | (tmp_1_reg_172 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign i_1_fu_133_p2 = ($signed(i_0_in_reg_84) + $signed(32'd4294967294));

assign i_fu_102_p2 = ($signed(i_0_in_reg_84) + $signed(32'd4294967295));

assign tmp_1_fu_108_p3 = i_fu_102_p2[32'd31];

assign tmp_2_fu_139_p3 = i_1_fu_133_p2[32'd31];

assign tmp_6_1_fu_147_p1 = i_1_fu_133_p2;

assign tmp_6_fu_116_p1 = i_fu_102_p2;

assign tmp_fu_98_p1 = ndim[31:0];

always @ (posedge ap_clk) begin
    tmp_6_reg_176[63:32] <= 32'b00000000000000000000000000000000;
    tmp_6_1_reg_205[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //k2c_idx2sub
