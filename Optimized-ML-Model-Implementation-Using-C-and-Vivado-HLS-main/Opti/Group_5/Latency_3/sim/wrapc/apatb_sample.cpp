// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
extern long long unsigned int dense_16_kernel_numel;

extern long long unsigned int dense_16_kernel_dim;

extern long long unsigned int dense_16_bias_numel;

extern long long unsigned int dense_15_output_numel;

extern long long unsigned int dense_15_output_dim;

extern float dense_15_output_array[16];

extern long long unsigned int dense_15_kernel_numel;

extern long long unsigned int dense_15_kernel_dim;

extern float dense_15_fwork[544];

extern long long unsigned int dense_15_bias_numel;

extern long long unsigned int dense_14_output_numel;

extern long long unsigned int dense_14_output_dim;

extern float dense_14_output_array[32];

extern long long unsigned int dense_14_kernel_numel;

extern long long unsigned int dense_14_kernel_dim;

extern float dense_14_fwork[4224];

extern long long unsigned int dense_14_bias_numel;

extern long long unsigned int dense_13_output_numel;

extern long long unsigned int dense_13_output_dim;

extern float dense_13_output_array[128];

extern long long unsigned int dense_13_kernel_numel;

extern long long unsigned int dense_13_kernel_dim;

extern float dense_13_fwork[2580];

extern long long unsigned int dense_13_bias_numel;



// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "dense_13_input_input_array_0"
#define AUTOTB_TVIN_dense_13_input_input_array_0  "../tv/cdatafile/c.sample.autotvin_dense_13_input_input_array_0.dat"
// wrapc file define: "dense_13_input_input_array_1"
#define AUTOTB_TVIN_dense_13_input_input_array_1  "../tv/cdatafile/c.sample.autotvin_dense_13_input_input_array_1.dat"
// wrapc file define: "dense_13_input_input_array_2"
#define AUTOTB_TVIN_dense_13_input_input_array_2  "../tv/cdatafile/c.sample.autotvin_dense_13_input_input_array_2.dat"
// wrapc file define: "dense_13_input_input_array_3"
#define AUTOTB_TVIN_dense_13_input_input_array_3  "../tv/cdatafile/c.sample.autotvin_dense_13_input_input_array_3.dat"
// wrapc file define: "dense_13_input_input_array_4"
#define AUTOTB_TVIN_dense_13_input_input_array_4  "../tv/cdatafile/c.sample.autotvin_dense_13_input_input_array_4.dat"
// wrapc file define: "dense_13_input_input_array_5"
#define AUTOTB_TVIN_dense_13_input_input_array_5  "../tv/cdatafile/c.sample.autotvin_dense_13_input_input_array_5.dat"
// wrapc file define: "dense_13_input_input_array_6"
#define AUTOTB_TVIN_dense_13_input_input_array_6  "../tv/cdatafile/c.sample.autotvin_dense_13_input_input_array_6.dat"
// wrapc file define: "dense_13_input_input_array_7"
#define AUTOTB_TVIN_dense_13_input_input_array_7  "../tv/cdatafile/c.sample.autotvin_dense_13_input_input_array_7.dat"
// wrapc file define: "dense_13_input_input_dim"
#define AUTOTB_TVIN_dense_13_input_input_dim  "../tv/cdatafile/c.sample.autotvin_dense_13_input_input_dim.dat"
// wrapc file define: "dense_13_input_input_numel"
#define AUTOTB_TVIN_dense_13_input_input_numel  "../tv/cdatafile/c.sample.autotvin_dense_13_input_input_numel.dat"
// wrapc file define: "dense_13_input_input_shape"
#define AUTOTB_TVIN_dense_13_input_input_shape  "../tv/cdatafile/c.sample.autotvin_dense_13_input_input_shape.dat"
// wrapc file define: "dense_16_output_arrray"
#define AUTOTB_TVIN_dense_16_output_arrray  "../tv/cdatafile/c.sample.autotvin_dense_16_output_arrray.dat"
#define AUTOTB_TVOUT_dense_16_output_arrray  "../tv/cdatafile/c.sample.autotvout_dense_16_output_arrray.dat"
// wrapc file define: "dense_16_output_numel"
#define AUTOTB_TVIN_dense_16_output_numel  "../tv/cdatafile/c.sample.autotvin_dense_16_output_numel.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "dense_16_output_arrray"
#define AUTOTB_TVOUT_PC_dense_16_output_arrray  "../tv/rtldatafile/rtl.sample.autotvout_dense_16_output_arrray.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			dense_13_input_input_array_0_depth = 0;
			dense_13_input_input_array_1_depth = 0;
			dense_13_input_input_array_2_depth = 0;
			dense_13_input_input_array_3_depth = 0;
			dense_13_input_input_array_4_depth = 0;
			dense_13_input_input_array_5_depth = 0;
			dense_13_input_input_array_6_depth = 0;
			dense_13_input_input_array_7_depth = 0;
			dense_13_input_input_dim_depth = 0;
			dense_13_input_input_numel_depth = 0;
			dense_13_input_input_shape_depth = 0;
			dense_16_output_arrray_depth = 0;
			dense_16_output_numel_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{dense_13_input_input_array_0 " << dense_13_input_input_array_0_depth << "}\n";
			total_list << "{dense_13_input_input_array_1 " << dense_13_input_input_array_1_depth << "}\n";
			total_list << "{dense_13_input_input_array_2 " << dense_13_input_input_array_2_depth << "}\n";
			total_list << "{dense_13_input_input_array_3 " << dense_13_input_input_array_3_depth << "}\n";
			total_list << "{dense_13_input_input_array_4 " << dense_13_input_input_array_4_depth << "}\n";
			total_list << "{dense_13_input_input_array_5 " << dense_13_input_input_array_5_depth << "}\n";
			total_list << "{dense_13_input_input_array_6 " << dense_13_input_input_array_6_depth << "}\n";
			total_list << "{dense_13_input_input_array_7 " << dense_13_input_input_array_7_depth << "}\n";
			total_list << "{dense_13_input_input_dim " << dense_13_input_input_dim_depth << "}\n";
			total_list << "{dense_13_input_input_numel " << dense_13_input_input_numel_depth << "}\n";
			total_list << "{dense_13_input_input_shape " << dense_13_input_input_shape_depth << "}\n";
			total_list << "{dense_16_output_arrray " << dense_16_output_arrray_depth << "}\n";
			total_list << "{dense_16_output_numel " << dense_16_output_numel_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int dense_13_input_input_array_0_depth;
		int dense_13_input_input_array_1_depth;
		int dense_13_input_input_array_2_depth;
		int dense_13_input_input_array_3_depth;
		int dense_13_input_input_array_4_depth;
		int dense_13_input_input_array_5_depth;
		int dense_13_input_input_array_6_depth;
		int dense_13_input_input_array_7_depth;
		int dense_13_input_input_dim_depth;
		int dense_13_input_input_numel_depth;
		int dense_13_input_input_shape_depth;
		int dense_16_output_arrray_depth;
		int dense_16_output_numel_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" void sample (
float dense_13_input_input_array[128],
long long unsigned int dense_13_input_input_dim,
long long unsigned int* dense_13_input_input_numel,
long long unsigned int dense_13_input_input_shape[5],
float dense_16_output_arrray[1],
long long unsigned int dense_16_output_dim,
long long unsigned int* dense_16_output_numel,
long long unsigned int dense_16_output_shape[5]);

extern "C" void AESL_WRAP_sample (
float dense_13_input_input_array[128],
long long unsigned int dense_13_input_input_dim,
long long unsigned int* dense_13_input_input_numel,
long long unsigned int dense_13_input_input_shape[5],
float dense_16_output_arrray[1],
long long unsigned int dense_16_output_dim,
long long unsigned int* dense_16_output_numel,
long long unsigned int dense_16_output_shape[5])
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "dense_16_output_arrray"
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_16_output_arrray, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dense_16_output_arrray, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dense_16_output_arrray, AESL_token); // data

			sc_bv<32> *dense_16_output_arrray_pc_buffer = new sc_bv<32>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_16_output_arrray', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dense_16_output_arrray', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dense_16_output_arrray_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dense_16_output_arrray, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dense_16_output_arrray))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dense_16_output_arrray
				{
					// bitslice(31, 0)
					// {
						// celement: dense_16_output_arrray(31, 0)
						// {
							sc_lv<32>* dense_16_output_arrray_lv0_0_0_1 = new sc_lv<32>[1];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_16_output_arrray(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(dense_16_output_arrray[0]) != NULL) // check the null address if the c port is array or others
								{
									dense_16_output_arrray_lv0_0_0_1[hls_map_index].range(31, 0) = sc_bv<32>(dense_16_output_arrray_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dense_16_output_arrray(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : dense_16_output_arrray[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : dense_16_output_arrray[0]
								// output_left_conversion : *(int*)&dense_16_output_arrray[i_0]
								// output_type_conversion : (dense_16_output_arrray_lv0_0_0_1[hls_map_index]).to_uint64()
								if (&(dense_16_output_arrray[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&dense_16_output_arrray[i_0] = (dense_16_output_arrray_lv0_0_0_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dense_16_output_arrray_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "dense_13_input_input_array_0"
		char* tvin_dense_13_input_input_array_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_13_input_input_array_0);

		// "dense_13_input_input_array_1"
		char* tvin_dense_13_input_input_array_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_13_input_input_array_1);

		// "dense_13_input_input_array_2"
		char* tvin_dense_13_input_input_array_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_13_input_input_array_2);

		// "dense_13_input_input_array_3"
		char* tvin_dense_13_input_input_array_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_13_input_input_array_3);

		// "dense_13_input_input_array_4"
		char* tvin_dense_13_input_input_array_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_13_input_input_array_4);

		// "dense_13_input_input_array_5"
		char* tvin_dense_13_input_input_array_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_13_input_input_array_5);

		// "dense_13_input_input_array_6"
		char* tvin_dense_13_input_input_array_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_13_input_input_array_6);

		// "dense_13_input_input_array_7"
		char* tvin_dense_13_input_input_array_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_13_input_input_array_7);

		// "dense_13_input_input_dim"
		char* tvin_dense_13_input_input_dim = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_13_input_input_dim);

		// "dense_13_input_input_numel"
		char* tvin_dense_13_input_input_numel = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_13_input_input_numel);

		// "dense_13_input_input_shape"
		char* tvin_dense_13_input_input_shape = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_13_input_input_shape);

		// "dense_16_output_arrray"
		char* tvin_dense_16_output_arrray = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_16_output_arrray);
		char* tvout_dense_16_output_arrray = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dense_16_output_arrray);

		// "dense_16_output_numel"
		char* tvin_dense_16_output_numel = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dense_16_output_numel);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_dense_13_input_input_array_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_0, tvin_dense_13_input_input_array_0);

		sc_bv<32>* dense_13_input_input_array_0_tvin_wrapc_buffer = new sc_bv<32>[16];

		// RTL Name: dense_13_input_input_array_0
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_13_input_input_array(31, 0)
				{
					// carray: (0) => (120) @ (8)
					for (int i_0 = 0; i_0 <= 120; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : dense_13_input_input_array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_13_input_input_array[0]
						// regulate_c_name       : dense_13_input_input_array
						// input_type_conversion : *(int*)&dense_13_input_input_array[i_0]
						if (&(dense_13_input_input_array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_13_input_input_array_tmp_mem;
							dense_13_input_input_array_tmp_mem = *(int*)&dense_13_input_input_array[i_0];
							dense_13_input_input_array_0_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_13_input_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 16; i++)
		{
			sprintf(tvin_dense_13_input_input_array_0, "%s\n", (dense_13_input_input_array_0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_0, tvin_dense_13_input_input_array_0);
		}

		tcl_file.set_num(16, &tcl_file.dense_13_input_input_array_0_depth);
		sprintf(tvin_dense_13_input_input_array_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_0, tvin_dense_13_input_input_array_0);

		// release memory allocation
		delete [] dense_13_input_input_array_0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_13_input_input_array_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_1, tvin_dense_13_input_input_array_1);

		sc_bv<32>* dense_13_input_input_array_1_tvin_wrapc_buffer = new sc_bv<32>[16];

		// RTL Name: dense_13_input_input_array_1
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_13_input_input_array(31, 0)
				{
					// carray: (1) => (121) @ (8)
					for (int i_0 = 1; i_0 <= 121; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : dense_13_input_input_array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_13_input_input_array[0]
						// regulate_c_name       : dense_13_input_input_array
						// input_type_conversion : *(int*)&dense_13_input_input_array[i_0]
						if (&(dense_13_input_input_array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_13_input_input_array_tmp_mem;
							dense_13_input_input_array_tmp_mem = *(int*)&dense_13_input_input_array[i_0];
							dense_13_input_input_array_1_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_13_input_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 16; i++)
		{
			sprintf(tvin_dense_13_input_input_array_1, "%s\n", (dense_13_input_input_array_1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_1, tvin_dense_13_input_input_array_1);
		}

		tcl_file.set_num(16, &tcl_file.dense_13_input_input_array_1_depth);
		sprintf(tvin_dense_13_input_input_array_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_1, tvin_dense_13_input_input_array_1);

		// release memory allocation
		delete [] dense_13_input_input_array_1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_13_input_input_array_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_2, tvin_dense_13_input_input_array_2);

		sc_bv<32>* dense_13_input_input_array_2_tvin_wrapc_buffer = new sc_bv<32>[16];

		// RTL Name: dense_13_input_input_array_2
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_13_input_input_array(31, 0)
				{
					// carray: (2) => (122) @ (8)
					for (int i_0 = 2; i_0 <= 122; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : dense_13_input_input_array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_13_input_input_array[0]
						// regulate_c_name       : dense_13_input_input_array
						// input_type_conversion : *(int*)&dense_13_input_input_array[i_0]
						if (&(dense_13_input_input_array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_13_input_input_array_tmp_mem;
							dense_13_input_input_array_tmp_mem = *(int*)&dense_13_input_input_array[i_0];
							dense_13_input_input_array_2_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_13_input_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 16; i++)
		{
			sprintf(tvin_dense_13_input_input_array_2, "%s\n", (dense_13_input_input_array_2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_2, tvin_dense_13_input_input_array_2);
		}

		tcl_file.set_num(16, &tcl_file.dense_13_input_input_array_2_depth);
		sprintf(tvin_dense_13_input_input_array_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_2, tvin_dense_13_input_input_array_2);

		// release memory allocation
		delete [] dense_13_input_input_array_2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_13_input_input_array_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_3, tvin_dense_13_input_input_array_3);

		sc_bv<32>* dense_13_input_input_array_3_tvin_wrapc_buffer = new sc_bv<32>[16];

		// RTL Name: dense_13_input_input_array_3
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_13_input_input_array(31, 0)
				{
					// carray: (3) => (123) @ (8)
					for (int i_0 = 3; i_0 <= 123; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : dense_13_input_input_array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_13_input_input_array[0]
						// regulate_c_name       : dense_13_input_input_array
						// input_type_conversion : *(int*)&dense_13_input_input_array[i_0]
						if (&(dense_13_input_input_array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_13_input_input_array_tmp_mem;
							dense_13_input_input_array_tmp_mem = *(int*)&dense_13_input_input_array[i_0];
							dense_13_input_input_array_3_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_13_input_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 16; i++)
		{
			sprintf(tvin_dense_13_input_input_array_3, "%s\n", (dense_13_input_input_array_3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_3, tvin_dense_13_input_input_array_3);
		}

		tcl_file.set_num(16, &tcl_file.dense_13_input_input_array_3_depth);
		sprintf(tvin_dense_13_input_input_array_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_3, tvin_dense_13_input_input_array_3);

		// release memory allocation
		delete [] dense_13_input_input_array_3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_13_input_input_array_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_4, tvin_dense_13_input_input_array_4);

		sc_bv<32>* dense_13_input_input_array_4_tvin_wrapc_buffer = new sc_bv<32>[16];

		// RTL Name: dense_13_input_input_array_4
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_13_input_input_array(31, 0)
				{
					// carray: (4) => (124) @ (8)
					for (int i_0 = 4; i_0 <= 124; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : dense_13_input_input_array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_13_input_input_array[0]
						// regulate_c_name       : dense_13_input_input_array
						// input_type_conversion : *(int*)&dense_13_input_input_array[i_0]
						if (&(dense_13_input_input_array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_13_input_input_array_tmp_mem;
							dense_13_input_input_array_tmp_mem = *(int*)&dense_13_input_input_array[i_0];
							dense_13_input_input_array_4_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_13_input_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 16; i++)
		{
			sprintf(tvin_dense_13_input_input_array_4, "%s\n", (dense_13_input_input_array_4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_4, tvin_dense_13_input_input_array_4);
		}

		tcl_file.set_num(16, &tcl_file.dense_13_input_input_array_4_depth);
		sprintf(tvin_dense_13_input_input_array_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_4, tvin_dense_13_input_input_array_4);

		// release memory allocation
		delete [] dense_13_input_input_array_4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_13_input_input_array_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_5, tvin_dense_13_input_input_array_5);

		sc_bv<32>* dense_13_input_input_array_5_tvin_wrapc_buffer = new sc_bv<32>[16];

		// RTL Name: dense_13_input_input_array_5
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_13_input_input_array(31, 0)
				{
					// carray: (5) => (125) @ (8)
					for (int i_0 = 5; i_0 <= 125; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : dense_13_input_input_array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_13_input_input_array[0]
						// regulate_c_name       : dense_13_input_input_array
						// input_type_conversion : *(int*)&dense_13_input_input_array[i_0]
						if (&(dense_13_input_input_array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_13_input_input_array_tmp_mem;
							dense_13_input_input_array_tmp_mem = *(int*)&dense_13_input_input_array[i_0];
							dense_13_input_input_array_5_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_13_input_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 16; i++)
		{
			sprintf(tvin_dense_13_input_input_array_5, "%s\n", (dense_13_input_input_array_5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_5, tvin_dense_13_input_input_array_5);
		}

		tcl_file.set_num(16, &tcl_file.dense_13_input_input_array_5_depth);
		sprintf(tvin_dense_13_input_input_array_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_5, tvin_dense_13_input_input_array_5);

		// release memory allocation
		delete [] dense_13_input_input_array_5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_13_input_input_array_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_6, tvin_dense_13_input_input_array_6);

		sc_bv<32>* dense_13_input_input_array_6_tvin_wrapc_buffer = new sc_bv<32>[16];

		// RTL Name: dense_13_input_input_array_6
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_13_input_input_array(31, 0)
				{
					// carray: (6) => (126) @ (8)
					for (int i_0 = 6; i_0 <= 126; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : dense_13_input_input_array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_13_input_input_array[0]
						// regulate_c_name       : dense_13_input_input_array
						// input_type_conversion : *(int*)&dense_13_input_input_array[i_0]
						if (&(dense_13_input_input_array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_13_input_input_array_tmp_mem;
							dense_13_input_input_array_tmp_mem = *(int*)&dense_13_input_input_array[i_0];
							dense_13_input_input_array_6_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_13_input_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 16; i++)
		{
			sprintf(tvin_dense_13_input_input_array_6, "%s\n", (dense_13_input_input_array_6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_6, tvin_dense_13_input_input_array_6);
		}

		tcl_file.set_num(16, &tcl_file.dense_13_input_input_array_6_depth);
		sprintf(tvin_dense_13_input_input_array_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_6, tvin_dense_13_input_input_array_6);

		// release memory allocation
		delete [] dense_13_input_input_array_6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_13_input_input_array_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_7, tvin_dense_13_input_input_array_7);

		sc_bv<32>* dense_13_input_input_array_7_tvin_wrapc_buffer = new sc_bv<32>[16];

		// RTL Name: dense_13_input_input_array_7
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_13_input_input_array(31, 0)
				{
					// carray: (7) => (127) @ (8)
					for (int i_0 = 7; i_0 <= 127; i_0 += 8)
					{
						// sub                   : i_0
						// ori_name              : dense_13_input_input_array[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_13_input_input_array[0]
						// regulate_c_name       : dense_13_input_input_array
						// input_type_conversion : *(int*)&dense_13_input_input_array[i_0]
						if (&(dense_13_input_input_array[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_13_input_input_array_tmp_mem;
							dense_13_input_input_array_tmp_mem = *(int*)&dense_13_input_input_array[i_0];
							dense_13_input_input_array_7_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_13_input_input_array_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 16; i++)
		{
			sprintf(tvin_dense_13_input_input_array_7, "%s\n", (dense_13_input_input_array_7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_7, tvin_dense_13_input_input_array_7);
		}

		tcl_file.set_num(16, &tcl_file.dense_13_input_input_array_7_depth);
		sprintf(tvin_dense_13_input_input_array_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_array_7, tvin_dense_13_input_input_array_7);

		// release memory allocation
		delete [] dense_13_input_input_array_7_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_13_input_input_dim, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_dim, tvin_dense_13_input_input_dim);

		sc_bv<64> dense_13_input_input_dim_tvin_wrapc_buffer;

		// RTL Name: dense_13_input_input_dim
		{
			// bitslice(63, 0)
			{
				// celement: dense_13_input_input_dim(63, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : dense_13_input_input_dim
						// sub_1st_elem          : 
						// ori_name_1st_elem     : dense_13_input_input_dim
						// regulate_c_name       : dense_13_input_input_dim
						// input_type_conversion : dense_13_input_input_dim
						if (&(dense_13_input_input_dim) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> dense_13_input_input_dim_tmp_mem;
							dense_13_input_input_dim_tmp_mem = dense_13_input_input_dim;
							dense_13_input_input_dim_tvin_wrapc_buffer.range(63, 0) = dense_13_input_input_dim_tmp_mem.range(63, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_dense_13_input_input_dim, "%s\n", (dense_13_input_input_dim_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_dim, tvin_dense_13_input_input_dim);
		}

		tcl_file.set_num(1, &tcl_file.dense_13_input_input_dim_depth);
		sprintf(tvin_dense_13_input_input_dim, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_dim, tvin_dense_13_input_input_dim);

		// [[transaction]]
		sprintf(tvin_dense_13_input_input_numel, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_numel, tvin_dense_13_input_input_numel);

		sc_bv<64>* dense_13_input_input_numel_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: dense_13_input_input_numel
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: dense_13_input_input_numel(63, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : dense_13_input_input_numel[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_13_input_input_numel[0]
						// regulate_c_name       : dense_13_input_input_numel
						// input_type_conversion : dense_13_input_input_numel[i_0]
						if (&(dense_13_input_input_numel[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> dense_13_input_input_numel_tmp_mem;
							dense_13_input_input_numel_tmp_mem = dense_13_input_input_numel[i_0];
							dense_13_input_input_numel_tvin_wrapc_buffer[hls_map_index].range(63, 0) = dense_13_input_input_numel_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_dense_13_input_input_numel, "%s\n", (dense_13_input_input_numel_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_numel, tvin_dense_13_input_input_numel);
		}

		tcl_file.set_num(1, &tcl_file.dense_13_input_input_numel_depth);
		sprintf(tvin_dense_13_input_input_numel, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_numel, tvin_dense_13_input_input_numel);

		// release memory allocation
		delete [] dense_13_input_input_numel_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_13_input_input_shape, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_shape, tvin_dense_13_input_input_shape);

		sc_bv<64>* dense_13_input_input_shape_tvin_wrapc_buffer = new sc_bv<64>[5];

		// RTL Name: dense_13_input_input_shape
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: dense_13_input_input_shape(63, 0)
				{
					// carray: (0) => (4) @ (1)
					for (int i_0 = 0; i_0 <= 4; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : dense_13_input_input_shape[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_13_input_input_shape[0]
						// regulate_c_name       : dense_13_input_input_shape
						// input_type_conversion : dense_13_input_input_shape[i_0]
						if (&(dense_13_input_input_shape[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> dense_13_input_input_shape_tmp_mem;
							dense_13_input_input_shape_tmp_mem = dense_13_input_input_shape[i_0];
							dense_13_input_input_shape_tvin_wrapc_buffer[hls_map_index].range(63, 0) = dense_13_input_input_shape_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 5; i++)
		{
			sprintf(tvin_dense_13_input_input_shape, "%s\n", (dense_13_input_input_shape_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_shape, tvin_dense_13_input_input_shape);
		}

		tcl_file.set_num(5, &tcl_file.dense_13_input_input_shape_depth);
		sprintf(tvin_dense_13_input_input_shape, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_13_input_input_shape, tvin_dense_13_input_input_shape);

		// release memory allocation
		delete [] dense_13_input_input_shape_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_16_output_arrray, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_16_output_arrray, tvin_dense_16_output_arrray);

		sc_bv<32>* dense_16_output_arrray_tvin_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: dense_16_output_arrray
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_16_output_arrray(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : dense_16_output_arrray[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_16_output_arrray[0]
						// regulate_c_name       : dense_16_output_arrray
						// input_type_conversion : *(int*)&dense_16_output_arrray[i_0]
						if (&(dense_16_output_arrray[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_16_output_arrray_tmp_mem;
							dense_16_output_arrray_tmp_mem = *(int*)&dense_16_output_arrray[i_0];
							dense_16_output_arrray_tvin_wrapc_buffer[hls_map_index].range(31, 0) = dense_16_output_arrray_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_dense_16_output_arrray, "%s\n", (dense_16_output_arrray_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_16_output_arrray, tvin_dense_16_output_arrray);
		}

		tcl_file.set_num(1, &tcl_file.dense_16_output_arrray_depth);
		sprintf(tvin_dense_16_output_arrray, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_16_output_arrray, tvin_dense_16_output_arrray);

		// release memory allocation
		delete [] dense_16_output_arrray_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_dense_16_output_numel, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dense_16_output_numel, tvin_dense_16_output_numel);

		sc_bv<64>* dense_16_output_numel_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: dense_16_output_numel
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: dense_16_output_numel(63, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : dense_16_output_numel[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_16_output_numel[0]
						// regulate_c_name       : dense_16_output_numel
						// input_type_conversion : dense_16_output_numel[i_0]
						if (&(dense_16_output_numel[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> dense_16_output_numel_tmp_mem;
							dense_16_output_numel_tmp_mem = dense_16_output_numel[i_0];
							dense_16_output_numel_tvin_wrapc_buffer[hls_map_index].range(63, 0) = dense_16_output_numel_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_dense_16_output_numel, "%s\n", (dense_16_output_numel_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dense_16_output_numel, tvin_dense_16_output_numel);
		}

		tcl_file.set_num(1, &tcl_file.dense_16_output_numel_depth);
		sprintf(tvin_dense_16_output_numel, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dense_16_output_numel, tvin_dense_16_output_numel);

		// release memory allocation
		delete [] dense_16_output_numel_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		sample(dense_13_input_input_array, dense_13_input_input_dim, dense_13_input_input_numel, dense_13_input_input_shape, dense_16_output_arrray, dense_16_output_dim, dense_16_output_numel, dense_16_output_shape);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_dense_16_output_arrray, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dense_16_output_arrray, tvout_dense_16_output_arrray);

		sc_bv<32>* dense_16_output_arrray_tvout_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: dense_16_output_arrray
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dense_16_output_arrray(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : dense_16_output_arrray[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : dense_16_output_arrray[0]
						// regulate_c_name       : dense_16_output_arrray
						// input_type_conversion : *(int*)&dense_16_output_arrray[i_0]
						if (&(dense_16_output_arrray[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> dense_16_output_arrray_tmp_mem;
							dense_16_output_arrray_tmp_mem = *(int*)&dense_16_output_arrray[i_0];
							dense_16_output_arrray_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dense_16_output_arrray_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_dense_16_output_arrray, "%s\n", (dense_16_output_arrray_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dense_16_output_arrray, tvout_dense_16_output_arrray);
		}

		tcl_file.set_num(1, &tcl_file.dense_16_output_arrray_depth);
		sprintf(tvout_dense_16_output_arrray, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dense_16_output_arrray, tvout_dense_16_output_arrray);

		// release memory allocation
		delete [] dense_16_output_arrray_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "dense_13_input_input_array_0"
		delete [] tvin_dense_13_input_input_array_0;
		// release memory allocation: "dense_13_input_input_array_1"
		delete [] tvin_dense_13_input_input_array_1;
		// release memory allocation: "dense_13_input_input_array_2"
		delete [] tvin_dense_13_input_input_array_2;
		// release memory allocation: "dense_13_input_input_array_3"
		delete [] tvin_dense_13_input_input_array_3;
		// release memory allocation: "dense_13_input_input_array_4"
		delete [] tvin_dense_13_input_input_array_4;
		// release memory allocation: "dense_13_input_input_array_5"
		delete [] tvin_dense_13_input_input_array_5;
		// release memory allocation: "dense_13_input_input_array_6"
		delete [] tvin_dense_13_input_input_array_6;
		// release memory allocation: "dense_13_input_input_array_7"
		delete [] tvin_dense_13_input_input_array_7;
		// release memory allocation: "dense_13_input_input_dim"
		delete [] tvin_dense_13_input_input_dim;
		// release memory allocation: "dense_13_input_input_numel"
		delete [] tvin_dense_13_input_input_numel;
		// release memory allocation: "dense_13_input_input_shape"
		delete [] tvin_dense_13_input_input_shape;
		// release memory allocation: "dense_16_output_arrray"
		delete [] tvin_dense_16_output_arrray;
		delete [] tvout_dense_16_output_arrray;
		// release memory allocation: "dense_16_output_numel"
		delete [] tvin_dense_16_output_numel;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

