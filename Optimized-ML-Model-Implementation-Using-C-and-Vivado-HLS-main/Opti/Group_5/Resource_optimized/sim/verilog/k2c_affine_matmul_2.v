// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_affine_matmul_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        d_address0,
        d_ce0,
        d_q0,
        outrows
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [4:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [8:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [3:0] d_address0;
output   d_ce0;
input  [31:0] d_q0;
input  [5:0] outrows;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg A_ce0;
reg B_ce0;
reg d_ce0;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_170;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_162_p2;
reg   [31:0] reg_175;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state32;
wire   [9:0] tmp_fu_180_p3;
reg   [9:0] tmp_reg_318;
wire   [9:0] i_39_fu_198_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] i_40_fu_209_p2;
reg   [5:0] i_40_reg_334;
wire    ap_CS_fsm_state3;
wire   [5:0] outrowidx_fu_219_p2;
reg   [5:0] outrowidx_reg_339;
wire   [0:0] exitcond2_fu_204_p2;
wire   [6:0] inneridx_fu_225_p3;
reg   [6:0] inneridx_reg_344;
wire   [8:0] j_cast3_fu_233_p1;
reg   [8:0] j_cast3_reg_349;
wire    ap_CS_fsm_state4;
wire   [63:0] j_cast2_fu_237_p1;
reg   [63:0] j_cast2_reg_354;
wire   [4:0] j_1_fu_251_p2;
reg   [4:0] j_1_reg_362;
reg   [3:0] C_addr_2_reg_367;
wire   [0:0] exitcond1_fu_245_p2;
wire   [5:0] k_2_fu_277_p2;
reg   [5:0] k_2_reg_375;
wire    ap_CS_fsm_state5;
wire   [6:0] sum5_fu_283_p2;
reg   [6:0] sum5_reg_380;
wire   [0:0] exitcond_fu_271_p2;
wire   [8:0] sum8_fu_300_p2;
reg   [8:0] sum8_reg_385;
wire    ap_CS_fsm_state6;
reg   [31:0] A_load_reg_405;
wire    ap_CS_fsm_state7;
reg   [31:0] B_load_reg_410;
wire   [31:0] grp_fu_166_p2;
reg   [31:0] tmp_28_reg_415;
reg   [31:0] d_load_reg_420;
reg   [9:0] i_reg_118;
wire   [0:0] exitcond3_fu_193_p2;
reg   [5:0] i_1_reg_129;
reg   [4:0] j_reg_140;
wire    ap_CS_fsm_state33;
reg   [5:0] k_reg_151;
wire    ap_CS_fsm_state22;
wire   [63:0] i_cast4_fu_188_p1;
wire   [63:0] sum2_cast_fu_262_p1;
wire   [63:0] sum5_cast_fu_305_p1;
wire   [63:0] sum8_cast_fu_309_p1;
wire    ap_CS_fsm_state11;
reg   [31:0] grp_fu_162_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state8;
wire   [1:0] tmp_69_fu_215_p1;
wire   [5:0] j_cast_fu_241_p1;
wire   [5:0] sum2_fu_257_p2;
wire   [6:0] k_cast_fu_267_p1;
wire   [4:0] tmp_71_fu_288_p1;
wire   [8:0] tmp_27_fu_292_p3;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
end

sample_fadd_32ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sample_fadd_32ns_hbi_U120(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_170),
    .din1(grp_fu_162_p1),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

sample_fmul_32ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sample_fmul_32ns_ibs_U121(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_405),
    .din1(B_load_reg_410),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_193_p2 == 1'd1))) begin
        i_1_reg_129 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_245_p2 == 1'd1))) begin
        i_1_reg_129 <= i_40_reg_334;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_193_p2 == 1'd0))) begin
        i_reg_118 <= i_39_fu_198_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_118 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        j_reg_140 <= j_1_reg_362;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_204_p2 == 1'd0))) begin
        j_reg_140 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_245_p2 == 1'd0))) begin
        k_reg_151 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        k_reg_151 <= k_2_reg_375;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        A_load_reg_405 <= A_q0;
        B_load_reg_410 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_245_p2 == 1'd0))) begin
        C_addr_2_reg_367 <= sum2_cast_fu_262_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        d_load_reg_420 <= d_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_40_reg_334 <= i_40_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_204_p2 == 1'd0))) begin
        inneridx_reg_344[6 : 5] <= inneridx_fu_225_p3[6 : 5];
        outrowidx_reg_339[5 : 4] <= outrowidx_fu_219_p2[5 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_362 <= j_1_fu_251_p2;
        j_cast2_reg_354[4 : 0] <= j_cast2_fu_237_p1[4 : 0];
        j_cast3_reg_349[4 : 0] <= j_cast3_fu_233_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_2_reg_375 <= k_2_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_170 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_175 <= grp_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_271_p2 == 1'd0))) begin
        sum5_reg_380 <= sum5_fu_283_p2;
        sum8_reg_385 <= sum8_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_28_reg_415 <= grp_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_318[9 : 4] <= tmp_fu_180_p3[9 : 4];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state5))) begin
        C_address0 = C_addr_2_reg_367;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C_address0 = i_cast4_fu_188_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state33))) begin
        C_d0 = reg_175;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C_d0 = 32'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state33) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_193_p2 == 1'd0)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_204_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_204_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_ce0 = 1'b1;
    end else begin
        d_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_162_p1 = d_load_reg_420;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_162_p1 = tmp_28_reg_415;
    end else begin
        grp_fu_162_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_193_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_204_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_245_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_271_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = sum5_cast_fu_305_p1;

assign B_address0 = sum8_cast_fu_309_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign d_address0 = j_cast2_reg_354;

assign exitcond1_fu_245_p2 = ((j_reg_140 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond2_fu_204_p2 = ((i_1_reg_129 == outrows) ? 1'b1 : 1'b0);

assign exitcond3_fu_193_p2 = ((i_reg_118 == tmp_reg_318) ? 1'b1 : 1'b0);

assign exitcond_fu_271_p2 = ((k_reg_151 == 6'd32) ? 1'b1 : 1'b0);

assign i_39_fu_198_p2 = (i_reg_118 + 10'd1);

assign i_40_fu_209_p2 = (i_1_reg_129 + 6'd1);

assign i_cast4_fu_188_p1 = i_reg_118;

assign inneridx_fu_225_p3 = {{tmp_69_fu_215_p1}, {5'd0}};

assign j_1_fu_251_p2 = (j_reg_140 + 5'd1);

assign j_cast2_fu_237_p1 = j_reg_140;

assign j_cast3_fu_233_p1 = j_reg_140;

assign j_cast_fu_241_p1 = j_reg_140;

assign k_2_fu_277_p2 = (k_reg_151 + 6'd1);

assign k_cast_fu_267_p1 = k_reg_151;

assign outrowidx_fu_219_p2 = i_1_reg_129 << 6'd4;

assign sum2_cast_fu_262_p1 = sum2_fu_257_p2;

assign sum2_fu_257_p2 = (j_cast_fu_241_p1 + outrowidx_reg_339);

assign sum5_cast_fu_305_p1 = sum5_reg_380;

assign sum5_fu_283_p2 = (inneridx_reg_344 + k_cast_fu_267_p1);

assign sum8_cast_fu_309_p1 = sum8_reg_385;

assign sum8_fu_300_p2 = (j_cast3_reg_349 + tmp_27_fu_292_p3);

assign tmp_27_fu_292_p3 = {{tmp_71_fu_288_p1}, {4'd0}};

assign tmp_69_fu_215_p1 = i_1_reg_129[1:0];

assign tmp_71_fu_288_p1 = k_reg_151[4:0];

assign tmp_fu_180_p3 = {{outrows}, {4'd0}};

always @ (posedge ap_clk) begin
    tmp_reg_318[3:0] <= 4'b0000;
    outrowidx_reg_339[3:0] <= 4'b0000;
    inneridx_reg_344[4:0] <= 5'b00000;
    j_cast3_reg_349[8:5] <= 4'b0000;
    j_cast2_reg_354[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //k2c_affine_matmul_2
