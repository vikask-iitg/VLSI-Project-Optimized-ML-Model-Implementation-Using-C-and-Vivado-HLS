-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_affine_matmul_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    d_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    d_ce0 : OUT STD_LOGIC;
    d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outrows : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of k2c_affine_matmul_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (58 downto 0) := "00000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (58 downto 0) := "00000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (58 downto 0) := "00000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (58 downto 0) := "00000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (58 downto 0) := "00000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (58 downto 0) := "00000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (58 downto 0) := "00001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (58 downto 0) := "00010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (58 downto 0) := "00100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (58 downto 0) := "01000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (58 downto 0) := "10000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal outrows_cast_fu_393_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal outrows_cast_reg_765 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_38_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_38_reg_773 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_408_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_778 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond1_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outrowidx_fu_412_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal outrowidx_reg_783 : STD_LOGIC_VECTOR (6 downto 0);
    signal inneridx_fu_420_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal inneridx_reg_788 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_fu_428_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_793 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_cast_fu_438_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast_reg_798 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_fu_448_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_806 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sum3_fu_464_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum3_reg_824 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_s_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a1_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal sum27_fu_684_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum27_reg_919 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_2_fu_690_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_2_reg_924 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal exitcond8_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_745_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_3_reg_957 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal i_reg_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_287 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_298 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp3_reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_320 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_1_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_344 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast4_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum22_cast_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum24_cast_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum26_cast_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum28_cast_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum11_cast_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum29_cast_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum13_cast_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum30_cast_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum15_cast_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum31_cast_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum17_cast_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum32_cast_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum19_cast_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum33_cast_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_355_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal k_cast_fu_454_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum20_fu_476_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum5_fu_487_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_fu_498_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_cast_fu_504_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum21_fu_508_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum7_fu_519_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp18_fu_529_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp18_cast_fu_535_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum22_fu_539_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum9_fu_550_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp29_fu_560_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp29_cast_fu_566_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum23_fu_570_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum11_fu_581_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp32_fu_591_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp310_cast_fu_597_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum24_fu_601_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum13_fu_612_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp33_fu_622_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp411_cast_fu_628_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum25_fu_632_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum15_fu_643_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp34_fu_653_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp512_cast_fu_659_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum26_fu_663_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp35_fu_674_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp613_cast_fu_680_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum17_fu_696_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_1_cast_fu_714_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum19_fu_724_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_1_cast2_fu_710_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum28_fu_734_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_fu_751_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (58 downto 0);

    component sample_fadd_32ns_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_fmul_32ns_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sample_fadd_32ns_hbi_U85 : component sample_fadd_32ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_355_p0,
        din1 => grp_fu_355_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_355_p2);

    sample_fmul_32ns_ibs_U86 : component sample_fmul_32ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_369,
        din1 => reg_375,
        ce => ap_const_logic_1,
        dout => grp_fu_361_p2);

    sample_fmul_32ns_ibs_U87 : component sample_fmul_32ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a1_reg_854,
        din1 => b1_reg_859,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_276 <= i_38_reg_773;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_276 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_718_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                j_reg_287 <= j_2_reg_806;
            elsif (((exitcond1_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_287 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_1_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_1_reg_344 <= ap_const_lv8_78;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                k_1_reg_344 <= k_3_reg_957;
            end if; 
        end if;
    end process;

    k_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                k_reg_320 <= k_2_reg_924;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k_reg_320 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_718_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                phi_mul_reg_298 <= next_mul_reg_793;
            elsif (((exitcond1_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_298 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                reg_369 <= A_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_369 <= A_q0;
            end if; 
        end if;
    end process;

    reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                reg_375 <= B_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_375 <= B_q0;
            end if; 
        end if;
    end process;

    temp3_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                temp3_reg_310 <= grp_fu_355_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                temp3_reg_310 <= d_q0;
            end if; 
        end if;
    end process;

    temp_1_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                temp_1_reg_332 <= temp3_reg_310;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                temp_1_reg_332 <= grp_fu_355_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                a1_reg_854 <= A_q1;
                b1_reg_859 <= B_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_38_reg_773 <= i_38_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    inneridx_reg_788(8 downto 7) <= inneridx_fu_420_p3(8 downto 7);
                    outrowidx_reg_783(6 downto 5) <= outrowidx_fu_412_p3(6 downto 5);
                tmp_reg_778 <= tmp_fu_408_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_2_reg_806 <= j_2_fu_448_p2;
                    j_cast_reg_798(5 downto 0) <= j_cast_fu_438_p1(5 downto 0);
                next_mul_reg_793 <= next_mul_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                k_2_reg_924 <= k_2_fu_690_p2;
                sum27_reg_919 <= sum27_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_718_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                k_3_reg_957 <= k_3_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    outrows_cast_reg_765(7 downto 0) <= outrows_cast_fu_393_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_381 <= grp_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_387 <= grp_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                sum3_reg_824 <= sum3_fu_464_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_58_reg_864 <= grp_fu_365_p2;
            end if;
        end if;
    end process;
    outrows_cast_reg_765(11 downto 8) <= "0000";
    outrowidx_reg_783(4 downto 0) <= "00000";
    inneridx_reg_788(6 downto 0) <= "0000000";
    j_cast_reg_798(6) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_397_p2, ap_CS_fsm_state3, exitcond_fu_442_p2, ap_CS_fsm_state5, tmp_s_fu_458_p2, ap_CS_fsm_state50, exitcond8_fu_718_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((tmp_s_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state50 => 
                if (((exitcond8_fu_718_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state20, ap_CS_fsm_state30, ap_CS_fsm_state50, sum3_cast_fu_471_p1, sum7_cast_fu_524_p1, sum11_cast_fu_586_p1, sum15_cast_fu_648_p1, sum19_cast_fu_729_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            A_address0 <= sum19_cast_fu_729_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            A_address0 <= sum15_cast_fu_648_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            A_address0 <= sum11_cast_fu_586_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_address0 <= sum7_cast_fu_524_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address0 <= sum3_cast_fu_471_p1(7 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state35, sum5_cast_fu_493_p1, sum9_cast_fu_555_p1, sum13_cast_fu_617_p1, sum17_cast_fu_701_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            A_address1 <= sum17_cast_fu_701_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            A_address1 <= sum13_cast_fu_617_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            A_address1 <= sum9_cast_fu_555_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address1 <= sum5_cast_fu_493_p1(7 - 1 downto 0);
        else 
            A_address1 <= "XXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state20, ap_CS_fsm_state30, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state20, ap_CS_fsm_state30, ap_CS_fsm_state50, sum22_cast_fu_482_p1, sum26_cast_fu_545_p1, sum29_cast_fu_607_p1, sum31_cast_fu_669_p1, sum33_cast_fu_740_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            B_address0 <= sum33_cast_fu_740_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            B_address0 <= sum31_cast_fu_669_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            B_address0 <= sum29_cast_fu_607_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            B_address0 <= sum26_cast_fu_545_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            B_address0 <= sum22_cast_fu_482_p1(12 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state35, sum24_cast_fu_514_p1, sum28_cast_fu_576_p1, sum30_cast_fu_638_p1, sum32_cast_fu_706_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            B_address1 <= sum32_cast_fu_706_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            B_address1 <= sum30_cast_fu_638_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            B_address1 <= sum28_cast_fu_576_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            B_address1 <= sum24_cast_fu_514_p1(12 - 1 downto 0);
        else 
            B_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state20, ap_CS_fsm_state30, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= sum_cast_fu_755_p1(5 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= temp_1_reg_332;

    C_we0_assign_proc : process(ap_CS_fsm_state50, exitcond8_fu_718_p2)
    begin
        if (((exitcond8_fu_718_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_397_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond1_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_397_p2)
    begin
        if (((exitcond1_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_address0 <= j_cast4_fu_433_p1(5 - 1 downto 0);

    d_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_ce0 <= ap_const_logic_1;
        else 
            d_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_397_p2 <= "1" when (i_reg_276 = outrows) else "0";
    exitcond8_fu_718_p2 <= "1" when (k_1_reg_344 = ap_const_lv8_80) else "0";
    exitcond_fu_442_p2 <= "1" when (j_reg_287 = ap_const_lv6_20) else "0";

    grp_fu_355_p0_assign_proc : process(reg_381, reg_387, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, temp3_reg_310, temp_1_reg_332, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_355_p0 <= temp_1_reg_332;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_355_p0 <= temp3_reg_310;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_355_p0 <= reg_387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_355_p0 <= reg_381;
        else 
            grp_fu_355_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_355_p1_assign_proc : process(reg_381, reg_387, tmp_58_reg_864, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_355_p1 <= reg_387;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_355_p1 <= reg_381;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_355_p1 <= tmp_58_reg_864;
        else 
            grp_fu_355_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_38_fu_402_p2 <= std_logic_vector(unsigned(i_reg_276) + unsigned(ap_const_lv8_1));
    inneridx_fu_420_p3 <= (tmp_fu_408_p1 & ap_const_lv7_0);
    j_2_fu_448_p2 <= std_logic_vector(unsigned(j_reg_287) + unsigned(ap_const_lv6_1));
    j_cast4_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_287),64));
    j_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_287),7));
    k_1_cast2_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_344),12));
    k_1_cast_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_344),9));
    k_2_fu_690_p2 <= std_logic_vector(unsigned(k_reg_320) + unsigned(ap_const_lv7_8));
    k_3_fu_745_p2 <= std_logic_vector(unsigned(k_1_reg_344) + unsigned(ap_const_lv8_1));
    k_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_320),12));
    next_mul_fu_428_p2 <= std_logic_vector(unsigned(phi_mul_reg_298) + unsigned(outrows_cast_reg_765));
    outrowidx_fu_412_p3 <= (tmp_fu_408_p1 & ap_const_lv5_0);
    outrows_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outrows),12));
    sum11_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum11_fu_581_p2),64));
    sum11_fu_581_p2 <= (sum3_reg_824 or ap_const_lv9_4);
    sum13_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum13_fu_612_p2),64));
    sum13_fu_612_p2 <= (sum3_reg_824 or ap_const_lv9_5);
    sum15_cast_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum15_fu_643_p2),64));
    sum15_fu_643_p2 <= (sum3_reg_824 or ap_const_lv9_6);
    sum17_cast_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum17_fu_696_p2),64));
    sum17_fu_696_p2 <= (sum3_reg_824 or ap_const_lv9_7);
    sum19_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum19_fu_724_p2),64));
    sum19_fu_724_p2 <= std_logic_vector(unsigned(k_1_cast_fu_714_p1) + unsigned(inneridx_reg_788));
    sum20_fu_476_p2 <= std_logic_vector(unsigned(phi_mul_reg_298) + unsigned(k_cast_fu_454_p1));
    sum21_fu_508_p2 <= std_logic_vector(unsigned(phi_mul_reg_298) + unsigned(tmp7_cast_fu_504_p1));
    sum22_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum20_fu_476_p2),64));
    sum22_fu_539_p2 <= std_logic_vector(unsigned(phi_mul_reg_298) + unsigned(tmp18_cast_fu_535_p1));
    sum23_fu_570_p2 <= std_logic_vector(unsigned(phi_mul_reg_298) + unsigned(tmp29_cast_fu_566_p1));
    sum24_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum21_fu_508_p2),64));
    sum24_fu_601_p2 <= std_logic_vector(unsigned(phi_mul_reg_298) + unsigned(tmp310_cast_fu_597_p1));
    sum25_fu_632_p2 <= std_logic_vector(unsigned(phi_mul_reg_298) + unsigned(tmp411_cast_fu_628_p1));
    sum26_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum22_fu_539_p2),64));
    sum26_fu_663_p2 <= std_logic_vector(unsigned(phi_mul_reg_298) + unsigned(tmp512_cast_fu_659_p1));
    sum27_fu_684_p2 <= std_logic_vector(unsigned(phi_mul_reg_298) + unsigned(tmp613_cast_fu_680_p1));
    sum28_cast_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum23_fu_570_p2),64));
    sum28_fu_734_p2 <= std_logic_vector(unsigned(k_1_cast2_fu_710_p1) + unsigned(phi_mul_reg_298));
    sum29_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum24_fu_601_p2),64));
    sum30_cast_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum25_fu_632_p2),64));
    sum31_cast_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum26_fu_663_p2),64));
    sum32_cast_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum27_reg_919),64));
    sum33_cast_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum28_fu_734_p2),64));
    sum3_cast_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_464_p3),64));
    sum3_fu_464_p3 <= (tmp_reg_778 & k_reg_320);
    sum5_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_487_p2),64));
    sum5_fu_487_p2 <= (sum3_fu_464_p3 or ap_const_lv9_1);
    sum7_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_fu_519_p2),64));
    sum7_fu_519_p2 <= (sum3_reg_824 or ap_const_lv9_2);
    sum9_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_fu_550_p2),64));
    sum9_fu_550_p2 <= (sum3_reg_824 or ap_const_lv9_3);
    sum_cast_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_751_p2),64));
    sum_fu_751_p2 <= std_logic_vector(unsigned(j_cast_reg_798) + unsigned(outrowidx_reg_783));
    tmp18_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp18_fu_529_p2),12));
    tmp18_fu_529_p2 <= (k_reg_320 or ap_const_lv7_2);
    tmp29_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp29_fu_560_p2),12));
    tmp29_fu_560_p2 <= (k_reg_320 or ap_const_lv7_3);
    tmp310_cast_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp32_fu_591_p2),12));
    tmp32_fu_591_p2 <= (k_reg_320 or ap_const_lv7_4);
    tmp33_fu_622_p2 <= (k_reg_320 or ap_const_lv7_5);
    tmp34_fu_653_p2 <= (k_reg_320 or ap_const_lv7_6);
    tmp35_fu_674_p2 <= (k_reg_320 or ap_const_lv7_7);
    tmp411_cast_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp33_fu_622_p2),12));
    tmp512_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp34_fu_653_p2),12));
    tmp613_cast_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp35_fu_674_p2),12));
    tmp7_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_498_p2),12));
    tmp7_fu_498_p2 <= (k_reg_320 or ap_const_lv7_1);
    tmp_fu_408_p1 <= i_reg_276(2 - 1 downto 0);
    tmp_s_fu_458_p2 <= "1" when (k_reg_320 = ap_const_lv7_78) else "0";
end behav;
