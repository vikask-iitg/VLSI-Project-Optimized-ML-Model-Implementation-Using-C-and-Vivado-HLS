-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_dense_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_array_ce0 : OUT STD_LOGIC;
    output_array_we0 : OUT STD_LOGIC;
    output_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_array_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_array_ce1 : OUT STD_LOGIC;
    output_array_we1 : OUT STD_LOGIC;
    output_array_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_array_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_array_ce0 : OUT STD_LOGIC;
    input_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_shape_ce0 : OUT STD_LOGIC;
    input_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    kernel_array_ce0 : OUT STD_LOGIC;
    kernel_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    kernel_shape_ce0 : OUT STD_LOGIC;
    kernel_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bias_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    bias_array_ce0 : OUT STD_LOGIC;
    bias_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fwork_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    fwork_ce0 : OUT STD_LOGIC;
    fwork_we0 : OUT STD_LOGIC;
    fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fwork_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    fwork_ce1 : OUT STD_LOGIC;
    fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of k2c_dense_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i2_reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_207 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state17_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal tmp_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_278_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_reg_471 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_498 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_43_fu_324_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_43_reg_508 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_28_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_array_load_reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal output_array_addr_2_reg_523 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_i_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal exitcond9_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_65_fu_346_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal output_array_addr_reg_542 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_reg_542_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_reg_542_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_reg_542_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal notlhs_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_548 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_548_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_553_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_558 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal outrows1_fu_396_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal outrows1_reg_566 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal outcols_reg_572 : STD_LOGIC_VECTOR (63 downto 0);
    signal innerdim_reg_583 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_588 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal exitcond1_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_64_fu_412_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal output_array_addr_1_reg_602 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_1_reg_602_pp1_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_1_reg_602_pp1_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_1_reg_602_pp1_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal notlhs4_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_reg_608_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs5_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs5_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs5_reg_613_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_618 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state17 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state30 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal grp_k2c_dot_fu_219_ap_start : STD_LOGIC;
    signal grp_k2c_dot_fu_219_ap_done : STD_LOGIC;
    signal grp_k2c_dot_fu_219_ap_idle : STD_LOGIC;
    signal grp_k2c_dot_fu_219_ap_ready : STD_LOGIC;
    signal grp_k2c_dot_fu_219_C_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_dot_fu_219_C_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_219_C_array_we0 : STD_LOGIC;
    signal grp_k2c_dot_fu_219_C_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_fu_219_A_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_dot_fu_219_A_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_219_A_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dot_fu_219_A_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_219_B_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_dot_fu_219_B_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_219_B_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dot_fu_219_B_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_219_fwork_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dot_fu_219_fwork_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_219_fwork_we0 : STD_LOGIC;
    signal grp_k2c_dot_fu_219_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_fu_219_fwork_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dot_fu_219_fwork_ce1 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_240_ap_start : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_240_ap_done : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_240_ap_idle : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_240_ap_ready : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_240_C_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_affine_matmul_fu_240_C_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_240_C_we0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_240_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_affine_matmul_fu_240_A_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_affine_matmul_fu_240_A_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_240_B_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_affine_matmul_fu_240_B_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_240_d_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_affine_matmul_fu_240_d_ce0 : STD_LOGIC;
    signal i_i_reg_173 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_i_reg_185 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_k2c_dot_fu_219_ap_start_reg : STD_LOGIC := '0';
    signal grp_k2c_affine_matmul_fu_240_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal j_i_cast2_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_cast_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i2_cast1_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_16_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_67_fu_285_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal output_array_load_to_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_361_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_371_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_14_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_array_load_1_s_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_422_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_432_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_7_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal grp_fu_403_ce : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component k2c_dot IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        C_array_ce0 : OUT STD_LOGIC;
        C_array_we0 : OUT STD_LOGIC;
        C_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        A_array_ce0 : OUT STD_LOGIC;
        A_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        A_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        A_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_shape_ce0 : OUT STD_LOGIC;
        A_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        B_array_ce0 : OUT STD_LOGIC;
        B_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_shape_ce0 : OUT STD_LOGIC;
        B_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        axesA_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
        fwork_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        fwork_ce0 : OUT STD_LOGIC;
        fwork_we0 : OUT STD_LOGIC;
        fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fwork_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        fwork_ce1 : OUT STD_LOGIC;
        fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2c_affine_matmul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        d_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        d_ce0 : OUT STD_LOGIC;
        d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outrows : IN STD_LOGIC_VECTOR (63 downto 0);
        outcols : IN STD_LOGIC_VECTOR (63 downto 0);
        innerdim : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sample0_fadd_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample0_fcmp_32nslbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sample0_mul_64s_6bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_k2c_dot_fu_219 : component k2c_dot
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_dot_fu_219_ap_start,
        ap_done => grp_k2c_dot_fu_219_ap_done,
        ap_idle => grp_k2c_dot_fu_219_ap_idle,
        ap_ready => grp_k2c_dot_fu_219_ap_ready,
        C_array_address0 => grp_k2c_dot_fu_219_C_array_address0,
        C_array_ce0 => grp_k2c_dot_fu_219_C_array_ce0,
        C_array_we0 => grp_k2c_dot_fu_219_C_array_we0,
        C_array_d0 => grp_k2c_dot_fu_219_C_array_d0,
        C_array_q0 => output_array_q0,
        A_array_address0 => grp_k2c_dot_fu_219_A_array_address0,
        A_array_ce0 => grp_k2c_dot_fu_219_A_array_ce0,
        A_array_q0 => input_array_q0,
        A_ndim_read => input_ndim_read,
        A_numel_read => input_numel_read,
        A_shape_address0 => grp_k2c_dot_fu_219_A_shape_address0,
        A_shape_ce0 => grp_k2c_dot_fu_219_A_shape_ce0,
        A_shape_q0 => input_shape_q0,
        B_array_address0 => grp_k2c_dot_fu_219_B_array_address0,
        B_array_ce0 => grp_k2c_dot_fu_219_B_array_ce0,
        B_array_q0 => kernel_array_q0,
        B_shape_address0 => grp_k2c_dot_fu_219_B_shape_address0,
        B_shape_ce0 => grp_k2c_dot_fu_219_B_shape_ce0,
        B_shape_q0 => kernel_shape_q0,
        axesA_0_read => tmp_26_reg_471,
        fwork_address0 => grp_k2c_dot_fu_219_fwork_address0,
        fwork_ce0 => grp_k2c_dot_fu_219_fwork_ce0,
        fwork_we0 => grp_k2c_dot_fu_219_fwork_we0,
        fwork_d0 => grp_k2c_dot_fu_219_fwork_d0,
        fwork_q0 => fwork_q0,
        fwork_address1 => grp_k2c_dot_fu_219_fwork_address1,
        fwork_ce1 => grp_k2c_dot_fu_219_fwork_ce1,
        fwork_q1 => fwork_q1);

    grp_k2c_affine_matmul_fu_240 : component k2c_affine_matmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_affine_matmul_fu_240_ap_start,
        ap_done => grp_k2c_affine_matmul_fu_240_ap_done,
        ap_idle => grp_k2c_affine_matmul_fu_240_ap_idle,
        ap_ready => grp_k2c_affine_matmul_fu_240_ap_ready,
        C_address0 => grp_k2c_affine_matmul_fu_240_C_address0,
        C_ce0 => grp_k2c_affine_matmul_fu_240_C_ce0,
        C_we0 => grp_k2c_affine_matmul_fu_240_C_we0,
        C_d0 => grp_k2c_affine_matmul_fu_240_C_d0,
        C_q0 => output_array_q0,
        A_address0 => grp_k2c_affine_matmul_fu_240_A_address0,
        A_ce0 => grp_k2c_affine_matmul_fu_240_A_ce0,
        A_q0 => input_array_q0,
        B_address0 => grp_k2c_affine_matmul_fu_240_B_address0,
        B_ce0 => grp_k2c_affine_matmul_fu_240_B_ce0,
        B_q0 => kernel_array_q0,
        d_address0 => grp_k2c_affine_matmul_fu_240_d_address0,
        d_ce0 => grp_k2c_affine_matmul_fu_240_d_ce0,
        d_q0 => bias_array_q0,
        outrows => outrows1_reg_566,
        outcols => outcols_reg_572,
        innerdim => innerdim_reg_583);

    sample0_fadd_32nscud_U57 : component sample0_fadd_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_265,
        din1 => bias_array_load_reg_518,
        ce => ap_const_logic_1,
        dout => grp_fu_256_p2);

    sample0_fcmp_32nslbW_U58 : component sample0_fcmp_32nslbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_265,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_260_p2);

    sample0_mul_64s_6bkb_U59 : component sample0_mul_64s_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => outcols_reg_572,
        din1 => outrows1_reg_566,
        ce => grp_fu_403_ce,
        dout => grp_fu_403_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_301_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state17);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_301_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state30) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state30)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state30);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_affine_matmul_fu_240_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_affine_matmul_fu_240_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_k2c_affine_matmul_fu_240_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_affine_matmul_fu_240_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_affine_matmul_fu_240_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_dot_fu_219_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_dot_fu_219_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_272_p2 = ap_const_lv1_0))) then 
                    grp_k2c_dot_fu_219_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_dot_fu_219_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_dot_fu_219_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_301_p2 = ap_const_lv1_1))) then 
                i2_reg_196 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond9_fu_340_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i2_reg_196 <= i_65_fu_346_p2;
            end if; 
        end if;
    end process;

    i_i_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_312_p2 = ap_const_lv1_1))) then 
                i_i_reg_173 <= i_28_fu_330_p2;
            elsif (((grp_k2c_dot_fu_219_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_173 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_reg_207 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond1_fu_407_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_reg_207 <= i_64_fu_412_p2;
            end if; 
        end if;
    end process;

    j_i_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_301_p2 = ap_const_lv1_0))) then 
                j_i_reg_185 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_i_reg_185 <= j_reg_498;
            end if; 
        end if;
    end process;

    reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                reg_265 <= output_array_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                reg_265 <= output_array_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                bias_array_load_reg_518 <= bias_array_q0;
                    output_array_addr_2_reg_523(7 downto 0) <= tmp_i_cast_fu_336_p1(14 - 1 downto 0)(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_272_p2 = ap_const_lv1_1))) then
                icmp_reg_476 <= icmp_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                innerdim_reg_583 <= kernel_shape_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_498 <= j_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                notlhs4_reg_608 <= notlhs4_fu_436_p2;
                notlhs4_reg_608_pp1_iter3_reg <= notlhs4_reg_608;
                notrhs5_reg_613 <= notrhs5_fu_442_p2;
                notrhs5_reg_613_pp1_iter3_reg <= notrhs5_reg_613;
                output_array_addr_1_reg_602_pp1_iter2_reg <= output_array_addr_1_reg_602_pp1_iter1_reg;
                output_array_addr_1_reg_602_pp1_iter3_reg <= output_array_addr_1_reg_602_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                notlhs_reg_548 <= notlhs_fu_375_p2;
                notlhs_reg_548_pp0_iter3_reg <= notlhs_reg_548;
                notrhs_reg_553 <= notrhs_fu_381_p2;
                notrhs_reg_553_pp0_iter3_reg <= notrhs_reg_553;
                    output_array_addr_reg_542_pp0_iter2_reg(7 downto 0) <= output_array_addr_reg_542_pp0_iter1_reg(7 downto 0);
                    output_array_addr_reg_542_pp0_iter3_reg(7 downto 0) <= output_array_addr_reg_542_pp0_iter2_reg(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                outcols_reg_572 <= kernel_shape_q0;
                outrows1_reg_566 <= outrows1_fu_396_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond1_fu_407_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                output_array_addr_1_reg_602 <= i_reg_207(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                output_array_addr_1_reg_602_pp1_iter1_reg <= output_array_addr_1_reg_602;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond9_fu_340_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    output_array_addr_reg_542(7 downto 0) <= i2_cast1_fu_352_p1(14 - 1 downto 0)(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    output_array_addr_reg_542_pp0_iter1_reg(7 downto 0) <= output_array_addr_reg_542(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_15_reg_558 <= grp_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_272_p2 = ap_const_lv1_0))) then
                tmp_26_reg_471 <= tmp_26_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_43_i_reg_528 <= grp_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_8_reg_618 <= grp_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_312_p2 = ap_const_lv1_0))) then
                tmp_i_43_reg_508 <= tmp_i_43_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp_s_reg_588 <= grp_fu_403_p2;
            end if;
        end if;
    end process;
    output_array_addr_2_reg_523(13 downto 8) <= "000000";
    output_array_addr_reg_542(13 downto 8) <= "000000";
    output_array_addr_reg_542_pp0_iter1_reg(13 downto 8) <= "000000";
    output_array_addr_reg_542_pp0_iter2_reg(13 downto 8) <= "000000";
    output_array_addr_reg_542_pp0_iter3_reg(13 downto 8) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, tmp_fu_272_p2, tmp_i_fu_301_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_312_p2, exitcond9_fu_340_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, exitcond1_fu_407_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter4, grp_k2c_dot_fu_219_ap_done, grp_k2c_affine_matmul_fu_240_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_272_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_272_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_k2c_dot_fu_219_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_301_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_312_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond9_fu_340_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond9_fu_340_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_k2c_affine_matmul_fu_240_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond1_fu_407_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond1_fu_407_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(18);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state26 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(22);
    ap_CS_fsm_state28 <= ap_CS_fsm(23);
    ap_CS_fsm_state29 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(26);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state17_assign_proc : process(exitcond9_fu_340_p2)
    begin
        if ((exitcond9_fu_340_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state30_assign_proc : process(exitcond1_fu_407_p2)
    begin
        if ((exitcond1_fu_407_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state30 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bias_array_address0_assign_proc : process(ap_CS_fsm_state4, grp_k2c_affine_matmul_fu_240_d_address0, ap_CS_fsm_state25, j_i_cast2_fu_307_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_array_address0 <= j_i_cast2_fu_307_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            bias_array_address0 <= grp_k2c_affine_matmul_fu_240_d_address0;
        else 
            bias_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    bias_array_ce0_assign_proc : process(ap_CS_fsm_state4, grp_k2c_affine_matmul_fu_240_d_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            bias_array_ce0 <= grp_k2c_affine_matmul_fu_240_d_ce0;
        else 
            bias_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_407_p2 <= "1" when (i_reg_207 = tmp_s_reg_588) else "0";
    exitcond9_fu_340_p2 <= "1" when (i2_reg_196 = ap_const_lv8_80) else "0";
    exitcond_i_fu_312_p2 <= "1" when (j_i_reg_185 = ap_const_lv8_80) else "0";
    fwork_address0 <= grp_k2c_dot_fu_219_fwork_address0;
    fwork_address1 <= grp_k2c_dot_fu_219_fwork_address1;
    fwork_ce0 <= grp_k2c_dot_fu_219_fwork_ce0;
    fwork_ce1 <= grp_k2c_dot_fu_219_fwork_ce1;
    fwork_d0 <= grp_k2c_dot_fu_219_fwork_d0;
    fwork_we0 <= grp_k2c_dot_fu_219_fwork_we0;

    grp_fu_403_ce_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state29, grp_k2c_affine_matmul_fu_240_ap_done, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((grp_k2c_affine_matmul_fu_240_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            grp_fu_403_ce <= ap_const_logic_1;
        else 
            grp_fu_403_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_k2c_affine_matmul_fu_240_ap_start <= grp_k2c_affine_matmul_fu_240_ap_start_reg;
    grp_k2c_dot_fu_219_ap_start <= grp_k2c_dot_fu_219_ap_start_reg;
    i2_cast1_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_196),64));
    i_28_fu_330_p2 <= (i_i_reg_173 xor ap_const_lv8_80);
    i_64_fu_412_p2 <= std_logic_vector(unsigned(i_reg_207) + unsigned(ap_const_lv64_1));
    i_65_fu_346_p2 <= std_logic_vector(unsigned(i2_reg_196) + unsigned(ap_const_lv8_1));
    icmp_fu_295_p2 <= "0" when (tmp_67_fu_285_p4 = ap_const_lv63_0) else "1";

    input_array_address0_assign_proc : process(grp_k2c_dot_fu_219_A_array_address0, grp_k2c_affine_matmul_fu_240_A_address0, ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input_array_address0 <= grp_k2c_affine_matmul_fu_240_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_address0 <= grp_k2c_dot_fu_219_A_array_address0;
        else 
            input_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_array_ce0_assign_proc : process(grp_k2c_dot_fu_219_A_array_ce0, grp_k2c_affine_matmul_fu_240_A_ce0, ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input_array_ce0 <= grp_k2c_affine_matmul_fu_240_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_ce0 <= grp_k2c_dot_fu_219_A_array_ce0;
        else 
            input_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_shape_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_272_p2, grp_k2c_dot_fu_219_A_shape_address0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_272_p2 = ap_const_lv1_1))) then 
            input_shape_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_shape_address0 <= grp_k2c_dot_fu_219_A_shape_address0;
        else 
            input_shape_address0 <= "XXX";
        end if; 
    end process;


    input_shape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_272_p2, grp_k2c_dot_fu_219_A_shape_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_272_p2 = ap_const_lv1_1))) then 
            input_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_shape_ce0 <= grp_k2c_dot_fu_219_A_shape_ce0;
        else 
            input_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_318_p2 <= std_logic_vector(unsigned(j_i_reg_185) + unsigned(ap_const_lv8_1));
    j_i_cast2_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_185),64));

    kernel_array_address0_assign_proc : process(grp_k2c_dot_fu_219_B_array_address0, grp_k2c_affine_matmul_fu_240_B_address0, ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            kernel_array_address0 <= grp_k2c_affine_matmul_fu_240_B_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_array_address0 <= grp_k2c_dot_fu_219_B_array_address0;
        else 
            kernel_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    kernel_array_ce0_assign_proc : process(grp_k2c_dot_fu_219_B_array_ce0, grp_k2c_affine_matmul_fu_240_B_ce0, ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            kernel_array_ce0 <= grp_k2c_affine_matmul_fu_240_B_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_array_ce0 <= grp_k2c_dot_fu_219_B_array_ce0;
        else 
            kernel_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_shape_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_272_p2, ap_CS_fsm_state23, grp_k2c_dot_fu_219_B_shape_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            kernel_shape_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_272_p2 = ap_const_lv1_1))) then 
            kernel_shape_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_shape_address0 <= grp_k2c_dot_fu_219_B_shape_address0;
        else 
            kernel_shape_address0 <= "XXX";
        end if; 
    end process;


    kernel_shape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_272_p2, ap_CS_fsm_state23, grp_k2c_dot_fu_219_B_shape_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_272_p2 = ap_const_lv1_1)))) then 
            kernel_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_shape_ce0 <= grp_k2c_dot_fu_219_B_shape_ce0;
        else 
            kernel_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs4_fu_436_p2 <= "0" when (tmp_5_fu_422_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_375_p2 <= "0" when (tmp_12_fu_361_p4 = ap_const_lv8_FF) else "1";
    notrhs5_fu_442_p2 <= "1" when (tmp_68_fu_432_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_381_p2 <= "1" when (tmp_69_fu_371_p1 = ap_const_lv23_0) else "0";

    output_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, output_array_addr_2_reg_523, ap_enable_reg_pp0_iter0, output_array_addr_1_reg_602_pp1_iter3_reg, ap_enable_reg_pp1_iter4, grp_k2c_dot_fu_219_C_array_address0, grp_k2c_affine_matmul_fu_240_C_address0, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state25, tmp_i_cast_fu_336_p1, i2_cast1_fu_352_p1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            output_array_address0 <= output_array_addr_1_reg_602_pp1_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_array_address0 <= i2_cast1_fu_352_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_array_address0 <= output_array_addr_2_reg_523;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_array_address0 <= tmp_i_cast_fu_336_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_array_address0 <= grp_k2c_affine_matmul_fu_240_C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_address0 <= grp_k2c_dot_fu_219_C_array_address0;
        else 
            output_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_address1_assign_proc : process(i_reg_207, ap_CS_fsm_pp1_stage0, output_array_addr_reg_542_pp0_iter3_reg, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_array_address1 <= i_reg_207(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_array_address1 <= output_array_addr_reg_542_pp0_iter3_reg;
        else 
            output_array_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter4, grp_k2c_dot_fu_219_C_array_ce0, grp_k2c_affine_matmul_fu_240_C_ce0, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_array_ce0 <= grp_k2c_affine_matmul_fu_240_C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_ce0 <= grp_k2c_dot_fu_219_C_array_ce0;
        else 
            output_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_array_ce1 <= ap_const_logic_1;
        else 
            output_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_d0_assign_proc : process(tmp_43_i_reg_528, ap_enable_reg_pp1_iter4, grp_k2c_dot_fu_219_C_array_d0, grp_k2c_affine_matmul_fu_240_C_d0, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            output_array_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_array_d0 <= tmp_43_i_reg_528;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_array_d0 <= grp_k2c_affine_matmul_fu_240_C_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_d0 <= grp_k2c_dot_fu_219_C_array_d0;
        else 
            output_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    output_array_d1 <= ap_const_lv32_0;
    output_array_load_1_s_fu_418_p1 <= reg_265;
    output_array_load_to_fu_357_p1 <= reg_265;

    output_array_we0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4, grp_k2c_dot_fu_219_C_array_we0, grp_k2c_affine_matmul_fu_240_C_we0, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state25, tmp_11_fu_452_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (tmp_11_fu_452_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_array_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_array_we0 <= grp_k2c_affine_matmul_fu_240_C_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_we0 <= grp_k2c_dot_fu_219_C_array_we0;
        else 
            output_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4, tmp_16_fu_391_p2)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_16_fu_391_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_array_we1 <= ap_const_logic_1;
        else 
            output_array_we1 <= ap_const_logic_0;
        end if; 
    end process;

    outrows1_fu_396_p3 <= 
        input_shape_q0 when (icmp_reg_476(0) = '1') else 
        ap_const_lv64_1;
    tmp_11_fu_452_p2 <= (tmp_8_reg_618 and tmp_7_fu_448_p2);
    tmp_12_fu_361_p4 <= output_array_load_to_fu_357_p1(30 downto 23);
    tmp_14_fu_387_p2 <= (notrhs_reg_553_pp0_iter3_reg or notlhs_reg_548_pp0_iter3_reg);
    tmp_16_fu_391_p2 <= (tmp_15_reg_558 and tmp_14_fu_387_p2);
    tmp_26_fu_278_p2 <= std_logic_vector(unsigned(input_ndim_read) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    tmp_5_fu_422_p4 <= output_array_load_1_s_fu_418_p1(30 downto 23);
    tmp_67_fu_285_p4 <= input_ndim_read(63 downto 1);
    tmp_68_fu_432_p1 <= output_array_load_1_s_fu_418_p1(23 - 1 downto 0);
    tmp_69_fu_371_p1 <= output_array_load_to_fu_357_p1(23 - 1 downto 0);
    tmp_7_fu_448_p2 <= (notrhs5_reg_613_pp1_iter3_reg or notlhs4_reg_608_pp1_iter3_reg);
    tmp_fu_272_p2 <= "1" when (unsigned(input_ndim_read) < unsigned(ap_const_lv64_3)) else "0";
    tmp_i_43_fu_324_p2 <= std_logic_vector(unsigned(j_i_reg_185) + unsigned(i_i_reg_173));
    tmp_i_cast_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_43_reg_508),64));
    tmp_i_fu_301_p2 <= "1" when (i_i_reg_173 = ap_const_lv8_80) else "0";
end behav;
