// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "k2c_sub2idx.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic k2c_sub2idx::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic k2c_sub2idx::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state1 = "1";
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state2 = "10";
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state3 = "100";
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state4 = "1000";
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state5 = "10000";
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state6 = "100000";
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> k2c_sub2idx::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> k2c_sub2idx::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> k2c_sub2idx::ap_const_lv32_1 = "1";
const sc_lv<1> k2c_sub2idx::ap_const_lv1_0 = "0";
const sc_lv<32> k2c_sub2idx::ap_const_lv32_2 = "10";
const sc_lv<32> k2c_sub2idx::ap_const_lv32_3 = "11";
const sc_lv<32> k2c_sub2idx::ap_const_lv32_4 = "100";
const sc_lv<1> k2c_sub2idx::ap_const_lv1_1 = "1";
const sc_lv<32> k2c_sub2idx::ap_const_lv32_5 = "101";
const sc_lv<32> k2c_sub2idx::ap_const_lv32_B = "1011";
const sc_lv<64> k2c_sub2idx::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<3> k2c_sub2idx::ap_const_lv3_0 = "000";
const sc_lv<3> k2c_sub2idx::ap_const_lv3_1 = "1";
const sc_lv<64> k2c_sub2idx::ap_const_lv64_FFFFFFFFFFFFFFFF = "1111111111111111111111111111111111111111111111111111111111111111";
const sc_lv<32> k2c_sub2idx::ap_const_lv32_6 = "110";
const bool k2c_sub2idx::ap_const_boolean_1 = true;

k2c_sub2idx::k2c_sub2idx(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sample0_mul_64s_6bkb_U1 = new sample0_mul_64s_6bkb<1,6,64,64,64>("sample0_mul_64s_6bkb_U1");
    sample0_mul_64s_6bkb_U1->clk(ap_clk);
    sample0_mul_64s_6bkb_U1->reset(ap_rst);
    sample0_mul_64s_6bkb_U1->din0(shape_load_reg_188);
    sample0_mul_64s_6bkb_U1->din1(temp1_reg_80);
    sample0_mul_64s_6bkb_U1->ce(ap_var_for_const0);
    sample0_mul_64s_6bkb_U1->dout(grp_fu_130_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_103_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_103_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_103_p2 );
    sensitive << ( idx_reg_48 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_exitcond_fu_103_p2);
    sensitive << ( tmp_1_reg_140 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_cast_fu_99_p1 );

    SC_METHOD(thread_i_1_fu_108_p2);
    sensitive << ( i_reg_60 );

    SC_METHOD(thread_i_cast1_fu_94_p1);
    sensitive << ( i_reg_60 );

    SC_METHOD(thread_i_cast_fu_99_p1);
    sensitive << ( i_reg_60 );

    SC_METHOD(thread_idx_1_fu_124_p2);
    sensitive << ( idx_reg_48 );
    sensitive << ( temp1_reg_80 );

    SC_METHOD(thread_j_fu_114_p2);
    sensitive << ( j_0_in_reg_71 );

    SC_METHOD(thread_shape_address0);
    sensitive << ( j_reg_168 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_shape_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sub_address0);
    sensitive << ( i_cast1_fu_94_p1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sub_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_1_fu_90_p1);
    sensitive << ( ndim );

    SC_METHOD(thread_tmp_fu_120_p2);
    sensitive << ( i_cast1_reg_145 );
    sensitive << ( j_reg_168 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_103_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_fu_120_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000001";
    ap_return_preg = "0000000000000000000000000000000000000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "k2c_sub2idx_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sub_address0, "(port)sub_address0");
    sc_trace(mVcdFile, sub_ce0, "(port)sub_ce0");
    sc_trace(mVcdFile, sub_q0, "(port)sub_q0");
    sc_trace(mVcdFile, shape_address0, "(port)shape_address0");
    sc_trace(mVcdFile, shape_ce0, "(port)shape_ce0");
    sc_trace(mVcdFile, shape_q0, "(port)shape_q0");
    sc_trace(mVcdFile, ndim, "(port)ndim");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_1_fu_90_p1, "tmp_1_fu_90_p1");
    sc_trace(mVcdFile, tmp_1_reg_140, "tmp_1_reg_140");
    sc_trace(mVcdFile, i_cast1_fu_94_p1, "i_cast1_fu_94_p1");
    sc_trace(mVcdFile, i_cast1_reg_145, "i_cast1_reg_145");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_1_fu_108_p2, "i_1_fu_108_p2");
    sc_trace(mVcdFile, i_1_reg_153, "i_1_reg_153");
    sc_trace(mVcdFile, exitcond_fu_103_p2, "exitcond_fu_103_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_fu_114_p2, "j_fu_114_p2");
    sc_trace(mVcdFile, j_reg_168, "j_reg_168");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_fu_120_p2, "tmp_fu_120_p2");
    sc_trace(mVcdFile, idx_1_fu_124_p2, "idx_1_fu_124_p2");
    sc_trace(mVcdFile, shape_load_reg_188, "shape_load_reg_188");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_130_p2, "grp_fu_130_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, idx_reg_48, "idx_reg_48");
    sc_trace(mVcdFile, i_reg_60, "i_reg_60");
    sc_trace(mVcdFile, j_0_in_reg_71, "j_0_in_reg_71");
    sc_trace(mVcdFile, temp1_reg_80, "temp1_reg_80");
    sc_trace(mVcdFile, i_cast_fu_99_p1, "i_cast_fu_99_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

k2c_sub2idx::~k2c_sub2idx() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sample0_mul_64s_6bkb_U1;
}

void k2c_sub2idx::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void k2c_sub2idx::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv64_0;
    } else {
        if ((esl_seteq<1,1,1>(exitcond_fu_103_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_return_preg = idx_reg_48.read();
        }
    }
    if ((esl_seteq<1,1,1>(tmp_fu_120_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        i_reg_60 = i_1_reg_153.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_60 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(tmp_fu_120_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        idx_reg_48 = idx_1_fu_124_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        idx_reg_48 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        j_0_in_reg_71 = j_reg_168.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_0_in_reg_71 = ndim.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        temp1_reg_80 = grp_fu_130_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        temp1_reg_80 = sub_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_153 = i_1_fu_108_p2.read();
        i_cast1_reg_145 = i_cast1_fu_94_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_reg_168 = j_fu_114_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        shape_load_reg_188 = shape_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_1_reg_140 = tmp_1_fu_90_p1.read();
    }
}

void k2c_sub2idx::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void k2c_sub2idx::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void k2c_sub2idx::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void k2c_sub2idx::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void k2c_sub2idx::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void k2c_sub2idx::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void k2c_sub2idx::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void k2c_sub2idx::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void k2c_sub2idx::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond_fu_103_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void k2c_sub2idx::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void k2c_sub2idx::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond_fu_103_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void k2c_sub2idx::thread_ap_return() {
    if ((esl_seteq<1,1,1>(exitcond_fu_103_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_return = idx_reg_48.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void k2c_sub2idx::thread_exitcond_fu_103_p2() {
    exitcond_fu_103_p2 = (!i_cast_fu_99_p1.read().is_01() || !tmp_1_reg_140.read().is_01())? sc_lv<1>(): sc_lv<1>(i_cast_fu_99_p1.read() == tmp_1_reg_140.read());
}

void k2c_sub2idx::thread_i_1_fu_108_p2() {
    i_1_fu_108_p2 = (!i_reg_60.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_60.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void k2c_sub2idx::thread_i_cast1_fu_94_p1() {
    i_cast1_fu_94_p1 = esl_zext<64,3>(i_reg_60.read());
}

void k2c_sub2idx::thread_i_cast_fu_99_p1() {
    i_cast_fu_99_p1 = esl_zext<4,3>(i_reg_60.read());
}

void k2c_sub2idx::thread_idx_1_fu_124_p2() {
    idx_1_fu_124_p2 = (!temp1_reg_80.read().is_01() || !idx_reg_48.read().is_01())? sc_lv<64>(): (sc_bigint<64>(temp1_reg_80.read()) + sc_biguint<64>(idx_reg_48.read()));
}

void k2c_sub2idx::thread_j_fu_114_p2() {
    j_fu_114_p2 = (!j_0_in_reg_71.read().is_01() || !ap_const_lv64_FFFFFFFFFFFFFFFF.is_01())? sc_lv<64>(): (sc_biguint<64>(j_0_in_reg_71.read()) + sc_bigint<64>(ap_const_lv64_FFFFFFFFFFFFFFFF));
}

void k2c_sub2idx::thread_shape_address0() {
    shape_address0 =  (sc_lv<3>) (j_reg_168.read());
}

void k2c_sub2idx::thread_shape_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        shape_ce0 = ap_const_logic_1;
    } else {
        shape_ce0 = ap_const_logic_0;
    }
}

void k2c_sub2idx::thread_sub_address0() {
    sub_address0 =  (sc_lv<3>) (i_cast1_fu_94_p1.read());
}

void k2c_sub2idx::thread_sub_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sub_ce0 = ap_const_logic_1;
    } else {
        sub_ce0 = ap_const_logic_0;
    }
}

void k2c_sub2idx::thread_tmp_1_fu_90_p1() {
    tmp_1_fu_90_p1 = ndim.read().range(4-1, 0);
}

void k2c_sub2idx::thread_tmp_fu_120_p2() {
    tmp_fu_120_p2 = (!j_reg_168.read().is_01() || !i_cast1_reg_145.read().is_01())? sc_lv<1>(): (sc_biguint<64>(j_reg_168.read()) > sc_biguint<64>(i_cast1_reg_145.read()));
}

void k2c_sub2idx::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_103_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(tmp_fu_120_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXX";
            break;
    }
}

}

