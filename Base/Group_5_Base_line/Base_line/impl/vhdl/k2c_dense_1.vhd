-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_dense_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_array_ce0 : OUT STD_LOGIC;
    output_array_we0 : OUT STD_LOGIC;
    output_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_array_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_array_ce1 : OUT STD_LOGIC;
    output_array_we1 : OUT STD_LOGIC;
    output_array_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_array_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_array_ce0 : OUT STD_LOGIC;
    input_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_shape_ce0 : OUT STD_LOGIC;
    input_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    kernel_array_ce0 : OUT STD_LOGIC;
    kernel_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    kernel_shape_ce0 : OUT STD_LOGIC;
    kernel_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    bias_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    bias_array_ce0 : OUT STD_LOGIC;
    bias_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    fwork_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    fwork_ce0 : OUT STD_LOGIC;
    fwork_we0 : OUT STD_LOGIC;
    fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fwork_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    fwork_ce1 : OUT STD_LOGIC;
    fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of k2c_dense_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i2_reg_218 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_230 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state17_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal tmp_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_305_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_reg_515 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_520 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_342_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_542 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_array_addr_4_reg_552 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_30_fu_363_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias_array_load_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_i_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal exitcond9_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_69_fu_373_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal output_array_addr_1_reg_581 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_1_reg_581_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_1_reg_581_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_1_reg_581_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal notlhs_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_587_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_592_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal outrows1_fu_418_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal outrows1_reg_605 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal outcols_reg_611 : STD_LOGIC_VECTOR (63 downto 0);
    signal innerdim_reg_622 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_627 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal exitcond1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_68_fu_434_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal output_array_addr_reg_641 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_reg_641_pp1_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_reg_641_pp1_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal output_array_addr_reg_641_pp1_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal notlhs2_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_reg_647_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs3_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs3_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs3_reg_652_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_657 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state17 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state30 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal grp_k2c_dot_2_fu_242_ap_start : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_ap_done : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_ap_idle : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_ap_ready : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_C_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_dot_2_fu_242_C_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_C_array_we0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_C_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_2_fu_242_A_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_dot_2_fu_242_A_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_A_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dot_2_fu_242_A_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_B_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_dot_2_fu_242_B_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_B_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dot_2_fu_242_B_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_fwork_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_k2c_dot_2_fu_242_fwork_ce0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_fwork_we0 : STD_LOGIC;
    signal grp_k2c_dot_2_fu_242_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_2_fu_242_fwork_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_k2c_dot_2_fu_242_fwork_ce1 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_267_ap_start : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_267_ap_done : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_267_ap_idle : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_267_ap_ready : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_267_C_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_affine_matmul_fu_267_C_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_267_C_we0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_267_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_affine_matmul_fu_267_A_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_affine_matmul_fu_267_A_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_267_B_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_affine_matmul_fu_267_B_ce0 : STD_LOGIC;
    signal grp_k2c_affine_matmul_fu_267_d_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_k2c_affine_matmul_fu_267_d_ce0 : STD_LOGIC;
    signal i_i_reg_194 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_i_reg_206 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_k2c_dot_2_fu_242_ap_start_reg : STD_LOGIC := '0';
    signal grp_k2c_affine_matmul_fu_267_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_i_cast_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_35_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_75_fu_312_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_78_fu_348_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_77_fu_333_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i_48_fu_352_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_array_load_to_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_383_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_79_fu_393_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_33_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_array_load_2_s_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_444_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_fu_454_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_29_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal grp_fu_425_ce : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component k2c_dot_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        C_array_ce0 : OUT STD_LOGIC;
        C_array_we0 : OUT STD_LOGIC;
        C_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        A_array_ce0 : OUT STD_LOGIC;
        A_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        A_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        A_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_shape_ce0 : OUT STD_LOGIC;
        A_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        B_array_ce0 : OUT STD_LOGIC;
        B_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_shape_ce0 : OUT STD_LOGIC;
        B_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (63 downto 0);
        fwork_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        fwork_ce0 : OUT STD_LOGIC;
        fwork_we0 : OUT STD_LOGIC;
        fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fwork_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        fwork_ce1 : OUT STD_LOGIC;
        fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2c_affine_matmul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        d_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        d_ce0 : OUT STD_LOGIC;
        d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outrows : IN STD_LOGIC_VECTOR (63 downto 0);
        outcols : IN STD_LOGIC_VECTOR (63 downto 0);
        innerdim : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sample0_fadd_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample0_fcmp_32nslbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sample0_mul_64s_6bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_k2c_dot_2_fu_242 : component k2c_dot_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_dot_2_fu_242_ap_start,
        ap_done => grp_k2c_dot_2_fu_242_ap_done,
        ap_idle => grp_k2c_dot_2_fu_242_ap_idle,
        ap_ready => grp_k2c_dot_2_fu_242_ap_ready,
        C_array_address0 => grp_k2c_dot_2_fu_242_C_array_address0,
        C_array_ce0 => grp_k2c_dot_2_fu_242_C_array_ce0,
        C_array_we0 => grp_k2c_dot_2_fu_242_C_array_we0,
        C_array_d0 => grp_k2c_dot_2_fu_242_C_array_d0,
        C_array_q0 => output_array_q0,
        A_array_address0 => grp_k2c_dot_2_fu_242_A_array_address0,
        A_array_ce0 => grp_k2c_dot_2_fu_242_A_array_ce0,
        A_array_q0 => input_array_q0,
        A_ndim_read => input_ndim_read,
        A_numel_read => input_numel_read,
        A_shape_address0 => grp_k2c_dot_2_fu_242_A_shape_address0,
        A_shape_ce0 => grp_k2c_dot_2_fu_242_A_shape_ce0,
        A_shape_q0 => input_shape_q0,
        B_array_address0 => grp_k2c_dot_2_fu_242_B_array_address0,
        B_array_ce0 => grp_k2c_dot_2_fu_242_B_array_ce0,
        B_array_q0 => kernel_array_q0,
        B_ndim_read => kernel_ndim_read,
        B_numel_read => kernel_numel_read,
        B_shape_address0 => grp_k2c_dot_2_fu_242_B_shape_address0,
        B_shape_ce0 => grp_k2c_dot_2_fu_242_B_shape_ce0,
        B_shape_q0 => kernel_shape_q0,
        p_read4 => tmp_28_reg_515,
        fwork_address0 => grp_k2c_dot_2_fu_242_fwork_address0,
        fwork_ce0 => grp_k2c_dot_2_fu_242_fwork_ce0,
        fwork_we0 => grp_k2c_dot_2_fu_242_fwork_we0,
        fwork_d0 => grp_k2c_dot_2_fu_242_fwork_d0,
        fwork_q0 => fwork_q0,
        fwork_address1 => grp_k2c_dot_2_fu_242_fwork_address1,
        fwork_ce1 => grp_k2c_dot_2_fu_242_fwork_ce1,
        fwork_q1 => fwork_q1);

    grp_k2c_affine_matmul_fu_267 : component k2c_affine_matmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_affine_matmul_fu_267_ap_start,
        ap_done => grp_k2c_affine_matmul_fu_267_ap_done,
        ap_idle => grp_k2c_affine_matmul_fu_267_ap_idle,
        ap_ready => grp_k2c_affine_matmul_fu_267_ap_ready,
        C_address0 => grp_k2c_affine_matmul_fu_267_C_address0,
        C_ce0 => grp_k2c_affine_matmul_fu_267_C_ce0,
        C_we0 => grp_k2c_affine_matmul_fu_267_C_we0,
        C_d0 => grp_k2c_affine_matmul_fu_267_C_d0,
        C_q0 => output_array_q0,
        A_address0 => grp_k2c_affine_matmul_fu_267_A_address0,
        A_ce0 => grp_k2c_affine_matmul_fu_267_A_ce0,
        A_q0 => input_array_q0,
        B_address0 => grp_k2c_affine_matmul_fu_267_B_address0,
        B_ce0 => grp_k2c_affine_matmul_fu_267_B_ce0,
        B_q0 => kernel_array_q0,
        d_address0 => grp_k2c_affine_matmul_fu_267_d_address0,
        d_ce0 => grp_k2c_affine_matmul_fu_267_d_ce0,
        d_q0 => bias_array_q0,
        outrows => outrows1_reg_605,
        outcols => outcols_reg_611,
        innerdim => innerdim_reg_622);

    sample0_fadd_32nscud_U148 : component sample0_fadd_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_292,
        din1 => bias_array_load_reg_562,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p2);

    sample0_fcmp_32nslbW_U149 : component sample0_fcmp_32nslbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_292,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_287_p2);

    sample0_mul_64s_6bkb_U150 : component sample0_mul_64s_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => outcols_reg_611,
        din1 => outrows1_reg_605,
        ce => grp_fu_425_ce,
        dout => grp_fu_425_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_328_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state17);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_328_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state30) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state30)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state30);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_affine_matmul_fu_267_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_affine_matmul_fu_267_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_k2c_affine_matmul_fu_267_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_affine_matmul_fu_267_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_affine_matmul_fu_267_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_dot_2_fu_242_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_dot_2_fu_242_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_299_p2 = ap_const_lv1_0))) then 
                    grp_k2c_dot_2_fu_242_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_dot_2_fu_242_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_dot_2_fu_242_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_328_p2 = ap_const_lv1_0))) then 
                i2_reg_218 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond9_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i2_reg_218 <= i_69_fu_373_p2;
            end if; 
        end if;
    end process;

    i_i_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_337_p2 = ap_const_lv1_1))) then 
                i_i_reg_194 <= i_30_fu_363_p2;
            elsif (((grp_k2c_dot_2_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_194 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_reg_230 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond1_fu_429_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_reg_230 <= i_68_fu_434_p2;
            end if; 
        end if;
    end process;

    j_i_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_328_p2 = ap_const_lv1_1))) then 
                j_i_reg_206 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_i_reg_206 <= j_reg_542;
            end if; 
        end if;
    end process;

    reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                reg_292 <= output_array_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                reg_292 <= output_array_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                bias_array_load_reg_562 <= bias_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_299_p2 = ap_const_lv1_1))) then
                icmp_reg_520 <= icmp_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                innerdim_reg_622 <= kernel_shape_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_542 <= j_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                notlhs2_reg_647 <= notlhs2_fu_458_p2;
                notlhs2_reg_647_pp1_iter3_reg <= notlhs2_reg_647;
                notrhs3_reg_652 <= notrhs3_fu_464_p2;
                notrhs3_reg_652_pp1_iter3_reg <= notrhs3_reg_652;
                output_array_addr_reg_641_pp1_iter2_reg <= output_array_addr_reg_641_pp1_iter1_reg;
                output_array_addr_reg_641_pp1_iter3_reg <= output_array_addr_reg_641_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                notlhs_reg_587 <= notlhs_fu_397_p2;
                notlhs_reg_587_pp0_iter3_reg <= notlhs_reg_587;
                notrhs_reg_592 <= notrhs_fu_403_p2;
                notrhs_reg_592_pp0_iter3_reg <= notrhs_reg_592;
                output_array_addr_1_reg_581_pp0_iter2_reg <= output_array_addr_1_reg_581_pp0_iter1_reg;
                output_array_addr_1_reg_581_pp0_iter3_reg <= output_array_addr_1_reg_581_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                outcols_reg_611 <= kernel_shape_q0;
                outrows1_reg_605 <= outrows1_fu_418_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond9_fu_368_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_array_addr_1_reg_581 <= i2_reg_218(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_array_addr_1_reg_581_pp0_iter1_reg <= output_array_addr_1_reg_581;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_337_p2 = ap_const_lv1_0))) then
                output_array_addr_4_reg_552 <= tmp_i_cast_fu_358_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond1_fu_429_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                output_array_addr_reg_641 <= i_reg_230(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                output_array_addr_reg_641_pp1_iter1_reg <= output_array_addr_reg_641;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_299_p2 = ap_const_lv1_0))) then
                tmp_28_reg_515 <= tmp_28_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_30_reg_657 <= grp_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_34_reg_597 <= grp_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_43_i_reg_567 <= grp_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp_s_reg_627 <= grp_fu_425_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, tmp_fu_299_p2, tmp_i_fu_328_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_337_p2, exitcond9_fu_368_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, exitcond1_fu_429_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter4, grp_k2c_dot_2_fu_242_ap_done, grp_k2c_affine_matmul_fu_267_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_299_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_299_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_k2c_dot_2_fu_242_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_328_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_337_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond9_fu_368_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond9_fu_368_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_k2c_affine_matmul_fu_267_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond1_fu_429_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond1_fu_429_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(25);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(18);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state26 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(22);
    ap_CS_fsm_state28 <= ap_CS_fsm(23);
    ap_CS_fsm_state29 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(26);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state17_assign_proc : process(exitcond9_fu_368_p2)
    begin
        if ((exitcond9_fu_368_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state30_assign_proc : process(exitcond1_fu_429_p2)
    begin
        if ((exitcond1_fu_429_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state30 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bias_array_address0_assign_proc : process(ap_CS_fsm_state4, grp_k2c_affine_matmul_fu_267_d_address0, j_i_reg_206, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_array_address0 <= j_i_reg_206(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            bias_array_address0 <= grp_k2c_affine_matmul_fu_267_d_address0;
        else 
            bias_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    bias_array_ce0_assign_proc : process(ap_CS_fsm_state4, grp_k2c_affine_matmul_fu_267_d_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            bias_array_ce0 <= grp_k2c_affine_matmul_fu_267_d_ce0;
        else 
            bias_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_429_p2 <= "1" when (i_reg_230 = tmp_s_reg_627) else "0";
    exitcond9_fu_368_p2 <= "1" when (i2_reg_218 = output_numel_read) else "0";
    exitcond_i_fu_337_p2 <= "1" when (j_i_reg_206 = bias_numel_read) else "0";
    fwork_address0 <= grp_k2c_dot_2_fu_242_fwork_address0;
    fwork_address1 <= grp_k2c_dot_2_fu_242_fwork_address1;
    fwork_ce0 <= grp_k2c_dot_2_fu_242_fwork_ce0;
    fwork_ce1 <= grp_k2c_dot_2_fu_242_fwork_ce1;
    fwork_d0 <= grp_k2c_dot_2_fu_242_fwork_d0;
    fwork_we0 <= grp_k2c_dot_2_fu_242_fwork_we0;

    grp_fu_425_ce_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state29, grp_k2c_affine_matmul_fu_267_ap_done, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((grp_k2c_affine_matmul_fu_267_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            grp_fu_425_ce <= ap_const_logic_1;
        else 
            grp_fu_425_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_k2c_affine_matmul_fu_267_ap_start <= grp_k2c_affine_matmul_fu_267_ap_start_reg;
    grp_k2c_dot_2_fu_242_ap_start <= grp_k2c_dot_2_fu_242_ap_start_reg;
    i_30_fu_363_p2 <= std_logic_vector(unsigned(i_i_reg_194) + unsigned(bias_numel_read));
    i_68_fu_434_p2 <= std_logic_vector(unsigned(i_reg_230) + unsigned(ap_const_lv64_1));
    i_69_fu_373_p2 <= std_logic_vector(unsigned(i2_reg_218) + unsigned(ap_const_lv64_1));
    icmp_fu_322_p2 <= "0" when (tmp_75_fu_312_p4 = ap_const_lv63_0) else "1";

    input_array_address0_assign_proc : process(grp_k2c_dot_2_fu_242_A_array_address0, grp_k2c_affine_matmul_fu_267_A_address0, ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input_array_address0 <= grp_k2c_affine_matmul_fu_267_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_address0 <= grp_k2c_dot_2_fu_242_A_array_address0;
        else 
            input_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_array_ce0_assign_proc : process(grp_k2c_dot_2_fu_242_A_array_ce0, grp_k2c_affine_matmul_fu_267_A_ce0, ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input_array_ce0 <= grp_k2c_affine_matmul_fu_267_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_ce0 <= grp_k2c_dot_2_fu_242_A_array_ce0;
        else 
            input_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_shape_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_299_p2, grp_k2c_dot_2_fu_242_A_shape_address0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_299_p2 = ap_const_lv1_1))) then 
            input_shape_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_shape_address0 <= grp_k2c_dot_2_fu_242_A_shape_address0;
        else 
            input_shape_address0 <= "XXX";
        end if; 
    end process;


    input_shape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_299_p2, grp_k2c_dot_2_fu_242_A_shape_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_299_p2 = ap_const_lv1_1))) then 
            input_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_shape_ce0 <= grp_k2c_dot_2_fu_242_A_shape_ce0;
        else 
            input_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_342_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j_i_reg_206));

    kernel_array_address0_assign_proc : process(grp_k2c_dot_2_fu_242_B_array_address0, grp_k2c_affine_matmul_fu_267_B_address0, ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            kernel_array_address0 <= grp_k2c_affine_matmul_fu_267_B_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_array_address0 <= grp_k2c_dot_2_fu_242_B_array_address0;
        else 
            kernel_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    kernel_array_ce0_assign_proc : process(grp_k2c_dot_2_fu_242_B_array_ce0, grp_k2c_affine_matmul_fu_267_B_ce0, ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            kernel_array_ce0 <= grp_k2c_affine_matmul_fu_267_B_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_array_ce0 <= grp_k2c_dot_2_fu_242_B_array_ce0;
        else 
            kernel_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_shape_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_299_p2, ap_CS_fsm_state23, grp_k2c_dot_2_fu_242_B_shape_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            kernel_shape_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_299_p2 = ap_const_lv1_1))) then 
            kernel_shape_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_shape_address0 <= grp_k2c_dot_2_fu_242_B_shape_address0;
        else 
            kernel_shape_address0 <= "XXX";
        end if; 
    end process;


    kernel_shape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_299_p2, ap_CS_fsm_state23, grp_k2c_dot_2_fu_242_B_shape_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_299_p2 = ap_const_lv1_1)))) then 
            kernel_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_shape_ce0 <= grp_k2c_dot_2_fu_242_B_shape_ce0;
        else 
            kernel_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs2_fu_458_p2 <= "0" when (tmp_27_fu_444_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_397_p2 <= "0" when (tmp_32_fu_383_p4 = ap_const_lv8_FF) else "1";
    notrhs3_fu_464_p2 <= "1" when (tmp_76_fu_454_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_403_p2 <= "1" when (tmp_79_fu_393_p1 = ap_const_lv23_0) else "0";

    output_array_address0_assign_proc : process(i2_reg_218, ap_CS_fsm_pp0_stage0, output_array_addr_4_reg_552, ap_CS_fsm_state5, ap_enable_reg_pp0_iter0, output_array_addr_reg_641_pp1_iter3_reg, ap_enable_reg_pp1_iter4, grp_k2c_dot_2_fu_242_C_array_address0, grp_k2c_affine_matmul_fu_267_C_address0, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            output_array_address0 <= output_array_addr_reg_641_pp1_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_array_address0 <= i2_reg_218(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_array_address0 <= output_array_addr_4_reg_552;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_array_address0 <= grp_k2c_affine_matmul_fu_267_C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_address0 <= grp_k2c_dot_2_fu_242_C_array_address0;
        else 
            output_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_address1_assign_proc : process(i_reg_230, ap_CS_fsm_pp1_stage0, output_array_addr_1_reg_581_pp0_iter3_reg, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_array_address1 <= i_reg_230(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_array_address1 <= output_array_addr_1_reg_581_pp0_iter3_reg;
        else 
            output_array_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state5, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter4, grp_k2c_dot_2_fu_242_C_array_ce0, grp_k2c_affine_matmul_fu_267_C_ce0, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_array_ce0 <= grp_k2c_affine_matmul_fu_267_C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_ce0 <= grp_k2c_dot_2_fu_242_C_array_ce0;
        else 
            output_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_array_ce1 <= ap_const_logic_1;
        else 
            output_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_d0_assign_proc : process(tmp_43_i_reg_567, ap_enable_reg_pp1_iter4, grp_k2c_dot_2_fu_242_C_array_d0, grp_k2c_affine_matmul_fu_267_C_d0, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            output_array_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_array_d0 <= tmp_43_i_reg_567;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_array_d0 <= grp_k2c_affine_matmul_fu_267_C_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_d0 <= grp_k2c_dot_2_fu_242_C_array_d0;
        else 
            output_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    output_array_d1 <= ap_const_lv32_0;
    output_array_load_2_s_fu_440_p1 <= reg_292;
    output_array_load_to_fu_379_p1 <= reg_292;

    output_array_we0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4, grp_k2c_dot_2_fu_242_C_array_we0, grp_k2c_affine_matmul_fu_267_C_we0, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state25, tmp_31_fu_474_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (tmp_31_fu_474_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_array_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_array_we0 <= grp_k2c_affine_matmul_fu_267_C_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_we0 <= grp_k2c_dot_2_fu_242_C_array_we0;
        else 
            output_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4, tmp_35_fu_413_p2)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_35_fu_413_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_array_we1 <= ap_const_logic_1;
        else 
            output_array_we1 <= ap_const_logic_0;
        end if; 
    end process;

    outrows1_fu_418_p3 <= 
        input_shape_q0 when (icmp_reg_520(0) = '1') else 
        ap_const_lv64_1;
    tmp_27_fu_444_p4 <= output_array_load_2_s_fu_440_p1(30 downto 23);
    tmp_28_fu_305_p2 <= std_logic_vector(unsigned(input_ndim_read) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    tmp_29_fu_470_p2 <= (notrhs3_reg_652_pp1_iter3_reg or notlhs2_reg_647_pp1_iter3_reg);
    tmp_31_fu_474_p2 <= (tmp_30_reg_657 and tmp_29_fu_470_p2);
    tmp_32_fu_383_p4 <= output_array_load_to_fu_379_p1(30 downto 23);
    tmp_33_fu_409_p2 <= (notrhs_reg_592_pp0_iter3_reg or notlhs_reg_587_pp0_iter3_reg);
    tmp_35_fu_413_p2 <= (tmp_34_reg_597 and tmp_33_fu_409_p2);
    tmp_75_fu_312_p4 <= input_ndim_read(63 downto 1);
    tmp_76_fu_454_p1 <= output_array_load_2_s_fu_440_p1(23 - 1 downto 0);
    tmp_77_fu_333_p1 <= j_i_reg_206(15 - 1 downto 0);
    tmp_78_fu_348_p1 <= i_i_reg_194(15 - 1 downto 0);
    tmp_79_fu_393_p1 <= output_array_load_to_fu_379_p1(23 - 1 downto 0);
    tmp_fu_299_p2 <= "1" when (unsigned(input_ndim_read) < unsigned(ap_const_lv64_3)) else "0";
    tmp_i_48_fu_352_p2 <= std_logic_vector(unsigned(tmp_78_fu_348_p1) + unsigned(tmp_77_fu_333_p1));
    tmp_i_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_48_fu_352_p2),64));
    tmp_i_fu_328_p2 <= "1" when (unsigned(i_i_reg_194) < unsigned(output_numel_read)) else "0";
end behav;
