// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_affine_matmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        d_address0,
        d_ce0,
        d_q0,
        outrows,
        outcols,
        innerdim
);

parameter    ap_ST_fsm_state1 = 42'd1;
parameter    ap_ST_fsm_state2 = 42'd2;
parameter    ap_ST_fsm_state3 = 42'd4;
parameter    ap_ST_fsm_state4 = 42'd8;
parameter    ap_ST_fsm_state5 = 42'd16;
parameter    ap_ST_fsm_state6 = 42'd32;
parameter    ap_ST_fsm_state7 = 42'd64;
parameter    ap_ST_fsm_state8 = 42'd128;
parameter    ap_ST_fsm_state9 = 42'd256;
parameter    ap_ST_fsm_state10 = 42'd512;
parameter    ap_ST_fsm_state11 = 42'd1024;
parameter    ap_ST_fsm_state12 = 42'd2048;
parameter    ap_ST_fsm_state13 = 42'd4096;
parameter    ap_ST_fsm_state14 = 42'd8192;
parameter    ap_ST_fsm_state15 = 42'd16384;
parameter    ap_ST_fsm_state16 = 42'd32768;
parameter    ap_ST_fsm_state17 = 42'd65536;
parameter    ap_ST_fsm_state18 = 42'd131072;
parameter    ap_ST_fsm_state19 = 42'd262144;
parameter    ap_ST_fsm_state20 = 42'd524288;
parameter    ap_ST_fsm_state21 = 42'd1048576;
parameter    ap_ST_fsm_state22 = 42'd2097152;
parameter    ap_ST_fsm_state23 = 42'd4194304;
parameter    ap_ST_fsm_state24 = 42'd8388608;
parameter    ap_ST_fsm_state25 = 42'd16777216;
parameter    ap_ST_fsm_state26 = 42'd33554432;
parameter    ap_ST_fsm_state27 = 42'd67108864;
parameter    ap_ST_fsm_state28 = 42'd134217728;
parameter    ap_ST_fsm_state29 = 42'd268435456;
parameter    ap_ST_fsm_state30 = 42'd536870912;
parameter    ap_ST_fsm_state31 = 42'd1073741824;
parameter    ap_ST_fsm_state32 = 42'd2147483648;
parameter    ap_ST_fsm_state33 = 42'd4294967296;
parameter    ap_ST_fsm_state34 = 42'd8589934592;
parameter    ap_ST_fsm_state35 = 42'd17179869184;
parameter    ap_ST_fsm_state36 = 42'd34359738368;
parameter    ap_ST_fsm_state37 = 42'd68719476736;
parameter    ap_ST_fsm_state38 = 42'd137438953472;
parameter    ap_ST_fsm_state39 = 42'd274877906944;
parameter    ap_ST_fsm_state40 = 42'd549755813888;
parameter    ap_ST_fsm_state41 = 42'd1099511627776;
parameter    ap_ST_fsm_state42 = 42'd2199023255552;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [13:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [13:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [13:0] d_address0;
output   d_ce0;
input  [31:0] d_q0;
input  [63:0] outrows;
input  [63:0] outcols;
input  [63:0] innerdim;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg A_ce0;
reg B_ce0;
reg d_ce0;

(* fsm_encoding = "none" *) reg   [41:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_158;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state32;
wire   [31:0] grp_fu_150_p2;
reg   [31:0] reg_163;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_168_p2;
reg   [63:0] tmp_reg_299;
wire   [13:0] i_72_fu_184_p2;
wire    ap_CS_fsm_state7;
wire  signed [14:0] tmp_83_fu_190_p1;
reg  signed [14:0] tmp_83_reg_312;
wire   [0:0] exitcond3_fu_179_p2;
wire  signed [14:0] tmp_84_fu_193_p1;
reg  signed [14:0] tmp_84_reg_318;
wire  signed [14:0] tmp_85_fu_196_p1;
wire    ap_CS_fsm_state8;
wire   [63:0] i_73_fu_205_p2;
reg   [63:0] i_73_reg_332;
wire  signed [14:0] grp_fu_264_p2;
reg  signed [14:0] outrowidx_reg_337;
wire    ap_CS_fsm_state10;
wire  signed [14:0] grp_fu_269_p2;
reg  signed [14:0] inneridx_reg_342;
wire   [14:0] tmp_86_fu_211_p1;
reg   [14:0] tmp_86_reg_347;
wire    ap_CS_fsm_state11;
wire   [63:0] j_12_fu_220_p2;
reg   [63:0] j_12_reg_355;
reg   [13:0] C_addr_5_reg_360;
wire   [0:0] exitcond1_fu_215_p2;
wire  signed [14:0] tmp_87_fu_236_p1;
wire    ap_CS_fsm_state12;
wire   [63:0] k_2_fu_245_p2;
reg   [63:0] k_2_reg_373;
(* use_dsp48 = "no" *) wire   [14:0] sum5_fu_251_p2;
reg   [14:0] sum5_reg_378;
wire   [0:0] exitcond_fu_240_p2;
wire  signed [14:0] grp_fu_274_p3;
reg  signed [14:0] sum8_reg_388;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
reg   [31:0] A_load_reg_403;
wire    ap_CS_fsm_state16;
reg   [31:0] B_load_reg_408;
wire   [31:0] grp_fu_154_p2;
reg   [31:0] tmp_40_reg_413;
reg   [31:0] d_load_reg_418;
reg   [13:0] i_reg_104;
reg   [63:0] i_1_reg_115;
reg   [63:0] j_reg_126;
wire    ap_CS_fsm_state42;
reg   [63:0] k_reg_139;
wire    ap_CS_fsm_state31;
wire   [63:0] i_cast_fu_174_p1;
wire   [63:0] sum2_cast_fu_231_p1;
wire   [63:0] sum5_cast_fu_256_p1;
wire   [63:0] sum8_cast_fu_260_p1;
wire    ap_CS_fsm_state20;
reg   [31:0] grp_fu_150_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state17;
wire  signed [63:0] tmp_83_fu_190_p0;
wire  signed [63:0] exitcond2_fu_200_p1;
wire  signed [63:0] exitcond1_fu_215_p1;
(* use_dsp48 = "no" *) wire   [14:0] sum2_fu_226_p2;
wire   [0:0] exitcond2_fu_200_p2;
reg   [41:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 42'd1;
end

sample0_fadd_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sample0_fadd_32nscud_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_158),
    .din1(grp_fu_150_p1),
    .ce(1'b1),
    .dout(grp_fu_150_p2)
);

sample0_fmul_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sample0_fmul_32nsdEe_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_403),
    .din1(B_load_reg_408),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

sample0_mul_64s_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sample0_mul_64s_6bkb_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(outcols),
    .din1(outrows),
    .ce(1'b1),
    .dout(grp_fu_168_p2)
);

sample0_mul_mul_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
sample0_mul_mul_1eOg_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_85_fu_196_p1),
    .din1(tmp_83_reg_312),
    .ce(1'b1),
    .dout(grp_fu_264_p2)
);

sample0_mul_mul_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
sample0_mul_mul_1eOg_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_85_fu_196_p1),
    .din1(tmp_84_reg_318),
    .ce(1'b1),
    .dout(grp_fu_269_p2)
);

sample0_mac_muladkbM #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
sample0_mac_muladkbM_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_87_fu_236_p1),
    .din1(tmp_83_reg_312),
    .din2(tmp_86_reg_347),
    .ce(1'b1),
    .dout(grp_fu_274_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_215_p2 == 1'd1))) begin
        i_1_reg_115 <= i_73_reg_332;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_179_p2 == 1'd1))) begin
        i_1_reg_115 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_179_p2 == 1'd0))) begin
        i_reg_104 <= i_72_fu_184_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_104 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        j_reg_126 <= j_12_reg_355;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j_reg_126 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_215_p2 == 1'd0))) begin
        k_reg_139 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        k_reg_139 <= k_2_reg_373;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        A_load_reg_403 <= A_q0;
        B_load_reg_408 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_215_p2 == 1'd0))) begin
        C_addr_5_reg_360 <= sum2_cast_fu_231_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        d_load_reg_418 <= d_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_73_reg_332 <= i_73_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        inneridx_reg_342 <= grp_fu_269_p2;
        outrowidx_reg_337 <= grp_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_12_reg_355 <= j_12_fu_220_p2;
        tmp_86_reg_347 <= tmp_86_fu_211_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        k_2_reg_373 <= k_2_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_158 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_163 <= grp_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_240_p2 == 1'd0))) begin
        sum5_reg_378 <= sum5_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sum8_reg_388 <= grp_fu_274_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_40_reg_413 <= grp_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_179_p2 == 1'd1))) begin
        tmp_83_reg_312 <= tmp_83_fu_190_p1;
        tmp_84_reg_318 <= tmp_84_fu_193_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_299 <= grp_fu_168_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state12))) begin
        C_address0 = C_addr_5_reg_360;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_address0 = i_cast_fu_174_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state42))) begin
        C_d0 = reg_163;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_d0 = 32'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state42) | ((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_179_p2 == 1'd0)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state8) & (exitcond2_fu_200_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond2_fu_200_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        d_ce0 = 1'b1;
    end else begin
        d_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_150_p1 = d_load_reg_418;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_150_p1 = tmp_40_reg_413;
    end else begin
        grp_fu_150_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_179_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond2_fu_200_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_215_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_240_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = sum5_cast_fu_256_p1;

assign B_address0 = sum8_cast_fu_260_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign d_address0 = j_reg_126;

assign exitcond1_fu_215_p1 = outcols;

assign exitcond1_fu_215_p2 = ((j_reg_126 == exitcond1_fu_215_p1) ? 1'b1 : 1'b0);

assign exitcond2_fu_200_p1 = outrows;

assign exitcond2_fu_200_p2 = ((i_1_reg_115 == exitcond2_fu_200_p1) ? 1'b1 : 1'b0);

assign exitcond3_fu_179_p2 = ((i_cast_fu_174_p1 == tmp_reg_299) ? 1'b1 : 1'b0);

assign exitcond_fu_240_p2 = ((k_reg_139 == innerdim) ? 1'b1 : 1'b0);

assign i_72_fu_184_p2 = (i_reg_104 + 14'd1);

assign i_73_fu_205_p2 = (64'd1 + i_1_reg_115);

assign i_cast_fu_174_p1 = i_reg_104;

assign j_12_fu_220_p2 = (64'd1 + j_reg_126);

assign k_2_fu_245_p2 = (64'd1 + k_reg_139);

assign sum2_cast_fu_231_p1 = sum2_fu_226_p2;

assign sum2_fu_226_p2 = ($signed(tmp_86_fu_211_p1) + $signed(outrowidx_reg_337));

assign sum5_cast_fu_256_p1 = sum5_reg_378;

assign sum5_fu_251_p2 = ($signed(tmp_87_fu_236_p1) + $signed(inneridx_reg_342));

assign sum8_cast_fu_260_p1 = $unsigned(sum8_reg_388);

assign tmp_83_fu_190_p0 = outcols;

assign tmp_83_fu_190_p1 = tmp_83_fu_190_p0[14:0];

assign tmp_84_fu_193_p1 = innerdim[14:0];

assign tmp_85_fu_196_p1 = i_1_reg_115[14:0];

assign tmp_86_fu_211_p1 = j_reg_126[14:0];

assign tmp_87_fu_236_p1 = k_reg_139[14:0];

endmodule //k2c_affine_matmul
