// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_matmul_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        B_address0,
        B_ce0,
        B_q0,
        B_address1,
        B_ce1,
        B_q1,
        B_offset,
        outrows,
        outcols,
        innerdim
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_state19 = 31'd262144;
parameter    ap_ST_fsm_state20 = 31'd524288;
parameter    ap_ST_fsm_state21 = 31'd1048576;
parameter    ap_ST_fsm_state22 = 31'd2097152;
parameter    ap_ST_fsm_state23 = 31'd4194304;
parameter    ap_ST_fsm_state24 = 31'd8388608;
parameter    ap_ST_fsm_state25 = 31'd16777216;
parameter    ap_ST_fsm_state26 = 31'd33554432;
parameter    ap_ST_fsm_state27 = 31'd67108864;
parameter    ap_ST_fsm_state28 = 31'd134217728;
parameter    ap_ST_fsm_state29 = 31'd268435456;
parameter    ap_ST_fsm_state30 = 31'd536870912;
parameter    ap_ST_fsm_state31 = 31'd1073741824;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [12:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [12:0] B_address1;
output   B_ce1;
input  [31:0] B_q1;
input  [63:0] B_offset;
input  [63:0] outrows;
input  [63:0] outcols;
input  [63:0] innerdim;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg B_ce0;
reg B_ce1;

(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_145_p2;
reg   [63:0] total_ele_reg_302;
wire   [13:0] i_2_fu_161_p2;
wire    ap_CS_fsm_state7;
wire  signed [14:0] tmp_22_fu_167_p1;
reg  signed [14:0] tmp_22_reg_315;
wire   [0:0] exitcond3_fu_156_p2;
wire  signed [13:0] tmp_23_fu_170_p1;
reg  signed [13:0] tmp_23_reg_320;
wire  signed [13:0] tmp_24_fu_173_p1;
reg  signed [13:0] tmp_24_reg_325;
wire   [13:0] tmp_25_fu_176_p1;
reg   [13:0] tmp_25_reg_330;
wire    ap_CS_fsm_state8;
wire   [63:0] i_3_fu_192_p2;
reg   [63:0] i_3_reg_348;
wire  signed [14:0] grp_fu_261_p2;
reg  signed [14:0] outrowidx_reg_353;
wire    ap_CS_fsm_state10;
wire  signed [13:0] grp_fu_266_p2;
reg  signed [13:0] inneridx_reg_358;
wire  signed [13:0] tmp_28_fu_198_p1;
wire    ap_CS_fsm_state11;
wire   [63:0] k_1_fu_207_p2;
reg   [63:0] k_1_reg_371;
reg   [12:0] B_addr_reg_376;
wire   [0:0] exitcond1_fu_202_p2;
wire  signed [13:0] grp_fu_271_p3;
reg  signed [13:0] tmp_reg_381;
wire    ap_CS_fsm_state13;
wire   [63:0] j_1_fu_236_p2;
reg   [63:0] j_1_reg_389;
wire    ap_CS_fsm_state14;
(* use_dsp48 = "no" *) wire   [13:0] sum3_fu_242_p2;
reg   [13:0] sum3_reg_394;
wire   [0:0] exitcond_fu_231_p2;
reg   [13:0] C_addr_3_reg_399;
wire    ap_CS_fsm_state15;
reg   [31:0] B_load_3_reg_409;
wire    ap_CS_fsm_state16;
reg   [31:0] B_load_reg_414;
wire   [31:0] grp_fu_141_p2;
reg   [31:0] tmp_18_reg_419;
wire    ap_CS_fsm_state21;
reg   [31:0] C_load_reg_424;
wire   [31:0] grp_fu_137_p2;
reg   [31:0] tmp_20_reg_429;
wire    ap_CS_fsm_state30;
reg   [13:0] i_reg_93;
reg   [63:0] i_1_reg_104;
reg   [63:0] k_reg_115;
reg   [63:0] j_reg_126;
wire    ap_CS_fsm_state31;
wire   [63:0] i_cast_fu_151_p1;
wire   [63:0] sum_cast_fu_218_p1;
wire   [63:0] sum2_cast_fu_252_p1;
wire   [63:0] sum3_cast_fu_257_p1;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state17;
wire  signed [63:0] tmp_22_fu_167_p0;
wire  signed [63:0] tmp_24_fu_173_p0;
wire  signed [63:0] exitcond2_fu_187_p1;
(* use_dsp48 = "no" *) wire   [13:0] sum_fu_213_p2;
wire  signed [63:0] exitcond_fu_231_p1;
wire   [13:0] tmp_30_fu_227_p1;
wire   [14:0] tmp_29_fu_223_p1;
(* use_dsp48 = "no" *) wire   [14:0] sum2_fu_247_p2;
wire  signed [14:0] grp_fu_261_p0;
wire  signed [13:0] grp_fu_266_p0;
wire   [0:0] exitcond2_fu_187_p2;
reg   [30:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
end

sample0_fadd_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sample0_fadd_32nscud_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_load_reg_424),
    .din1(tmp_18_reg_419),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

sample0_fmul_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sample0_fmul_32nsdEe_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_load_3_reg_409),
    .din1(B_load_reg_414),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

sample0_mul_64s_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sample0_mul_64s_6bkb_U72(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(outcols),
    .din1(outrows),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

sample0_mul_mul_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
sample0_mul_mul_1eOg_U73(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_261_p0),
    .din1(tmp_22_reg_315),
    .ce(1'b1),
    .dout(grp_fu_261_p2)
);

sample0_mul_mul_1mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
sample0_mul_mul_1mb6_U74(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_266_p0),
    .din1(tmp_23_reg_320),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

sample0_mac_muladncg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
sample0_mac_muladncg_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_28_fu_198_p1),
    .din1(tmp_24_reg_325),
    .din2(tmp_25_reg_330),
    .ce(1'b1),
    .dout(grp_fu_271_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_1_reg_104 <= i_3_reg_348;
    end else if (((exitcond3_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_1_reg_104 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_reg_93 <= i_2_fu_161_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_93 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_126 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        j_reg_126 <= j_1_reg_389;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        k_reg_115 <= k_1_reg_371;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        k_reg_115 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_fu_202_p2 == 1'd0))) begin
        B_addr_reg_376 <= sum_cast_fu_218_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        B_load_3_reg_409 <= B_q0;
        B_load_reg_414 <= B_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond_fu_231_p2 == 1'd0))) begin
        C_addr_3_reg_399 <= sum2_cast_fu_252_p1;
        sum3_reg_394 <= sum3_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_load_reg_424 <= C_q0;
        tmp_18_reg_419 <= grp_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_3_reg_348 <= i_3_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        inneridx_reg_358 <= grp_fu_266_p2;
        outrowidx_reg_353 <= grp_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_1_reg_389 <= j_1_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        k_1_reg_371 <= k_1_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_20_reg_429 <= grp_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_22_reg_315 <= tmp_22_fu_167_p1;
        tmp_23_reg_320 <= tmp_23_fu_170_p1;
        tmp_24_reg_325 <= tmp_24_fu_173_p1;
        tmp_25_reg_330 <= tmp_25_fu_176_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_reg_381 <= grp_fu_271_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        total_ele_reg_302 <= grp_fu_145_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31))) begin
        C_address0 = C_addr_3_reg_399;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_address0 = i_cast_fu_151_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        C_d0 = tmp_20_reg_429;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_d0 = 32'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | ((exitcond3_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond2_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond3_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond2_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((exitcond1_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_address0 = B_addr_reg_376;

assign B_address1 = sum3_cast_fu_257_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond1_fu_202_p2 = ((k_reg_115 == innerdim) ? 1'b1 : 1'b0);

assign exitcond2_fu_187_p1 = outrows;

assign exitcond2_fu_187_p2 = ((i_1_reg_104 == exitcond2_fu_187_p1) ? 1'b1 : 1'b0);

assign exitcond3_fu_156_p2 = ((i_cast_fu_151_p1 == total_ele_reg_302) ? 1'b1 : 1'b0);

assign exitcond_fu_231_p1 = outcols;

assign exitcond_fu_231_p2 = ((j_reg_126 == exitcond_fu_231_p1) ? 1'b1 : 1'b0);

assign grp_fu_261_p0 = i_1_reg_104[14:0];

assign grp_fu_266_p0 = i_1_reg_104[13:0];

assign i_2_fu_161_p2 = (i_reg_93 + 14'd1);

assign i_3_fu_192_p2 = (64'd1 + i_1_reg_104);

assign i_cast_fu_151_p1 = i_reg_93;

assign j_1_fu_236_p2 = (64'd1 + j_reg_126);

assign k_1_fu_207_p2 = (64'd1 + k_reg_115);

assign sum2_cast_fu_252_p1 = sum2_fu_247_p2;

assign sum2_fu_247_p2 = ($signed(tmp_29_fu_223_p1) + $signed(outrowidx_reg_353));

assign sum3_cast_fu_257_p1 = sum3_reg_394;

assign sum3_fu_242_p2 = ($signed(tmp_reg_381) + $signed(tmp_30_fu_227_p1));

assign sum_cast_fu_218_p1 = sum_fu_213_p2;

assign sum_fu_213_p2 = ($signed(tmp_28_fu_198_p1) + $signed(inneridx_reg_358));

assign tmp_22_fu_167_p0 = outcols;

assign tmp_22_fu_167_p1 = tmp_22_fu_167_p0[14:0];

assign tmp_23_fu_170_p1 = innerdim[13:0];

assign tmp_24_fu_173_p0 = outcols;

assign tmp_24_fu_173_p1 = tmp_24_fu_173_p0[13:0];

assign tmp_25_fu_176_p1 = B_offset[13:0];

assign tmp_28_fu_198_p1 = k_reg_115[13:0];

assign tmp_29_fu_223_p1 = j_reg_126[14:0];

assign tmp_30_fu_227_p1 = j_reg_126[13:0];

endmodule //k2c_matmul_1
