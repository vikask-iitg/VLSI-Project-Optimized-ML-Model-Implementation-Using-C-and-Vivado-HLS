// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_sub2idx (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sub_address0,
        sub_ce0,
        sub_q0,
        shape_address0,
        shape_ce0,
        shape_q0,
        ndim,
        ap_return
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] sub_address0;
output   sub_ce0;
input  [63:0] sub_q0;
output  [2:0] shape_address0;
output   shape_ce0;
input  [63:0] shape_q0;
input  [63:0] ndim;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sub_ce0;
reg shape_ce0;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] tmp_1_fu_90_p1;
reg   [3:0] tmp_1_reg_140;
wire   [63:0] i_cast1_fu_94_p1;
reg   [63:0] i_cast1_reg_145;
wire    ap_CS_fsm_state2;
wire   [2:0] i_1_fu_108_p2;
reg   [2:0] i_1_reg_153;
wire   [0:0] exitcond_fu_103_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] j_fu_114_p2;
reg   [63:0] j_reg_168;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_fu_120_p2;
wire   [63:0] idx_1_fu_124_p2;
reg  signed [63:0] shape_load_reg_188;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_130_p2;
wire    ap_CS_fsm_state12;
reg   [63:0] idx_reg_48;
reg   [2:0] i_reg_60;
reg   [63:0] j_0_in_reg_71;
reg  signed [63:0] temp1_reg_80;
wire   [3:0] i_cast_fu_99_p1;
wire    ap_CS_fsm_state7;
reg   [63:0] ap_return_preg;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_return_preg = 64'd0;
end

sample0_mul_64s_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sample0_mul_64s_6bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shape_load_reg_188),
    .din1(temp1_reg_80),
    .ce(1'b1),
    .dout(grp_fu_130_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if (((exitcond_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_preg <= idx_reg_48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_60 <= i_1_reg_153;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_60 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        idx_reg_48 <= idx_1_fu_124_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idx_reg_48 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_0_in_reg_71 <= j_reg_168;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_in_reg_71 <= ndim;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        temp1_reg_80 <= grp_fu_130_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        temp1_reg_80 <= sub_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_153 <= i_1_fu_108_p2;
        i_cast1_reg_145[2 : 0] <= i_cast1_fu_94_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_168 <= j_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shape_load_reg_188 <= shape_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_1_reg_140 <= tmp_1_fu_90_p1;
    end
end

always @ (*) begin
    if ((((exitcond_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return = idx_reg_48;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shape_ce0 = 1'b1;
    end else begin
        shape_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_ce0 = 1'b1;
    end else begin
        sub_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign exitcond_fu_103_p2 = ((i_cast_fu_99_p1 == tmp_1_reg_140) ? 1'b1 : 1'b0);

assign i_1_fu_108_p2 = (i_reg_60 + 3'd1);

assign i_cast1_fu_94_p1 = i_reg_60;

assign i_cast_fu_99_p1 = i_reg_60;

assign idx_1_fu_124_p2 = ($signed(temp1_reg_80) + $signed(idx_reg_48));

assign j_fu_114_p2 = ($signed(j_0_in_reg_71) + $signed(64'd18446744073709551615));

assign shape_address0 = j_reg_168;

assign sub_address0 = i_cast1_fu_94_p1;

assign tmp_1_fu_90_p1 = ndim[3:0];

assign tmp_fu_120_p2 = ((j_reg_168 > i_cast1_reg_145) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i_cast1_reg_145[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //k2c_sub2idx
